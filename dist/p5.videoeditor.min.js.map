{"version":3,"file":"p5.videoeditor.min.js","sources":["../src/core/PluginManager.js","../src/core/RenderEngine.js","../src/utils/ErrorHandler.js","../src/core/Timeline.js","../src/core/FrameRecorder.js","../src/export/Exporter.js","../src/core/PlaybackController.js","../src/core/PerformanceManager.js","../src/utils/MemoryManager.js","../src/core/Keyframe.js","../src/utils/Easing.js","../src/clips/ClipBase.js","../src/clips/TextClip.js","../src/clips/ShapeClip.js","../src/clips/ImageClip.js","../src/clips/AudioClip.js","../src/clips/VideoClip.js","../src/effects/EffectBase.js","../src/p5.videoeditor.js"],"sourcesContent":["/**\n * @class PluginManager\n * @description Manages the registration and validation of all plugins.\n */\nexport class PluginManager {\n  constructor() {\n    /**\n     * @type {Array<object>}\n     */\n    this.plugins = [];\n  }\n\n  /**\n   * @method register\n   * @description Registers and validates a plugin.\n   * @param {object} plugin - The plugin object to register.\n   * @property {string} plugin.name - The name of the plugin.\n   * @property {string} plugin.type - The type of the plugin (e.g., 'effect', 'transition').\n   * @property {function} plugin.onLoad - The function to be called when the plugin is loaded.\n   */\n  register(plugin) {\n    if (!plugin) {\n      console.warn('Invalid plugin: Plugin object is null or undefined.');\n      return;\n    }\n\n    if (typeof plugin.name !== 'string' || plugin.name.trim() === '') {\n      console.warn('Invalid plugin: \"name\" must be a non-empty string.', plugin);\n      return;\n    }\n\n    if (typeof plugin.type !== 'string' || plugin.type.trim() === '') {\n      console.warn('Invalid plugin: \"type\" must be a non-empty string.', plugin);\n      return;\n    }\n\n    if (typeof plugin.onLoad !== 'function') {\n      console.warn('Invalid plugin: \"onLoad\" must be a function.', plugin);\n      return;\n    }\n\n    if (this.plugins.some(p => p.name === plugin.name)) {\n      console.warn(`Plugin with name \"${plugin.name}\" is already registered.`);\n      return;\n    }\n\n    this.plugins.push(plugin);\n  }\n}\n","/**\n * @class RenderEngine\n * @description Handles all WebGL-based drawing operations.\n * Manages a multi-pass rendering pipeline for applying post-processing effects.\n */\nclass RenderEngine {\n  /**\n   * @constructor\n   * @param {p5} p - The p5.js instance used for drawing.\n   * @param {HTMLCanvasElement} canvas - The main canvas element.\n   */\n  constructor(p, canvas) {\n    this.p = p;\n    this.canvas = canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n\n    // Create off-screen graphics buffers for multi-pass rendering\n    // sceneBuffer is where the main scene (clips and transitions) is drawn.\n    this.sceneBuffer = p.createGraphics(this.width, this.height, p.WEBGL);\n    // effectBuffer is used for applying post-processing shaders.\n    this.effectBuffer = p.createGraphics(this.width, this.height, p.WEBGL);\n\n    this.shaders = {}; // Cache for compiled shaders\n    this.shaderPromises = {}; // Cache for shader loading promises\n    this.postProcessingEffects = []; // Queue of effects for the current frame\n  }\n\n  /**\n   * Loads a shader and caches the loading promise.\n   * @param {string} key - A unique key to identify the shader.\n   * @param {string} fragUrl - The URL to the fragment shader file.\n   */\n  loadShader(key, fragUrl) {\n    if (this.shaders[key] || this.shaderPromises[key]) {\n      return;\n    }\n    // p5.js's loadShader is asynchronous. We store the promise.\n    const vertUrl = 'src/shaders/passthrough.vert'; // Assuming a generic vertex shader\n    const promise = this.p.loadShader(vertUrl, fragUrl, (shader) => {\n      this.shaders[key] = shader;\n      delete this.shaderPromises[key]; // Remove promise once resolved\n      console.log(`Shader \"${key}\" loaded.`);\n    });\n    this.shaderPromises[key] = promise;\n  }\n\n  /**\n   * The main rendering entry point. It orchestrates the multi-pass rendering process.\n   * This method is now async to await shader loading.\n   * @param {Set<ClipBase>} clipsToRender - A Set of all clips that should be rendered this frame.\n   * @param {TransitionBase[]} activeTransitions - A list of transitions currently active.\n   * @param {number} time - The current time of the timeline.\n   */\n  async render(clipsToRender, activeTransitions, time) {\n    // Pass 1: Render the entire scene (clips and transitions) to the scene buffer.\n    this.sceneBuffer.clear();\n    this.sceneBuffer.push();\n\n    const clipsInTransition = new Set();\n    for (const transition of activeTransitions) {\n      clipsInTransition.add(transition.fromClip);\n      clipsInTransition.add(transition.toClip);\n    }\n\n    const standaloneClips = [...clipsToRender].filter(clip => !clipsInTransition.has(clip));\n    standaloneClips.sort((a, b) => a.layer - b.layer);\n\n    // Render all clips that are not part of an active transition.\n    for (const clip of standaloneClips) {\n      const relativeTime = time - clip.start;\n      // Apply effects and render to the scene buffer\n      for (const effect of clip.effects) {\n        // NOTE: This logic assumes non-GPU effects for now.\n        // A full implementation would check effect type.\n        effect.apply(clip, this.sceneBuffer, relativeTime);\n      }\n      clip.render(this.sceneBuffer, relativeTime);\n    }\n\n    // Render the active transitions.\n    for (const transition of activeTransitions) {\n      transition.render(this.sceneBuffer, time);\n    }\n\n    this.sceneBuffer.pop();\n\n    // Pass 2: Apply post-processing effects.\n    // We'll ping-pong between buffers if there are multiple effects.\n    // For now, we just apply one effect from sceneBuffer to effectBuffer.\n    let sourceBuffer = this.sceneBuffer;\n\n    if (this.postProcessingEffects.length > 0) {\n        for (const effect of this.postProcessingEffects) {\n            // Ensure the shader is loaded before trying to use it.\n            if (this.shaderPromises[effect.type]) {\n                await this.shaderPromises[effect.type];\n            }\n\n            const shader = this.shaders[effect.type];\n            if (shader) {\n                this.effectBuffer.shader(shader);\n                shader.setUniform('u_texture', sourceBuffer);\n\n                // Apply all uniforms defined on the effect object\n                if (effect.uniforms) {\n                    for (const [key, value] of Object.entries(effect.uniforms)) {\n                        shader.setUniform(key, value);\n                    }\n                }\n\n                // Draw a full-screen quad to apply the shader to the entire buffer\n                this.effectBuffer.rect(-this.width / 2, -this.height / 2, this.width, this.height);\n                sourceBuffer = this.effectBuffer; // The output of this pass is the input for the next\n            }\n        }\n    }\n\n    // Pass 3: Draw the final result to the main canvas.\n    this.p.image(sourceBuffer, 0, 0);\n\n    // Clear the effects queue for the next frame.\n    this.postProcessingEffects = [];\n  }\n}\n\nexport default RenderEngine;\n","/**\n * @class ErrorHandler\n * @description Provides a centralized way to handle and display errors and warnings.\n */\nclass ErrorHandler {\n    /**\n     * Handles critical errors that might stop the execution.\n     * Logs the error and throws it to stop the script.\n     * @param {string} message - The error message.\n     * @param {Error} [originalError] - The original error object.\n     */\n    static critical(message, originalError) {\n        console.error(`[p5.videoeditor.js] Critical Error: ${message}`);\n        if (originalError) {\n            console.error(\"Original Error:\", originalError);\n        }\n        throw new Error(`[p5.videoeditor.js] ${message}`);\n    }\n\n    /**\n     * Handles warnings for non-critical issues.\n     * Logs a warning message to the console.\n     * @param {string} message - The warning message.\n     */\n    static warning(message) {\n        console.warn(`[p5.videoeditor.js] Warning: ${message}`);\n    }\n\n    /**\n     * Displays a user-friendly error message.\n     * In a real UI, this might show a modal or a notification.\n     * For now, it will just log a formatted error.\n     * @param {Error} error - The error object to display.\n     */\n    static showUserFriendlyError(error) {\n        // For now, just log a friendly message.\n        // This can be expanded to show an overlay on the p5.js canvas.\n        console.error(`[p5.videoeditor.js] An error occurred: ${error.message}`);\n    }\n}\n\nexport default ErrorHandler;\n","import { PluginManager } from './PluginManager.js';\nimport RenderEngine from './RenderEngine.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\n/**\n * @class Timeline\n * @description Manages the collection of clips, their timing, and the overall playback state.\n * It is the central component that orchestrates the animation.\n */\nclass Timeline {\n  /**\n   * @constructor\n   * @param {object} [options={}] - Configuration options for the timeline.\n   * @param {p5} p - The p5 instance.\n   * @param {HTMLCanvasElement} canvas - The canvas element.\n   * @param {number} [options.frameRate=60] - The target frame rate for the animation.\n   * @param {number} [options.duration=10000] - The total duration of the timeline in milliseconds.\n   */\n  constructor(p, canvas, { frameRate = 60, duration = 10000 } = {}) {\n    this.frameRate = frameRate;\n    this.duration = duration;\n    this.clips = [];\n    this.transitions = [];\n    this.time = 0;\n    this.isPlaying = false;\n\n    this.isBatching = false;\n    this.dirtyClips = new Set();\n    this.needsClipSorting = false;\n\n    this.renderEngine = new RenderEngine(p, canvas);\n    this.pluginManager = new PluginManager();\n    this.transitionTypes = new Map();\n    this.effectTypes = new Map();\n    this._pluginsLoaded = false;\n  }\n\n  /**\n   * Registers a plugin with the timeline.\n   * This is a wrapper around the PluginManager's register method.\n   * @param {object} plugin - The plugin to register.\n   */\n  use(plugin) {\n    this.pluginManager.register(plugin);\n  }\n\n  /**\n   * Adds a clip to the timeline.\n   * @param {ClipBase} clip - The clip instance to add.\n   */\n  addClip(clip) {\n    this.clips.push(clip);\n    clip.timeline = this;\n\n    if (this.isBatching) {\n      this.needsClipSorting = true;\n    } else {\n      this.clips.sort((a, b) => a.layer - b.layer);\n    }\n  }\n\n  /**\n   * Creates and adds a transition between two clips.\n   * @param {object} options - The configuration for the transition.\n   * @param {ClipBase} options.fromClip - The clip to transition from.\n   * @param {ClipBase} options.toClip - The clip to transition to.\n   * @param {number} options.duration - The duration of the transition in milliseconds.\n   * @param {string} options.type - The type of transition (e.g., 'crossfade').\n   * @returns {TransitionBase} The created transition instance.\n   */\n  /**\n   * Registers a new transition type with the timeline.\n   * This is typically called by a transition plugin's onLoad method.\n   * @param {string} name - The name of the transition (e.g., 'crossfade').\n   * @param {TransitionBase} transitionClass - The class constructor for the transition.\n   */\n  registerTransitionType(name, transitionClass) {\n    this.transitionTypes.set(name, transitionClass);\n  }\n\n  /**\n   * Registers a new effect type with the timeline.\n   * This is typically called by an effect plugin's onLoad method.\n   * @param {string} name - The name of the effect (e.g., 'wiggle').\n   * @param {EffectBase} effectClass - The class constructor for the effect.\n   */\n  registerEffectType(name, effectClass) {\n    this.effectTypes.set(name, effectClass);\n  }\n\n  addTransition(options) {\n    const TransitionClass = this.transitionTypes.get(options.type);\n    if (!TransitionClass) {\n      ErrorHandler.warning(`Unknown transition type: ${options.type}`);\n      return null;\n    }\n    const transition = new TransitionClass(options);\n    this.transitions.push(transition);\n    return transition;\n  }\n\n  /**\n   * Groups multiple clip or keyframe additions into a single operation to optimize performance.\n   * Keyframes and clips are sorted only once at the end of the batch.\n   * @param {Function} callback - A function that contains the operations to be batched.\n   */\n  batch(callback) {\n    this.isBatching = true;\n    try {\n      callback();\n    } finally {\n      this.isBatching = false;\n      this.finalizeBatch();\n    }\n  }\n\n  /**\n   * @private\n   * Finalizes batch operations by sorting dirty clips and layers.\n   */\n  finalizeBatch() {\n    this.dirtyClips.forEach(clip => clip.finalizeChanges());\n    this.dirtyClips.clear();\n\n    if (this.needsClipSorting) {\n      this.clips.sort((a, b) => a.layer - b.layer);\n      this.needsClipSorting = false;\n    }\n  }\n\n  /**\n   * Gets all clips that are active at the current time.\n   * @returns {ClipBase[]} An array of active clips.\n   */\n  getActiveClips() {\n    return this.clips.filter(clip =>\n      this.time >= clip.start && this.time < (clip.start + clip.duration)\n    );\n  }\n\n  /**\n   * The main update loop for the timeline. It advances the time and updates all relevant clips.\n   * This includes clips that are currently active and any clips involved in an active transition.\n   * @param {p5} p - The p5.js instance.\n   */\n  update(p) {\n    if (!this._pluginsLoaded) {\n      this._loadPlugins();\n      this._pluginsLoaded = true;\n    }\n\n    if (this.isPlaying) {\n      this.time += p.deltaTime;\n      if (this.time >= this.duration) {\n        this.time %= this.duration; // Frame-accurate loop\n      }\n    }\n\n    const clipsToUpdate = new Set();\n\n    // Add all clips that are currently active\n    for (const clip of this.clips) {\n        if (this.time >= clip.start && this.time < (clip.start + clip.duration)) {\n            clipsToUpdate.add(clip);\n        }\n    }\n\n    // Add clips from active transitions to ensure they are updated,\n    // even if they are outside their normal active window.\n    for (const transition of this.transitions) {\n      if (this.time >= transition.start && this.time < (transition.start + transition.duration)) {\n        clipsToUpdate.add(transition.fromClip);\n        clipsToUpdate.add(transition.toClip);\n      }\n    }\n\n    // Call update on every clip that needs processing for this frame.\n    for (const clip of clipsToUpdate) {\n      const relativeTime = this.time - clip.start;\n      clip.update(p, relativeTime);\n    }\n  }\n\n  /**\n   * Renders the current state of the timeline by delegating to the RenderEngine.\n   * @param {p5} p - The p5.js instance (passed for consistency, but RenderEngine already has it).\n   */\n  async render(p) {\n    const clipsToRender = new Set();\n    for (const clip of this.clips) {\n        if (this.time >= clip.start && this.time < (clip.start + clip.duration)) {\n            clipsToRender.add(clip);\n        }\n    }\n\n    const activeTransitions = [];\n    for (const transition of this.transitions) {\n        if (this.time >= transition.start && this.time < (transition.start + transition.duration)) {\n            activeTransitions.push(transition);\n            // Ensure both clips involved in the transition are considered for rendering\n            clipsToRender.add(transition.fromClip);\n            clipsToRender.add(transition.toClip);\n        }\n    }\n\n    await this.renderEngine.render(clipsToRender, activeTransitions, this.time);\n  }\n\n  /**\n   * Starts or resumes playback.\n   */\n  play() {\n    this.isPlaying = true;\n  }\n\n  /**\n   * Pauses playback.\n   */\n  pause() {\n    this.isPlaying = false;\n  }\n\n  /**\n   * Seeks to a specific time in the timeline.\n   * @param {number} time - The time to seek to, in milliseconds.\n   */\n  seek(time) {\n    if (time >= 0 && time <= this.duration) {\n      this.time = time;\n    }\n  }\n\n  /**\n   * @private\n   * Loads all registered plugins by calling their onLoad methods.\n   * This is called automatically before the first update cycle.\n   */\n  _loadPlugins() {\n    for (const plugin of this.pluginManager.plugins) {\n      try {\n        plugin.onLoad(this);\n      } catch (error) {\n        ErrorHandler.error(`Error loading plugin: ${plugin.name}`, error);\n      }\n    }\n  }\n}\n\nexport default Timeline;\n","/**\n * @class FrameRecorder\n * @description A class responsible for capturing and storing frames from a p5.js canvas.\n */\nclass FrameRecorder {\n  /**\n   * @param {HTMLCanvasElement} canvas - The p5.js canvas element to capture frames from.\n   */\n  constructor(canvas) {\n    if (!canvas || typeof canvas.toDataURL !== 'function') {\n      throw new Error('A valid canvas element must be provided to the FrameRecorder.');\n    }\n    this.canvas = canvas;\n    this.frames = [];\n  }\n\n  /**\n   * Starts a new recording session, clearing any previously captured frames.\n   */\n  start() {\n    this.frames = [];\n    console.log('Frame recording started.');\n  }\n\n  /**\n   * Captures the current content of the canvas and stores it as a WebP Data URL.\n   */\n  captureFrame() {\n    // Using 'image/webp' for a good balance of quality and file size.\n    // Quality is set to 0.8.\n    const frameDataUrl = this.canvas.toDataURL('image/webp', 0.8);\n    this.frames.push(frameDataUrl);\n  }\n\n  /**\n   * Stops the recording session. Currently a placeholder for future functionality.\n   */\n  stop() {\n    console.log(`Frame recording stopped. Total frames captured: ${this.frames.length}`);\n  }\n\n  /**\n   * Returns the array of captured frames.\n   * @returns {string[]} An array of base64 Data URLs representing the captured frames.\n   */\n  getFrames() {\n    return this.frames;\n  }\n}\n\nexport default FrameRecorder;\n","/**\n * @class Exporter\n * @description Manages the video export process by communicating with a Web Worker.\n */\nclass Exporter {\n  /**\n   * @param {object} [options={}] - Configuration options.\n   * @param {function} [options.onProgress] - Callback for progress updates.\n   * @param {function} [options.onLog] - Callback for log messages from FFmpeg.\n   * @param {function} [options.onError] - Callback for errors during the export process.\n   * @param {function} [options.onComplete] - Callback when the export is finished, receiving the video Blob.\n   */\n  constructor({ onProgress, onLog, onError, onComplete } = {}) {\n    this.worker = new Worker(new URL('./encoder.worker.js', import.meta.url), {\n      type: 'module',\n    });\n\n    this.onProgress = onProgress;\n    this.onLog = onLog;\n    this.onError = onError;\n    this.onComplete = onComplete;\n\n    this.worker.onmessage = this.handleWorkerMessage.bind(this);\n  }\n\n  /**\n   * Handles messages received from the encoding worker.\n   * @param {MessageEvent} event - The message event from the worker.\n   */\n  handleWorkerMessage({ data }) {\n    switch (data.type) {\n      case 'log':\n        if (this.onLog) this.onLog(data.data);\n        break;\n      case 'progress':\n        if (this.onProgress) this.onProgress(data.data);\n        break;\n      case 'error':\n        if (this.onError) this.onError(new Error(data.data));\n        break;\n      case 'done':\n        const videoBlob = new Blob([data.data.buffer], { type: 'video/mp4' });\n        if (this.onComplete) this.onComplete(videoBlob);\n        break;\n      default:\n        console.warn('Exporter received unknown message type from worker:', data.type);\n    }\n  }\n\n  /**\n   * Starts the export process by sending the captured frames to the worker.\n   * @param {string[]} frames - An array of frame Data URLs.\n   * @param {number} [frameRate=30] - The frame rate for the output video.\n   */\n  export(frames, frameRate = 30) {\n    if (!frames || frames.length === 0) {\n      const error = new Error('Cannot export without frames.');\n      if (this.onError) {\n        this.onError(error);\n      } else {\n        throw error;\n      }\n      return;\n    }\n\n    if (this.onLog) this.onLog('Sending frames to export worker...');\n    this.worker.postMessage({ frames, frameRate });\n  }\n\n  /**\n   * Terminates the worker. Useful for cleanup when the exporter is no longer needed.\n   */\n  terminate() {\n    this.worker.terminate();\n  }\n}\n\nexport default Exporter;\n","import FrameRecorder from './FrameRecorder.js';\nimport Exporter from '../export/Exporter.js';\n\n/**\n * @class PlaybackController\n * @description Provides a UI and logic to control timeline playback and trigger exports.\n */\nclass PlaybackController {\n  /**\n   * @constructor\n   * @param {Timeline} timeline - The timeline instance to control.\n   * @param {HTMLCanvasElement} canvas - The p5.js canvas element for recording.\n   * @param {HTMLElement} container - The HTML element to append the UI controls to.\n   */\n  constructor(timeline, canvas, container) {\n    this.timeline = timeline;\n    this.canvas = canvas;\n    this.container = container;\n\n    // Initialize the components needed for exporting\n    this.frameRecorder = new FrameRecorder(this.canvas);\n    this.exporter = new Exporter({\n      onProgress: this.handleExportProgress.bind(this),\n      onComplete: this.handleExportComplete.bind(this),\n      onError: this.handleExportError.bind(this),\n      onLog: (log) => console.log('Exporter Log:', log),\n    });\n\n    this._createUI();\n  }\n\n  /**\n   * Creates and appends the playback and export UI controls.\n   * @private\n   */\n  _createUI() {\n    if (!this.container) return;\n\n    const wrapper = document.createElement('div');\n    wrapper.style.padding = '10px';\n    wrapper.style.backgroundColor = '#f0f0f0';\n    wrapper.style.borderTop = '1.5px solid #ccc';\n\n    // --- Basic Play/Pause Button ---\n    this.playButton = document.createElement('button');\n    this.playButton.textContent = 'Play';\n    this.playButton.onclick = () => {\n      if (this.timeline.isPlaying) {\n        this.pause();\n        this.playButton.textContent = 'Play';\n      } else {\n        this.play();\n        this.playButton.textContent = 'Pause';\n      }\n    };\n    wrapper.appendChild(this.playButton);\n\n    // --- Export Button ---\n    this.exportButton = document.createElement('button');\n    this.exportButton.textContent = 'Ekspor Video';\n    this.exportButton.style.marginLeft = '10px';\n    this.exportButton.onclick = () => this.startExportProcess();\n    wrapper.appendChild(this.exportButton);\n\n    // --- Status Display ---\n    this.exportStatus = document.createElement('span');\n    this.exportStatus.style.marginLeft = '15px';\n    this.exportStatus.style.fontFamily = 'monospace';\n    this.exportStatus.style.display = 'none'; // Hidden by default\n    wrapper.appendChild(this.exportStatus);\n\n    this.container.appendChild(wrapper);\n  }\n\n  /**\n   * Starts the entire export workflow: rendering frames and then encoding them.\n   * @private\n   */\n  async startExportProcess() {\n    this.exportButton.disabled = true;\n    this.playButton.disabled = true;\n    this.exportStatus.style.display = 'inline';\n    this.exportStatus.textContent = 'Rendering frames...';\n\n    // Ensure playback is paused and reset to the start\n    this.pause();\n    this.seek(0);\n\n    this.frameRecorder.start();\n\n    const frameRate = this.timeline.frameRate || 30;\n    const frameDuration = 1000 / frameRate;\n    const totalDuration = this.timeline.duration;\n\n    // Use a short timeout to allow the UI to update before the heavy loop starts.\n    await new Promise(resolve => setTimeout(resolve, 50));\n\n    // --- Offline Rendering Loop ---\n    for (let time = 0; time <= totalDuration; time += frameDuration) {\n      this.timeline.seek(time); // Manually set the time\n      this.timeline.render();   // Manually trigger a render at that time\n      this.frameRecorder.captureFrame();\n    }\n\n    this.frameRecorder.stop();\n    this.exportStatus.textContent = 'Mengenkode video... (ini mungkin perlu waktu)';\n\n    // Hand off the captured frames to the exporter\n    this.exporter.export(this.frameRecorder.getFrames(), frameRate);\n  }\n\n  /**\n   * Handles progress updates from the exporter.\n   * @private\n   * @param {number} progress - The export progress percentage (0-100).\n   */\n  handleExportProgress(progress) {\n    this.exportStatus.textContent = `Mengenkode... ${progress}%`;\n  }\n\n  /**\n   * Handles the completion of the export process.\n   * @private\n   * @param {Blob} videoBlob - The resulting video file as a Blob.\n   */\n  handleExportComplete(videoBlob) {\n    this.exportStatus.textContent = 'Ekspor selesai! Memulai pengunduhan...';\n\n    // Create a temporary link to trigger the download\n    const url = URL.createObjectURL(videoBlob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'p5-video-export.mp4';\n    document.body.appendChild(a);\n    a.click();\n\n    // Clean up the temporary link and object URL\n    setTimeout(() => {\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      this._resetUIState();\n    }, 100);\n  }\n\n  /**\n   * Handles any errors that occur during the export process.\n   * @private\n   * @param {Error} error - The error object.\n   */\n  handleExportError(error) {\n    console.error('Export failed:', error);\n    this.exportStatus.textContent = `Error: ${error.message}`;\n    // Do not reset immediately, so the user can see the error.\n    // Consider adding a close button for the error message in a real app.\n    setTimeout(() => this._resetUIState(), 5000); // Reset after 5 seconds\n  }\n\n  /**\n   * Resets the UI controls to their default, interactive state.\n   * @private\n   */\n  _resetUIState() {\n    this.exportButton.disabled = false;\n    this.playButton.disabled = false;\n    this.exportStatus.style.display = 'none';\n    this.exportStatus.textContent = '';\n  }\n\n  /**\n   * @method play\n   * @description Starts or resumes playback of the timeline.\n   */\n  play() {\n    this.timeline.play();\n  }\n\n  /**\n   * @method pause\n   * @description Pauses playback of the timeline.\n   */\n  pause() {\n    this.timeline.pause();\n  }\n\n  /**\n   * @method seek\n   * @description Jumps to a specific time on the timeline.\n   * @param {number} time - The time to seek to, in milliseconds.\n   */\n  seek(time) {\n    this.timeline.seek(time);\n  }\n}\n\nexport default PlaybackController;\n","/**\n * @class PerformanceManager\n * @description Monitors application performance, primarily frame rate.\n */\nclass PerformanceManager {\n  /**\n   * @constructor\n   * @param {object} options - Configuration options.\n   * @param {number} [options.frameRateThreshold=45] - The frame rate below which a warning is logged.\n   */\n  constructor({ frameRateThreshold = 45 } = {}) {\n    this.frameRateThreshold = frameRateThreshold;\n    this.enabled = true;\n  }\n\n  /**\n   * @method monitor\n   * @description Checks the current frame rate and logs a warning if it's below the threshold.\n   * @param {object} p5 - The p5.js instance.\n   */\n  monitor(p5) {\n    if (!this.enabled || !p5) {\n      return;\n    }\n\n    const currentFrameRate = p5.frameRate();\n    if (currentFrameRate < this.frameRateThreshold) {\n      console.warn(\n        `PerformanceWarning: Frame rate is ${currentFrameRate.toFixed(2)} FPS, which is below the threshold of ${this.frameRateThreshold} FPS.`\n      );\n    }\n  }\n\n  /**\n   * @method enable\n   * @description Enables the performance monitor.\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * @method disable\n   * @description Disables the performance monitor.\n   */\n  disable() {\n    this.enabled = false;\n  }\n}\n\nexport default PerformanceManager;\n","/**\n * @class MemoryManager\n * @description Manages memory by caching assets and providing methods to clear unused ones.\n */\nclass MemoryManager {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.cache = new Map();\n    this.enabled = true;\n  }\n\n  /**\n   * @method addAsset\n   * @description Adds an asset to the cache.\n   * @param {string} key - The unique key for the asset (e.g., image URL or asset ID).\n   * @param {*} asset - The asset to be cached.\n   */\n  addAsset(key, asset) {\n    if (!this.enabled) return;\n    this.cache.set(key, asset);\n    console.log(`Asset added to cache: ${key}`);\n  }\n\n  /**\n   * @method getAsset\n   * @description Retrieves an asset from the cache.\n   * @param {string} key - The key of the asset to retrieve.\n   * @returns {*} The cached asset, or undefined if the key does not exist.\n   */\n  getAsset(key) {\n    return this.cache.get(key);\n  }\n\n  /**\n   * @method clearUnusedAssets\n   * @description Removes assets from the cache that are not present in the provided list of active asset keys.\n   * @param {string[]} activeAssetKeys - An array of keys for assets that are currently active or required.\n   */\n  clearUnusedAssets(activeAssetKeys) {\n    if (!this.enabled) return;\n    const activeKeysSet = new Set(activeAssetKeys);\n    let clearedCount = 0;\n    for (const key of this.cache.keys()) {\n      if (!activeKeysSet.has(key)) {\n        this.cache.delete(key);\n        clearedCount++;\n      }\n    }\n    if (clearedCount > 0) {\n      console.log(`Cleared ${clearedCount} unused assets from cache.`);\n    }\n  }\n\n  /**\n   * @method clearAll\n   * @description Clears the entire asset cache unconditionally.\n   */\n  clearAll() {\n    this.cache.clear();\n    console.log(\"Cleared all assets from cache.\");\n  }\n\n  /**\n   * @method enable\n   * @description Enables the memory manager.\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * @method disable\n   * @description Disables the memory manager. Caching and clearing will be skipped.\n   */\n  disable() {\n    this.enabled = false;\n  }\n}\n\nexport default MemoryManager;\n","class Keyframe {\n  /**\n   * @param {number} time - The time in milliseconds, relative to the clip's start.\n   * @param {*} value - The value of the property at this keyframe.\n   * @param {string} [easing='linear'] - The easing function to use from this keyframe to the next.\n   */\n  constructor(time, value, easing = 'linear') {\n    this.time = time;\n    this.value = value;\n    this.easing = easing;\n  }\n}\n\nexport default Keyframe;\n","/**\n * @namespace Easing\n * @description A collection of easing functions for controlling animation speed.\n * These functions take a single argument `t` (time) which is a value between 0 and 1,\n * and return a new value, also between 0 and 1.\n * Based on the work of Grégoire Divaret-Chauveau.\n * @see {@link https://gist.github.com/gre/1650294}\n */\nconst Easing = {\n  /**\n   * No easing, no acceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  linear: t => t,\n  /**\n   * Accelerating from zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInQuad: t => t*t,\n  /**\n   * Decelerating to zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeOutQuad: t => t*(2-t),\n  /**\n   * Acceleration until halfway, then deceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInOutQuad: t => t<.5 ? 2*t*t : -1+(4-2*t)*t,\n  /**\n   * Accelerating from zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInCubic: t => t*t*t,\n  /**\n   * Decelerating to zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeOutCubic: t => (--t)*t*t+1,\n  /**\n   * Acceleration until halfway, then deceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInOutCubic: t => t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1,\n};\n\nexport default Easing;\n","import Keyframe from '../core/Keyframe.js';\nimport Easing from '../utils/Easing.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\n/**\n * @class ClipBase\n * @description The fundamental building block for all media types on the timeline.\n * It manages common properties like timing, position, rotation, scale, and opacity,\n * as well as the keyframe and effects systems. This class is not intended to be used\n * directly but rather to be extended by specific clip types (e.g., TextClip, ImageClip).\n */\nclass ClipBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - The configuration object for the clip.\n   * @param {number} [options.start=0] - The start time of the clip on the timeline, in milliseconds.\n   * @param {number} [options.duration=1000] - The duration of the clip, in milliseconds.\n   * @param {number} [options.layer=0] - The layer order for rendering. Higher numbers are rendered on top.\n   * @param {string|null} [options.assetKey=null] - A key to identify the asset associated with this clip, used for memory management.\n   * @param {object} [options.properties={}] - Initial values for animatable properties (e.g., x, y, rotation, scale, opacity).\n   */\n  constructor({ start = 0, duration = 1000, layer = 0, assetKey = null, ...options } = {}) {\n    this.start = start;\n    this.duration = duration;\n    this.layer = layer;\n    this.assetKey = assetKey;\n    this.timeline = null;\n\n    this.properties = {\n      x: 0,\n      y: 0,\n      rotation: 0,\n      scale: 1,\n      opacity: 1,\n      ...(options.properties || {}),\n    };\n\n    this.initialProperties = JSON.parse(JSON.stringify(this.properties));\n    this.keyframes = {};\n    this.effects = [];\n  }\n\n  /**\n   * Adds a keyframe for a specific property.\n   * @param {string} property - The name of the property to animate (e.g., 'x', 'opacity').\n   * @param {number} time - The time for this keyframe, relative to the clip's start time, in milliseconds.\n   * @param {*} value - The value of the property at this keyframe.\n   * @param {string} [easing='linear'] - The easing function to use for the transition from the previous keyframe.\n   * @throws {Error} If the specified property is not a recognized animatable property of the clip.\n   */\n  addKeyframe(property, time, value, easing = 'linear') {\n    if (!Object.prototype.hasOwnProperty.call(this.properties, property)) {\n      throw new Error(`Property \"${property}\" is not a recognized or animatable property of this clip.`);\n    }\n\n    if (!this.keyframes[property]) {\n      this.keyframes[property] = [];\n    }\n    this.keyframes[property].push(new Keyframe(time, value, easing));\n\n    if (this.timeline && this.timeline.isBatching) {\n      this.timeline.dirtyClips.add(this);\n    } else {\n      this.keyframes[property].sort((a, b) => a.time - b.time);\n    }\n  }\n\n  /**\n   * Adds an effect to the clip using a factory pattern based on the effect type.\n   * @param {object} options - The configuration for the effect.\n   * @param {string} options.type - The type of effect to add (e.g., 'fadeIn', 'wiggle').\n   * @returns {ClipBase} The current clip instance for chaining.\n   */\n  addEffect(options = {}) {\n    const { type } = options;\n\n    if (!this.timeline) {\n      ErrorHandler.error('Cannot add an effect to a clip that is not on a timeline.');\n      return this;\n    }\n\n    const EffectClass = this.timeline.effectTypes.get(type);\n    if (EffectClass) {\n      const effect = new EffectClass(options);\n      this.effects.push(effect);\n    } else {\n      ErrorHandler.warn(`Effect with type \"${type}\" not found.`);\n    }\n\n    return this; // Allow chaining\n  }\n\n  /**\n   * Sorts the keyframes for all properties. This is called by the timeline after\n   * a batch update operation to ensure keyframes are in the correct chronological order.\n   */\n  finalizeChanges() {\n    for (const prop in this.keyframes) {\n      if (Object.prototype.hasOwnProperty.call(this.keyframes, prop)) {\n        this.keyframes[prop].sort((a, b) => a.time - b.time);\n      }\n    }\n  }\n\n  /**\n   * Updates the clip's properties based on the current time.\n   * This involves resetting properties, calculating values from keyframes, and applying effects.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    Object.assign(this.properties, this.initialProperties);\n\n    for (const prop in this.keyframes) {\n      if (Object.prototype.hasOwnProperty.call(this.keyframes, prop)) {\n        this.properties[prop] = this._calculateValue(p, prop, relativeTime);\n      }\n    }\n\n    // The responsibility of applying effects has been moved to the RenderEngine.\n  }\n\n  /**\n   * Calculates the interpolated value for a property at a given time.\n   * @private\n   * @param {p5} p - The p5.js instance.\n   * @param {string} prop - The name of the property to calculate.\n   * @param {number} time - The current time within the clip's duration.\n   * @returns {*} The interpolated value of the property.\n   */\n  _calculateValue(p, prop, time) {\n    const kfs = this.keyframes[prop];\n    if (!kfs || kfs.length === 0) {\n      return this.initialProperties[prop];\n    }\n\n    if (time <= kfs[0].time) {\n      return kfs[0].value;\n    }\n    if (time >= kfs[kfs.length - 1].time) {\n      return kfs[kfs.length - 1].value;\n    }\n\n    let low = 0;\n    let high = kfs.length - 1;\n    let prevKeyframeIndex = 0;\n\n    while (low <= high) {\n      const mid = Math.floor((low + high) / 2);\n      if (kfs[mid].time < time) {\n        prevKeyframeIndex = mid;\n        low = mid + 1;\n      } else if (kfs[mid].time > time) {\n        high = mid - 1;\n      } else {\n        return kfs[mid].value;\n      }\n    }\n\n    const prevKeyframe = kfs[prevKeyframeIndex];\n    const nextKeyframe = kfs[prevKeyframeIndex + 1];\n\n    const t = (time - prevKeyframe.time) / (nextKeyframe.time - prevKeyframe.time);\n    const easingFunction = Easing[prevKeyframe.easing] || Easing.linear;\n    const easedT = easingFunction(t);\n\n    const from = prevKeyframe.value;\n    const to = nextKeyframe.value;\n\n    // Check if the values are p5.Color objects for color interpolation\n    if (p.Color && from instanceof p.Color && to instanceof p.Color) {\n      return p.lerpColor(from, to, easedT);\n    }\n\n    // Default to linear interpolation for numbers\n    return p.lerp(from, to, easedT);\n  }\n\n  /**\n   * Renders the clip's base transformations (translation, rotation, scale).\n   * Subclasses are responsible for the actual drawing of content (e.g., text, image).\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    p.push();\n    p.translate(this.properties.x, this.properties.y);\n    p.rotate(this.properties.rotation);\n    p.scale(this.properties.scale);\n  }\n}\n\nexport default ClipBase;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class TextClip\n * @extends ClipBase\n * @description A clip for rendering and animating text on the canvas.\n *\n * @param {string} text - The text content to display.\n * @param {object} [options={}] - Configuration options for the text clip. Inherits options from ClipBase.\n * @param {number} [options.fontSize=24] - The font size of the text.\n * @param {p5.Color|string} [options.fill='#ffffff'] - The fill color of the text.\n * @param {string} [options.align='center'] - The horizontal alignment of the text ('left', 'center', 'right').\n *\n * @example\n * let textClip = editor.createTextClip(\"Hello, p5.js!\", {\n *   start: 0,\n *   duration: 5000,\n *   properties: { x: 200, y: 200, fontSize: 32, fill: 'yellow' }\n * });\n * textClip.addKeyframe('opacity', 0, 0);\n * textClip.addKeyframe('opacity', 1000, 1);\n */\nclass TextClip extends ClipBase {\n  constructor(text, options = {}) {\n    super(options);\n    this.text = text;\n    this.properties.fontSize = options.fontSize || 24;\n    this.properties.fill = options.fill || '#ffffff';\n    this.properties.align = options.align || 'center';\n  }\n\n  /**\n   * Renders the text to the canvas with its current properties and transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    p.fill(this.properties.fill); // TODO: Handle opacity\n    p.textSize(this.properties.fontSize);\n    p.textAlign(this.properties.align, p.CENTER);\n    p.text(this.text, 0, 0);\n\n    p.pop();\n  }\n}\n\nexport default TextClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class ShapeClip\n * @extends ClipBase\n * @description A clip for drawing and animating basic p5.js shapes like rectangles and ellipses.\n *\n * @param {string} [shapeType='rect'] - The type of shape to draw ('rect' or 'ellipse').\n * @param {object} [options={}] - Configuration options for the shape clip. Inherits options from ClipBase.\n * @param {number} [options.width=100] - The width of the shape.\n * @param {number} [options.height=100] - The height of the shape.\n * @param {p5.Color|string} [options.fill='#ffffff'] - The fill color of the shape.\n * @param {p5.Color|string} [options.stroke='#000000'] - The stroke color of the shape.\n * @param {number} [options.strokeWeight=1] - The stroke weight of the shape.\n *\n * @example\n * let rectClip = editor.createShapeClip('rect', {\n *   start: 0,\n *   duration: 3000,\n *   properties: { width: 50, height: 50, fill: 'red' }\n * });\n * rectClip.addKeyframe('rotation', 0, 0);\n * rectClip.addKeyframe('rotation', 3000, Math.PI * 2);\n */\nclass ShapeClip extends ClipBase {\n  constructor(shapeType = 'rect', options = {}) {\n    super({\n      ...options,\n      properties: {\n        width: 100,\n        height: 100,\n        fill: '#ffffff',\n        stroke: '#000000',\n        strokeWeight: 1,\n        ...(options.properties || {}),\n      },\n    });\n    this.shapeType = shapeType;\n  }\n\n  /**\n   * Renders the shape to the canvas with its current properties and transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    p.fill(this.properties.fill); // TODO: Handle opacity\n    p.stroke(this.properties.stroke);\n    p.strokeWeight(this.properties.strokeWeight);\n\n    if (this.shapeType === 'rect') {\n      p.rectMode(p.CENTER);\n      p.rect(0, 0, this.properties.width, this.properties.height);\n    } else if (this.shapeType === 'ellipse') {\n      p.ellipseMode(p.CENTER);\n      p.ellipse(0, 0, this.properties.width, this.properties.height);\n    }\n\n    p.pop();\n  }\n}\n\nexport default ShapeClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class ImageClip\n * @extends ClipBase\n * @description A clip for displaying and animating an image on the canvas.\n *\n * @param {p5.Image|string} image - The p5.Image object or a URL to the image file.\n * If a URL is provided, it will be used as the `assetKey` for caching unless one is explicitly provided in the options.\n * @param {object} [options={}] - Configuration options for the image clip. Inherits options from ClipBase.\n *\n * @example\n * // Assuming 'logo.png' is preloaded\n * let imageClip = editor.createImageClip(logo, { start: 1000, duration: 4000 });\n * imageClip.addKeyframe('scale', 0, 0.5);\n * imageClip.addKeyframe('scale', 1000, 1);\n */\nclass ImageClip extends ClipBase {\n  constructor(image, options = {}) {\n    if (typeof image === 'string' && !options.assetKey) {\n      options.assetKey = image;\n    }\n    super({\n      ...options,\n      properties: {\n        width: image ? image.width : 0,\n        height: image ? image.height : 0,\n        ...(options.properties || {}),\n      },\n    });\n    this.image = image;\n  }\n\n  /**\n   * Renders the image to the canvas with its current transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    if (this.image) {\n      // TODO: Handle opacity with p.tint()\n      p.imageMode(p.CENTER);\n      p.image(this.image, 0, 0, this.properties.width, this.properties.height);\n    }\n\n    p.pop();\n  }\n}\n\nexport default ImageClip;\n","import ClipBase from './ClipBase.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\n/**\n * @class AudioClip\n * @extends ClipBase\n * @description A clip for managing and playing audio on the timeline. It handles\n * playback synchronization and allows for keyframing audio properties like volume and pan.\n *\n * @param {p5.SoundFile|string} soundFile - The p5.SoundFile object or a URL to the audio file.\n * If a URL is provided, it will be used as the `assetKey` for caching unless one is explicitly provided in the options.\n * @param {object} [options={}] - Configuration options for the audio clip. Inherits options from ClipBase.\n *\n * @example\n * // Assuming 'mySound.mp3' is preloaded\n * let audioClip = editor.createAudioClip(mySound, { start: 2000, duration: 5000 });\n * audioClip.addKeyframe('volume', 0, 0); // Start silent\n * audioClip.addKeyframe('volume', 1000, 1); // Fade in\n * audioClip.addKeyframe('volume', 4000, 1); // Hold volume\n * audioClip.addKeyframe('volume', 5000, 0); // Fade out\n */\nclass AudioClip extends ClipBase {\n  constructor(soundFile, options = {}) {\n    if (typeof soundFile === 'string' && !options.assetKey) {\n      options.assetKey = soundFile;\n    }\n\n    const defaultAudioProps = {\n      volume: 1,\n      pan: 0,\n    };\n\n    super({\n      ...options,\n      properties: { ...defaultAudioProps, ...(options.properties || {}) },\n    });\n\n    this.soundFile = soundFile;\n    this._isPlaying = false;\n  }\n\n  /**\n   * Updates the audio playback state and properties based on the timeline's current position.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    super.update(p, relativeTime);\n\n    if (!this.soundFile || typeof this.soundFile.play !== 'function') {\n      return;\n    }\n\n    this.soundFile.setVolume(this.properties.volume);\n    this.soundFile.pan(this.properties.pan);\n\n    const isWithinClipBounds = relativeTime >= 0 && relativeTime < this.duration;\n\n    if (isWithinClipBounds && !this._isPlaying) {\n      const startTimeInSound = relativeTime / 1000;\n      if (startTimeInSound < this.soundFile.duration()) {\n        this.soundFile.play();\n        this.soundFile.jump(startTimeInSound);\n        this._isPlaying = true;\n      }\n    } else if (!isWithinClipBounds && this._isPlaying) {\n      this.soundFile.stop();\n      this._isPlaying = false;\n    }\n  }\n\n  /**\n   * Audio clips do not have a visual representation, so this method is a no-op.\n   * It exists to fulfill the ClipBase interface.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    // Audio clips are not rendered visually.\n  }\n}\n\nexport default AudioClip;\n","import ClipBase from './ClipBase.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'blob:', 'data:'];\n\n/**\n * Represents a video clip that can be placed on the timeline.\n * Manages the playback and synchronization of an HTML5 video element.\n */\nclass VideoClip extends ClipBase {\n  /**\n   * @param {string} videoSrc - The source URL of the video.\n   * @param {object} options - The options for the clip, passed to ClipBase.\n   */\n  constructor(videoSrc, options = {}) {\n    super(options);\n\n    // Explicitly block javascript: URLs before attempting to parse.\n    if (typeof videoSrc === 'string' && videoSrc.trim().toLowerCase().startsWith('javascript:')) {\n      ErrorHandler.critical(`Unsafe video protocol: javascript:. Only safe protocols are allowed.`);\n    }\n\n    try {\n      const url = new URL(videoSrc, document.baseURI);\n      if (!ALLOWED_PROTOCOLS.includes(url.protocol)) {\n        ErrorHandler.critical(`Unsafe video protocol: ${url.protocol}. Only safe protocols are allowed.`);\n      }\n    } catch (e) {\n      ErrorHandler.critical(`Invalid video source URL: ${videoSrc}`, e);\n    }\n    \n    this.videoSrc = videoSrc;\n    this.isPlaying = false;\n\n    // Add width and height to the animatable properties, with defaults.\n    this.properties.width = options.width || 1920; // Default to common video width\n    this.properties.height = options.height || 1080; // Default to common video height\n\n    // Create the HTML5 video element\n    this.videoElement = document.createElement('video');\n    this.videoElement.src = this.videoSrc;\n    this.videoElement.preload = 'auto';\n    this.videoElement.muted = true; // Essential for browser autoplay policies\n    this.videoElement.playsInline = true; // Essential for mobile playback\n  }\n\n  /**\n   * Updates the video's state based on the timeline's current time.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    super.update(p, relativeTime);\n\n    // Synchronize video time with timeline time.\n    // We convert relativeTime from ms to seconds for the video element.\n    const targetTime = relativeTime / 1000;\n    \n    // Add a small tolerance to prevent stuttering from minor seeks during normal playback.\n    const timeDifference = Math.abs(this.videoElement.currentTime - targetTime);\n\n    // Only seek if the difference is significant (e.g., > 50ms) or if the video is paused.\n    // This handles both timeline scrubbing and initial play commands.\n    if (timeDifference > 0.05 || this.videoElement.paused) {\n      this.videoElement.currentTime = targetTime;\n    }\n\n    // Determine if the clip should be considered active based on its time.\n    const isActive = relativeTime >= 0 && relativeTime < this.duration;\n\n    // Play or pause the video based on the active state\n    if (isActive && !this.isPlaying) {\n      // Using a flag `isPlaying` prevents calling play() on every frame.\n      const playPromise = this.videoElement.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(error => {\n          // Autoplay was prevented. For now, we silently ignore,\n          // but a future implementation could use the ErrorHandler.\n          // ErrorHandler.warning(`Video for ${this.videoSrc} failed to play: ${error.message}`);\n        });\n      }\n      this.isPlaying = true;\n    } else if (!isActive && this.isPlaying) {\n      this.videoElement.pause();\n      this.isPlaying = false;\n    }\n  }\n\n  /**\n   * Renders the video frame to the p5.js canvas if the clip is active.\n   * This method is called by the timeline's render loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    // Let the base class handle transformations (translation, rotation, scale)\n    super.render(p, relativeTime);\n\n    // HAVE_FUTURE_DATA (3) or HAVE_ENOUGH_DATA (4) are good states to check for readiness.\n    if (this.videoElement.readyState >= 3) {\n      p.imageMode(p.CENTER);\n      p.image(\n        this.videoElement,\n        0, // x position is handled by super.render() translate\n        0, // y position is handled by super.render() translate\n        this.properties.width,\n        this.properties.height\n      );\n    }\n\n    // Restore the drawing context\n    p.pop();\n  }\n}\n\nexport default VideoClip;\n","/**\n * @class EffectBase\n * @description The abstract base class for all visual effects.\n * It defines the standard interface that all effects must implement.\n */\nclass EffectBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - Configuration options for the effect.\n   * @param {number} [options.start=0] - The start time of the effect, relative to the clip's start, in milliseconds.\n   * @param {number} [options.duration=1000] - The duration of the effect in milliseconds.\n   */\n  constructor({ start = 0, duration = 1000 } = {}) {\n    this.start = start;\n    this.duration = duration;\n  }\n\n  /**\n   * Abstract method to apply the effect.\n   * This method must be implemented by any class that extends EffectBase.\n   * @param {ClipBase} clip - The clip to which the effect is being applied.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  apply(clip, p, relativeTime) {\n    throw new Error('The \"apply()\" method must be implemented by a subclass.');\n  }\n}\n\nexport default EffectBase;\n","import Timeline from './core/Timeline.js';\nimport PlaybackController from './core/PlaybackController.js';\nimport PerformanceManager from './core/PerformanceManager.js';\nimport ErrorHandler from './utils/ErrorHandler.js';\nimport MemoryManager from './utils/MemoryManager.js';\nimport ClipBase from './clips/ClipBase.js';\nimport TextClip from './clips/TextClip.js';\nimport ShapeClip from './clips/ShapeClip.js';\nimport ImageClip from './clips/ImageClip.js';\nimport AudioClip from './clips/AudioClip.js';\nimport VideoClip from './clips/VideoClip.js';\nimport EffectBase from './effects/EffectBase.js';\n\n/**\n * @class VideoEditor\n * @description The main entry point for users of the p5.videoeditor.js library.\n * It encapsulates the core components like the timeline, playback controls,\n * and managers into a simplified and easy-to-use API.\n *\n * @example\n * let editor = new VideoEditor();\n * let myFont;\n *\n * function preload() {\n *   myFont = loadFont('assets/font.otf');\n * }\n *\n * function setup() {\n *   createCanvas(1280, 720);\n *   editor.createVideoClip('assets/background.mp4', { start: 0, duration: 10 });\n *   const title = editor.createTextClip(\"Hello World\", { start: 1, duration: 5 });\n *   title.addKeyframe('x', 0, 100);\n *   title.addKeyframe('x', 5000, 500);\n * }\n *\n * // The draw loop needs to be async if using shaders, but it's good practice\n * // to make it async anyway to handle any future async rendering tasks.\n * async function draw() {\n *   background(0);\n *   editor.update(p5.instance);\n *   await editor.render(p5.instance);\n * }\n */\nclass VideoEditor {\n  /**\n   * @static\n   * @property {ErrorHandler} ErrorHandler - Exposes the static ErrorHandler class for advanced use cases,\n   * such as configuring global error handling strategies.\n   */\n  static ErrorHandler = ErrorHandler;\n\n  /**\n   * @constructor\n   * @param {object} [options={}] - Configuration options for the editor.\n   * @param {p5} p - The p5.js instance. Required for rendering.\n   * @param {object} [options.performance] - Performance-related settings passed to the PerformanceManager.\n   * @param {HTMLCanvasElement} [options.canvas=null] - The p5.js canvas element. Required for exporting.\n   * @param {HTMLElement} [options.uiContainer=null] - The container to append the UI controls to.\n   */\n  constructor(p, { canvas = null, uiContainer = null, ...options } = {}) {\n    if (!p) {\n      throw new Error('A p5.js instance must be provided to the VideoEditor constructor.');\n    }\n    this.timeline = new Timeline(p, canvas, options);\n    this.playbackController = new PlaybackController(this.timeline, canvas, uiContainer);\n    this.performanceManager = new PerformanceManager(options.performance);\n    this.memoryManager = new MemoryManager();\n\n    this.play = this.playbackController.play.bind(this.playbackController);\n    this.pause = this.playbackController.pause.bind(this.playbackController);\n    this.seek = this.playbackController.seek.bind(this.playbackController);\n  }\n\n  /**\n   * Creates a video clip and adds it to the timeline.\n   * @param {string} videoSrc - The source URL of the video file.\n   * @param {object} [options={}] - Configuration options for the VideoClip.\n   * @returns {VideoClip} The newly created VideoClip instance.\n   */\n  createVideoClip(videoSrc, options = {}) {\n    const clip = new VideoClip(videoSrc, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a text clip and adds it to the timeline.\n   * @param {string} text - The text content of the clip.\n   * @param {object} [options={}] - Configuration options for the TextClip.\n   * @returns {TextClip} The newly created TextClip instance.\n   */\n  createTextClip(text, options = {}) {\n    const clip = new TextClip(text, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a shape clip and adds it to the timeline.\n   * @param {string} shapeType - The type of shape to create (e.g., 'rect', 'circle').\n   * @param {object} [options={}] - Configuration options for the ShapeClip.\n   * @returns {ShapeClip} The newly created ShapeClip instance.\n   */\n  createShapeClip(shapeType, options = {}) {\n    const clip = new ShapeClip(shapeType, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates an image clip and adds it to the timeline.\n   * @param {p5.Image|string} image - The p5.Image object or a URL to the image.\n   * @param {object} [options={}] - Configuration options for the ImageClip.\n   * @returns {ImageClip} The newly created ImageClip instance.\n   */\n  createImageClip(image, options = {}) {\n    const clip = new ImageClip(image, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates an audio clip and adds it to the timeline.\n   * @param {p5.SoundFile|string} soundFile - The p5.SoundFile object or a URL to the audio file.\n   * @param {object} [options={}] - Configuration options for the AudioClip.\n   * @returns {AudioClip} The newly created AudioClip instance.\n   */\n  createAudioClip(soundFile, options = {}) {\n    const clip = new AudioClip(soundFile, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Caches an asset manually in the MemoryManager. This is useful for preloading\n   * assets before they are needed to ensure smooth playback.\n   * @param {string} key - The unique key to store the asset under. This key is often the asset's URL or a custom identifier.\n   * @param {*} asset - The asset to cache (e.g., p5.Image, p5.SoundFile).\n   */\n  cacheAsset(key, asset) {\n    this.memoryManager.addAsset(key, asset);\n  }\n\n  /**\n   * Updates the state of the timeline and all active clips. This method should be\n   * called in the `draw` loop of your p5.js sketch.\n   * @param {p5} p - The p5.js instance, used to access timing variables like deltaTime.\n   */\n  update(p) {\n    this.performanceManager.monitor(p);\n    this.timeline.update(p);\n\n    const activeAssetKeys = this.timeline.getActiveClips()\n      .map(clip => clip.assetKey)\n      .filter(key => key);\n    this.memoryManager.clearUnusedAssets(activeAssetKeys);\n  }\n\n  /**\n   * Renders the current state of the timeline to the canvas. This method should be\n   * called in the `draw` loop of your p5.js sketch, after `update`.\n   * @param {p5} p - The p5.js instance, used for drawing operations.\n   */\n  async render(p) {\n    await this.timeline.render(p);\n  }\n\n  /**\n   * Displays a user-friendly error message. In a future implementation, this could\n   * render an overlay on the canvas for better visibility.\n   * @param {Error} error - The error object to display.\n   */\n  showUserFriendlyError(error) {\n    ErrorHandler.showUserFriendlyError(error);\n  }\n}\n\n// Export all the public classes for advanced usage\nexport {\n  VideoEditor,\n  Timeline,\n  PlaybackController,\n  PerformanceManager,\n  MemoryManager,\n  ErrorHandler,\n  ClipBase,\n  TextClip,\n  ShapeClip,\n  ImageClip,\n  AudioClip,\n  VideoClip,\n  EffectBase,\n};\n"],"names":["PluginManager","constructor","this","plugins","register","plugin","name","trim","type","onLoad","some","p","console","warn","push","RenderEngine","canvas","width","height","sceneBuffer","createGraphics","WEBGL","effectBuffer","shaders","shaderPromises","postProcessingEffects","loadShader","key","fragUrl","promise","shader","log","render","clipsToRender","activeTransitions","time","clear","clipsInTransition","Set","transition","add","fromClip","toClip","standaloneClips","filter","clip","has","sort","a","b","layer","relativeTime","start","effect","effects","apply","pop","sourceBuffer","length","setUniform","uniforms","value","Object","entries","rect","image","ErrorHandler","critical","message","originalError","error","Error","warning","showUserFriendlyError","Timeline","frameRate","duration","clips","transitions","isPlaying","isBatching","dirtyClips","needsClipSorting","renderEngine","pluginManager","transitionTypes","Map","effectTypes","_pluginsLoaded","use","addClip","timeline","registerTransitionType","transitionClass","set","registerEffectType","effectClass","addTransition","options","TransitionClass","get","batch","callback","finalizeBatch","forEach","finalizeChanges","getActiveClips","update","_loadPlugins","deltaTime","clipsToUpdate","play","pause","seek","FrameRecorder","toDataURL","frames","captureFrame","frameDataUrl","stop","getFrames","Exporter","onProgress","onLog","onError","onComplete","worker","Worker","URL","document","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","src","baseURI","onmessage","handleWorkerMessage","bind","data","videoBlob","Blob","buffer","postMessage","terminate","PlaybackController","container","frameRecorder","exporter","handleExportProgress","handleExportComplete","handleExportError","_createUI","wrapper","createElement","style","padding","backgroundColor","borderTop","playButton","textContent","onclick","appendChild","exportButton","marginLeft","startExportProcess","exportStatus","fontFamily","display","disabled","frameDuration","totalDuration","Promise","resolve","setTimeout","export","progress","url","createObjectURL","download","body","click","removeChild","revokeObjectURL","_resetUIState","PerformanceManager","frameRateThreshold","enabled","monitor","p5","currentFrameRate","toFixed","enable","disable","MemoryManager","cache","addAsset","asset","getAsset","clearUnusedAssets","activeAssetKeys","activeKeysSet","clearedCount","keys","delete","clearAll","Keyframe","easing","Easing","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","ClipBase","assetKey","properties","x","y","rotation","scale","opacity","initialProperties","JSON","parse","stringify","keyframes","addKeyframe","property","prototype","hasOwnProperty","call","addEffect","EffectClass","prop","assign","_calculateValue","kfs","low","high","prevKeyframeIndex","mid","Math","floor","prevKeyframe","nextKeyframe","easedT","from","to","Color","lerpColor","lerp","translate","rotate","TextClip","text","super","fontSize","fill","align","textSize","textAlign","CENTER","ShapeClip","shapeType","stroke","strokeWeight","rectMode","ellipseMode","ellipse","ImageClip","imageMode","AudioClip","soundFile","volume","pan","_isPlaying","setVolume","isWithinClipBounds","startTimeInSound","jump","ALLOWED_PROTOCOLS","VideoClip","videoSrc","toLowerCase","startsWith","includes","protocol","e","videoElement","preload","muted","playsInline","targetTime","abs","currentTime","paused","isActive","playPromise","undefined","catch","readyState","static","uiContainer","playbackController","performanceManager","performance","memoryManager","createVideoClip","createTextClip","createShapeClip","createImageClip","createAudioClip","cacheAsset","map"],"mappings":"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"}