{"version":3,"file":"p5.videoeditor.min.js","sources":["../src/core/PluginManager.js","../src/core/RenderEngine.js","../src/utils/ErrorHandler.js","../src/effects/EffectBase.js","../src/effects/GPUEffectBase.js","../src/effects/BlurEffect.js","../src/plugins/BlurEffectPlugin.js","../src/transitions/TransitionBase.js","../src/plugins/CrossFadeTransitionPlugin.js","../src/plugins/FadeInEffectPlugin.js","../src/plugins/FadeOutEffectPlugin.js","../src/plugins/WiggleEffectPlugin.js","../src/plugins/index.js","../src/core/Timeline.js","../src/core/FrameRecorder.js","../src/export/Exporter.js","../src/core/PlaybackController.js","../src/core/PerformanceManager.js","../src/utils/MemoryManager.js","../src/core/Keyframe.js","../src/utils/Easing.js","../src/utils/ObjectUtils.js","../src/clips/ClipBase.js","../src/clips/TextClip.js","../src/clips/ShapeClip.js","../src/clips/ImageClip.js","../src/clips/AudioClip.js","../src/clips/VideoClip.js","../src/clips/SlideShowClip.js","../src/ui/TimelineUI.js","../src/p5.videoeditor.js"],"sourcesContent":["/**\n * @class PluginManager\n * @description Manages the registration and validation of all plugins.\n */\nexport class PluginManager {\n  constructor() {\n    /**\n     * @type {Array<object>}\n     */\n    this.plugins = [];\n  }\n\n  /**\n   * @method register\n   * @description Registers and validates a plugin.\n   * @param {object} plugin - The plugin object to register.\n   * @property {string} plugin.name - The name of the plugin.\n   * @property {string} plugin.type - The type of the plugin (e.g., 'effect', 'transition').\n   * @property {function} plugin.onLoad - The function to be called when the plugin is loaded.\n   */\n  register(plugin) {\n    if (!plugin) {\n      console.warn('Invalid plugin: Plugin object is null or undefined.');\n      return;\n    }\n\n    if (typeof plugin.name !== 'string' || plugin.name.trim() === '') {\n      console.warn(\n        'Invalid plugin: \"name\" must be a non-empty string.',\n        plugin\n      );\n      return;\n    }\n\n    if (typeof plugin.type !== 'string' || plugin.type.trim() === '') {\n      console.warn(\n        'Invalid plugin: \"type\" must be a non-empty string.',\n        plugin\n      );\n      return;\n    }\n\n    if (typeof plugin.onLoad !== 'function') {\n      console.warn('Invalid plugin: \"onLoad\" must be a function.', plugin);\n      return;\n    }\n\n    if (this.plugins.some((p) => p.name === plugin.name)) {\n      console.warn(`Plugin with name \"${plugin.name}\" is already registered.`);\n      return;\n    }\n\n    this.plugins.push(plugin);\n  }\n}\n","/**\n * @class RenderEngine\n * @description Handles all WebGL-based drawing operations.\n * Manages a multi-pass rendering pipeline for applying post-processing effects.\n */\nclass RenderEngine {\n  /**\n   * @constructor\n   * @param {p5} p - The p5.js instance used for drawing.\n   * @param {HTMLCanvasElement} canvas - The main canvas element.\n   */\n  constructor(p, canvas) {\n    this.p = p;\n    this.canvas = canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n\n    // Create off-screen graphics buffers for multi-pass rendering\n    this.sceneBuffer = p.createGraphics(this.width, this.height, p.WEBGL);\n    this.effectBuffer = p.createGraphics(this.width, this.height, p.WEBGL);\n\n    this.shaders = {}; // Cache for compiled shaders\n    this.shaderPromises = {}; // Cache for shader loading promises\n    this.postProcessingEffects = []; // Queue of effects for the current frame\n  }\n\n  /**\n   * Loads a shader and caches the loading promise.\n   * @param {string} key - A unique key to identify the shader.\n   * @param {string} fragUrl - The URL to the fragment shader file.\n   */\n  loadShader(key, fragUrl) {\n    if (this.shaders[key] || this.shaderPromises[key]) {\n      return;\n    }\n    const vertUrl = 'src/shaders/passthrough.vert';\n    const promise = this.p.loadShader(vertUrl, fragUrl, (shader) => {\n      this.shaders[key] = shader;\n      delete this.shaderPromises[key];\n      console.log(`Shader \"${key}\" loaded.`);\n    });\n    this.shaderPromises[key] = promise;\n  }\n\n  /**\n   * Orchestrates the multi-pass rendering process.\n   * @param {Set<ClipBase>} clipsToRender - A Set of all clips that should be rendered this frame.\n   * @param {TransitionBase[]} activeTransitions - A list of transitions currently active.\n   * @param {number} time - The current time of the timeline.\n   */\n  async render(clipsToRender, activeTransitions, time) {\n    // Pass 1: Render the scene of clips and transitions to a buffer.\n    this._renderScene(clipsToRender, activeTransitions, time);\n\n    // Pass 2: Apply post-processing effects, ping-ponging between buffers.\n    const finalBuffer = await this._applyPostProcessing();\n\n    // Pass 3: Draw the final result to the main canvas.\n    this.p.image(finalBuffer, 0, 0);\n\n    // Clear the effects queue for the next frame.\n    this.postProcessingEffects = [];\n  }\n\n  /**\n   * @private\n   * Renders all active clips and transitions to the main scene buffer.\n   */\n  _renderScene(clipsToRender, activeTransitions, time) {\n    this.sceneBuffer.clear();\n    this.sceneBuffer.push();\n\n    const clipsInTransition = new Set();\n    for (const transition of activeTransitions) {\n      clipsInTransition.add(transition.fromClip);\n      clipsInTransition.add(transition.toClip);\n    }\n\n    const standaloneClips = [...clipsToRender].filter(\n      (clip) => !clipsInTransition.has(clip)\n    );\n    standaloneClips.sort((a, b) => a.layer - b.layer);\n\n    for (const clip of standaloneClips) {\n      const relativeTime = time - clip.start;\n      // Pass the RenderEngine instance to the apply method.\n      // CPU effects will draw to the buffer, while GPU effects will queue themselves.\n      for (const effect of clip.effects) {\n        effect.apply(clip, this, relativeTime);\n      }\n      clip.render(this.sceneBuffer);\n    }\n\n    for (const transition of activeTransitions) {\n      transition.render(this.sceneBuffer, time);\n    }\n\n    this.sceneBuffer.pop();\n  }\n\n  /**\n   * @private\n   * Applies all queued post-processing effects to the scene buffer.\n   * @returns {p5.Graphics} The final graphics buffer with all effects applied.\n   */\n  async _applyPostProcessing() {\n    if (this.postProcessingEffects.length === 0) {\n      return this.sceneBuffer;\n    }\n\n    let sourceBuffer = this.sceneBuffer;\n    let destinationBuffer = this.effectBuffer;\n\n    for (let i = 0; i < this.postProcessingEffects.length; i++) {\n      const effect = this.postProcessingEffects[i];\n\n      if (this.shaderPromises[effect.type]) {\n        await this.shaderPromises[effect.type];\n      }\n\n      const shader = this.shaders[effect.type];\n      if (shader) {\n        destinationBuffer.shader(shader);\n        shader.setUniform('u_texture', sourceBuffer);\n\n        if (effect.uniforms) {\n          for (const [key, value] of Object.entries(effect.uniforms)) {\n            shader.setUniform(key, value);\n          }\n        }\n\n        destinationBuffer.rect(\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height\n        );\n\n        // Ping-pong: swap buffers for the next pass\n        [sourceBuffer, destinationBuffer] = [destinationBuffer, sourceBuffer];\n      }\n    }\n\n    // The final rendered image is in the last sourceBuffer\n    return sourceBuffer;\n  }\n}\n\nexport default RenderEngine;\n","/**\n * @class ErrorHandler\n * @description Provides a centralized way to handle and display errors and warnings.\n */\nclass ErrorHandler {\n  /**\n   * Handles critical errors that might stop the execution.\n   * Logs the error and throws it to stop the script.\n   * @param {string} message - The error message.\n   * @param {Error} [originalError] - The original error object.\n   */\n  static critical(message, originalError) {\n    console.error(`[p5.videoeditor.js] Critical Error: ${message}`);\n    if (originalError) {\n      console.error('Original Error:', originalError);\n    }\n    throw new Error(`[p5.videoeditor.js] ${message}`);\n  }\n\n  /**\n   * Handles warnings for non-critical issues.\n   * Logs a warning message to the console.\n   * @param {string} message - The warning message.\n   */\n  static warning(message) {\n    console.warn(`[p5.videoeditor.js] Warning: ${message}`);\n  }\n\n  /**\n   * Displays a user-friendly error message.\n   * In a real UI, this might show a modal or a notification.\n   * For now, it will just log a formatted error.\n   * @param {Error} error - The error object to display.\n   */\n  static showUserFriendlyError(error) {\n    // For now, just log a friendly message.\n    // This can be expanded to show an overlay on the p5.js canvas.\n    console.error(`[p5.videoeditor.js] An error occurred: ${error.message}`);\n  }\n}\n\nexport default ErrorHandler;\n","/**\n * @class EffectBase\n * @description The abstract base class for all visual effects.\n * It defines the standard interface that all effects must implement.\n */\nclass EffectBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - Configuration options for the effect.\n   * @param {number} [options.start=0] - The start time of the effect, relative to the clip's start, in milliseconds.\n   * @param {number} [options.duration=1000] - The duration of the effect in milliseconds.\n   */\n  constructor({ start = 0, duration = 1000 } = {}) {\n    this.start = start;\n    this.duration = duration;\n  }\n\n  /**\n   * Abstract method to apply the effect.\n   * This method must be implemented by any class that extends EffectBase.\n   * @param {ClipBase} clip - The clip to which the effect is being applied.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  apply(_clip, _p, _relativeTime) {\n    throw new Error('The \"apply()\" method must be implemented by a subclass.');\n  }\n}\n\nexport default EffectBase;\n","import EffectBase from './EffectBase.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\n/**\n * @class GPUEffectBase\n * @description A base class for GPU-accelerated post-processing effects.\n * This class handles the interaction with the RenderEngine's post-processing pipeline.\n * @extends EffectBase\n */\nclass GPUEffectBase extends EffectBase {\n  /**\n   * @constructor\n   * @param {object} options - Configuration options for the effect.\n   * @param {string} options.type - The unique type name of the effect, matching its shader key.\n   * @param {string} options.fragUrl - The URL to the fragment shader file.\n   */\n  constructor(options = {}) {\n    super(options);\n    if (!options.type || !options.fragUrl) {\n      ErrorHandler.critical(\n        'GPUEffectBase requires a `type` and `fragUrl` in its options.'\n      );\n    }\n    this.type = options.type;\n    this.fragUrl = options.fragUrl;\n    this.uniforms = options.uniforms || {};\n  }\n\n  /**\n   * Applies the GPU effect by queuing it in the RenderEngine.\n   * @param {ClipBase} clip - The clip being processed.\n   * @param {RenderEngine} renderEngine - The render engine instance.\n   * @param {number} relativeTime - The current time relative to the clip's start.\n   */\n  apply(clip, renderEngine, relativeTime) {\n    if (\n      relativeTime >= this.start &&\n      relativeTime < this.start + this.duration\n    ) {\n      // Ensure the shader is loaded\n      renderEngine.loadShader(this.type, this.fragUrl);\n\n      // Add this effect to the post-processing queue for this frame\n      renderEngine.postProcessingEffects.push({\n        type: this.type,\n        uniforms: this.getUniforms(relativeTime),\n      });\n    }\n  }\n\n  /**\n   * Returns the uniforms to be passed to the shader for the current frame.\n   * This method can be overridden by subclasses to compute dynamic uniforms.\n   * @param {number} relativeTime - The current time relative to the clip's start.\n   * @returns {object} An object containing the shader uniforms.\n   */\n  getUniforms(relativeTime) {\n    return this.uniforms;\n  }\n}\n\nexport default GPUEffectBase;","import GPUEffectBase from './GPUEffectBase.js';\n\n/**\n * @class BlurEffect\n * @description A two-pass Gaussian blur effect that leverages the GPU.\n * This effect demonstrates a more complex multi-pass post-processing effect.\n * @extends GPUEffectBase\n */\nclass BlurEffect extends GPUEffectBase {\n  /**\n   * @constructor\n   * @param {object} options - Configuration options for the blur effect.\n   * @param {number} [options.radius=5] - The radius of the blur in pixels. Higher values are more blurry.\n   */\n  constructor(options = {}) {\n    super({\n      ...options,\n      type: 'blur',\n      fragUrl: 'src/shaders/blur.frag',\n    });\n    this.radius = options.radius || 5;\n  }\n\n  /**\n   * Applies the two-pass blur effect by queuing two separate post-processing steps.\n   * @param {ClipBase} clip - The clip being processed.\n   * @param {RenderEngine} renderEngine - The render engine instance.\n   * @param {number} relativeTime - The current time relative to the clip's start.\n   */\n  apply(clip, renderEngine, relativeTime) {\n    if (\n      relativeTime >= this.start &&\n      relativeTime < this.start + this.duration\n    ) {\n      // Ensure the shader is loaded\n      renderEngine.loadShader(this.type, this.fragUrl);\n\n      const resolution = Math.max(renderEngine.width, renderEngine.height);\n\n      // Pass 1: Horizontal Blur\n      renderEngine.postProcessingEffects.push({\n        type: this.type,\n        uniforms: {\n          u_radius: this.radius,\n          u_direction: [1.0, 0.0],\n          u_resolution: resolution,\n        },\n      });\n\n      // Pass 2: Vertical Blur\n      renderEngine.postProcessingEffects.push({\n        type: this.type,\n        uniforms: {\n          u_radius: this.radius,\n          u_direction: [0.0, 1.0],\n          u_resolution: resolution,\n        },\n      });\n    }\n  }\n}\n\nexport default BlurEffect;","import BlurEffect from '../effects/BlurEffect.js';\n\n/**\n * @constant BlurEffectPlugin\n * @description The plugin object that allows the BlurEffect to be registered with the editor.\n * This makes the 'blur' effect type available for use on clips.\n */\nexport const BlurEffectPlugin = {\n  name: 'BlurEffect',\n  type: 'effect',\n  onLoad: (timeline) => {\n    // Note: We register the class constructor, not an instance.\n    // The timeline will instantiate it when a user adds the effect.\n    timeline.registerEffectType('blur', BlurEffect);\n  },\n};","/**\n * @class TransitionBase\n * @description The foundational class for all transition effects between clips.\n * It provides the core logic for calculating transition progress.\n */\nclass TransitionBase {\n  /**\n   * @constructor\n   * @param {object} options - The configuration object for the transition.\n   * @param {ClipBase} options.fromClip - The clip the transition starts from.\n   * @param {ClipBase} options.toClip - The clip the transition ends on.\n   * @param {number} options.duration - The duration of the transition in milliseconds.\n   */\n  constructor({ fromClip, toClip, duration }) {\n    if (!fromClip || !toClip) {\n      throw new Error(\n        'A transition requires both a `fromClip` and a `toClip`.'\n      );\n    }\n    if (typeof duration !== 'number' || duration <= 0) {\n      throw new Error('A transition requires a positive `duration`.');\n    }\n\n    this.fromClip = fromClip;\n    this.toClip = toClip;\n    this.duration = duration;\n\n    // By default, a transition is assumed to start exactly when the `toClip` begins.\n    // This could be made more flexible in the options later if needed.\n    this.start = this.toClip.start;\n  }\n\n  /**\n   * Calculates the progress of the transition at a given time.\n   * The progress is clamped between 0.0 and 1.0.\n   * @param {number} time - The current time on the main timeline in milliseconds.\n   * @returns {number} The progress of the transition as a value from 0.0 to 1.0.\n   */\n  getProgress(time) {\n    if (time < this.start) {\n      return 0.0;\n    }\n    if (time > this.start + this.duration) {\n      return 1.0;\n    }\n    // Linear progress calculation\n    return (time - this.start) / this.duration;\n  }\n\n  /**\n   * Abstract render method.\n   * Subclasses must implement this method to apply the visual transition effect.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} progress - The current progress of the transition (0.0 to 1.0).\n   */\n  render(_p, _progress) {\n    // This method is intended to be overridden by subclasses.\n    // For example, a fade transition would use the progress to control opacity.\n    throw new Error(\n      'The `render` method must be implemented by a subclass of TransitionBase.'\n    );\n  }\n}\n\nexport default TransitionBase;\n","import TransitionBase from '../transitions/TransitionBase.js';\n\n/**\n * @class CrossFadeTransition\n * @extends TransitionBase\n * @description A transition that fades out the `fromClip` while fading in the `toClip`.\n */\nexport class CrossFadeTransition extends TransitionBase {\n  /**\n   * @constructor\n   * @param {object} options - The configuration object for the transition.\n   *                          Inherits options from TransitionBase.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  /**\n   * Renders the cross-fade effect by adjusting the opacity of the two clips.\n   * This method is called by the timeline's render loop when the transition is active.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} time - The current time on the main timeline in milliseconds.\n   */\n  render(p, time) {\n    const progress = this.getProgress(time);\n\n    // Store the original opacities to ensure the transition is non-destructive.\n    const fromClipOpacity = this.fromClip.properties.opacity;\n    const toClipOpacity = this.toClip.properties.opacity;\n\n    try {\n      // Apply the transitional opacity.\n      this.fromClip.properties.opacity = fromClipOpacity * (1 - progress);\n      this.toClip.properties.opacity = toClipOpacity * progress;\n\n      // Apply effects for both clips before rendering them.\n      const fromRelativeTime = time - this.fromClip.start;\n      for (const effect of this.fromClip.effects) {\n        effect.apply(this.fromClip, p, fromRelativeTime);\n      }\n      this.fromClip.render(p, fromRelativeTime);\n\n      const toRelativeTime = time - this.toClip.start;\n      for (const effect of this.toClip.effects) {\n        effect.apply(this.toClip, p, toRelativeTime);\n      }\n      this.toClip.render(p, toRelativeTime);\n    } finally {\n      // IMPORTANT: Restore the original opacities after rendering.\n      this.fromClip.properties.opacity = fromClipOpacity;\n      this.toClip.properties.opacity = toClipOpacity;\n    }\n  }\n}\n\n/**\n * @type {object}\n * @name CrossFadeTransitionPlugin\n * @description The plugin object for the CrossFadeTransition.\n * This object is what users will register with the timeline.\n */\nexport const CrossFadeTransitionPlugin = {\n  name: 'CrossFadeTransition',\n  type: 'transition',\n  onLoad: (timeline) => {\n    timeline.registerTransitionType('crossfade', CrossFadeTransition);\n  },\n};\n","import EffectBase from '../effects/EffectBase.js';\n\nexport class FadeInEffect extends EffectBase {\n  constructor(options = {}) {\n    super(options);\n    this.duration = options.duration || 500; // Default 500ms fade in\n  }\n\n  apply(clip, p, relativeTime) {\n    if (\n      relativeTime >= this.start &&\n      relativeTime < this.start + this.duration\n    ) {\n      const effectTime = relativeTime - this.start;\n      const t = effectTime / this.duration;\n      // Multiplies the existing opacity, allowing it to fade-in to a keyframed value.\n      clip.properties.opacity *= p.lerp(0, 1, t);\n    }\n  }\n}\n\nexport const FadeInEffectPlugin = {\n  name: 'FadeInEffect',\n  type: 'effect',\n  onLoad: (timeline) => {\n    timeline.registerEffectType('fadeIn', FadeInEffect);\n  },\n};\n","import EffectBase from '../effects/EffectBase.js';\n\nexport class FadeOutEffect extends EffectBase {\n  constructor(options = {}) {\n    super(options);\n    this.duration = options.duration || 500; // Default 500ms fade out\n  }\n\n  apply(clip, p, relativeTime) {\n    if (\n      relativeTime >= this.start &&\n      relativeTime < this.start + this.duration\n    ) {\n      const effectTime = relativeTime - this.start;\n      const t = effectTime / this.duration;\n      clip.properties.opacity *= p.lerp(1, 0, t);\n    }\n  }\n}\n\nexport const FadeOutEffectPlugin = {\n  name: 'FadeOutEffect',\n  type: 'effect',\n  onLoad: (timeline) => {\n    timeline.registerEffectType('fadeOut', FadeOutEffect);\n  },\n};\n","import EffectBase from '../effects/EffectBase.js';\n\n/**\n * @class WiggleEffect\n * @extends EffectBase\n * @description Applies a procedural \"wiggle\" to a clip's position using Perlin noise.\n * This is a CPU-based effect that modifies clip properties before rendering.\n */\nclass WiggleEffect extends EffectBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - Configuration options.\n   * @param {number} [options.frequency=1] - The speed of the wiggle. Higher values are faster.\n   * @param {number} [options.amplitude=10] - The maximum distance the clip will move from its original position, in pixels.\n   */\n  constructor({ frequency = 1, amplitude = 10, ...baseOptions } = {}) {\n    super(baseOptions);\n    this.frequency = frequency;\n    this.amplitude = amplitude;\n  }\n\n  /**\n   * Applies the wiggle effect by modifying the clip's x and y properties.\n   * @param {p5} p - The p5.js instance.\n   * @param {ClipBase} clip - The clip to which the effect is being applied.\n   */\n  apply(p, clip) {\n    // Use the p5.js millis() function for a continuous time value, scaled by frequency.\n    // Dividing by 1000 converts it to seconds for more manageable frequency values.\n    const time = (p.millis() / 1000) * this.frequency;\n\n    // Use Perlin noise to generate smooth, random-like values between 0 and 1.\n    // We use different \"seeds\" for x and y by adding a large offset to the noise input\n    // to ensure the motion is not just diagonal.\n    const noiseX = p.noise(time);\n    const noiseY = p.noise(time + 10000); // Large offset for a different noise value\n\n    // Map the noise value from its original [0, 1] range to [-1, 1]\n    const offsetX = (noiseX * 2 - 1) * this.amplitude;\n    const offsetY = (noiseY * 2 - 1) * this.amplitude;\n\n    // Add the calculated offset to the clip's current properties.\n    // This is non-destructive because properties are reset from keyframes\n    // in the ClipBase.update() method on every frame.\n    clip.properties.x += offsetX;\n    clip.properties.y += offsetY;\n  }\n}\n\n/**\n * @type {object}\n * @name WiggleEffectPlugin\n * @description The plugin object for the WiggleEffect.\n * This object is what users will register with the timeline.\n */\nexport const WiggleEffectPlugin = {\n  name: 'WiggleEffect',\n  type: 'effect',\n  onLoad: (timeline) => {\n    timeline.registerEffectType('wiggle', WiggleEffect);\n  },\n};\n","import { BlurEffectPlugin } from './BlurEffectPlugin.js';\nimport { CrossFadeTransitionPlugin } from './CrossFadeTransitionPlugin.js';\nimport { FadeInEffectPlugin } from './FadeInEffectPlugin.js';\nimport { FadeOutEffectPlugin } from './FadeOutEffectPlugin.js';\nimport { WiggleEffectPlugin } from './WiggleEffectPlugin.js';\n\n/**\n * @namespace BuiltInPlugins\n * @description A collection of the default plugins included with the library.\n * This array is automatically loaded by the Timeline at initialization.\n */\nexport const builtInPlugins = [\n  // GPU Effects\n  BlurEffectPlugin,\n\n  // CPU Effects\n  FadeInEffectPlugin,\n  FadeOutEffectPlugin,\n  WiggleEffectPlugin,\n\n  // Transitions\n  CrossFadeTransitionPlugin,\n];","import { PluginManager } from './PluginManager.js';\nimport RenderEngine from './RenderEngine.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\nimport { builtInPlugins } from '../plugins/index.js';\n\n/**\n * @class Timeline\n * @description Manages the collection of clips, their timing, and the overall playback state.\n * It is the central component that orchestrates the animation. This class is typically\n * accessed via `editor.timeline`.\n */\nclass Timeline {\n  /**\n   * @constructor\n   * @param {p5} p - The p5.js instance.\n   * @param {HTMLCanvasElement} canvas - The canvas element.\n   * @param {object} [options={}] - Configuration options for the timeline.\n   * @param {number} [options.duration=10000] - The total duration of the timeline in milliseconds.\n   */\n  constructor(p, canvas, { duration = 10000 } = {}) {\n    this.duration = duration;\n    this.clips = [];\n    this.transitions = [];\n    this.time = 0;\n    this.isPlaying = false;\n\n    this.isBatching = false;\n    this.dirtyClips = new Set();\n    this.needsClipSorting = false;\n\n    this.renderEngine = new RenderEngine(p, canvas);\n    this.pluginManager = new PluginManager();\n    this.transitionTypes = new Map();\n    this.effectTypes = new Map();\n\n    this._loadBuiltInPlugins();\n  }\n\n  /**\n   * Registers a plugin with the timeline and immediately loads it.\n   * @param {object} plugin - The plugin to register.\n   * @example\n   * import MyCustomPlugin from './plugins/my-plugin.js';\n   * editor.use(MyCustomPlugin); // Pass the plugin object itself\n   */\n  use(plugin) {\n    this.pluginManager.register(plugin);\n    try {\n      // Immediately load the plugin so its effects/transitions are available\n      plugin.onLoad(this);\n    } catch (error) {\n      ErrorHandler.critical(`Error loading plugin: ${plugin.name}`, error);\n    }\n  }\n\n  /**\n   * Adds a clip to the timeline. Typically called by the `VideoEditor` factory methods.\n   * @param {ClipBase} clip - The clip instance to add.\n   */\n  addClip(clip) {\n    this.clips.push(clip);\n    clip.timeline = this;\n\n    if (this.isBatching) {\n      this.needsClipSorting = true;\n    } else {\n      this.clips.sort((a, b) => a.layer - b.layer);\n    }\n  }\n\n  /**\n   * Registers a new transition type with the timeline.\n   * @param {string} name - The name of the transition (e.g., 'crossfade').\n   * @param {TransitionBase} transitionClass - The class constructor for the transition.\n   */\n  registerTransitionType(name, transitionClass) {\n    this.transitionTypes.set(name, transitionClass);\n  }\n\n  /**\n   * Registers a new effect type with the timeline.\n   * @param {string} name - The name of the effect (e.g., 'wiggle').\n   * @param {EffectBase} effectClass - The class constructor for the effect.\n   */\n  registerEffectType(name, effectClass) {\n    this.effectTypes.set(name, effectClass);\n  }\n\n  /**\n   * Creates and adds a transition between two clips.\n   * @param {object} options - The configuration for the transition.\n   * @param {ClipBase} options.fromClip - The clip to transition from.\n   * @param {ClipBase} options.toClip - The clip to transition to.\n   * @param {number} options.duration - The duration of the transition in milliseconds.\n   * @param {string} options.type - The type of transition (e.g., 'crossfade').\n   * @returns {TransitionBase|null} The created transition instance, or null if the type is unknown.\n   * @example\n   * const clipA = editor.createTextClip('A', { start: 0, duration: 2 });\n   * const clipB = editor.createTextClip('B', { start: 1, duration: 2 });\n   * editor.timeline.addTransition({ fromClip: clipA, toClip: clipB, duration: 1, type: 'crossfade' });\n   */\n  addTransition(options) {\n    const TransitionClass = this.transitionTypes.get(options.type);\n    if (!TransitionClass) {\n      ErrorHandler.warning(`Unknown transition type: ${options.type}`);\n      return null;\n    }\n    const transition = new TransitionClass(options);\n    this.transitions.push(transition);\n    return transition;\n  }\n\n  /**\n   * Groups multiple clip or keyframe additions into a single operation to optimize performance.\n   * @param {Function} callback - A function that contains the operations to be batched.\n   * @example\n   * editor.timeline.batch(() => {\n   *   editor.createTextClip(...);\n   *   editor.createImageClip(...);\n   * });\n   */\n  batch(callback) {\n    this.isBatching = true;\n    try {\n      callback();\n    } finally {\n      this.isBatching = false;\n      this.finalizeBatch();\n    }\n  }\n\n  /**\n   * @private\n   * Finalizes batch operations by sorting dirty clips and layers.\n   */\n  finalizeBatch() {\n    this.dirtyClips.forEach((clip) => clip.finalizeChanges());\n    this.dirtyClips.clear();\n\n    if (this.needsClipSorting) {\n      this.clips.sort((a, b) => a.layer - b.layer);\n      this.needsClipSorting = false;\n    }\n  }\n\n  /**\n   * Gets all clips that are directly active at the current time.\n   * Note: This does not include clips that are only active because of a transition.\n   * @returns {ClipBase[]} An array of active clips.\n   */\n  getActiveClips() {\n    const activeClips = [];\n    for (const clip of this.clips) {\n      if (this.time >= clip.start && this.time < clip.start + clip.duration) {\n        activeClips.push(clip);\n      }\n    }\n    return activeClips;\n  }\n\n  /**\n   * @private\n   * Determines which clips and transitions are active at a specific time.\n   * @param {number} time - The time to check against.\n   * @returns {{clipsToProcess: Set<ClipBase>, activeTransitions: TransitionBase[]}}\n   */\n  _getFrameState(time) {\n    const clipsToProcess = new Set();\n    const activeTransitions = [];\n\n    for (const clip of this.clips) {\n      if (time >= clip.start && time < clip.start + clip.duration) {\n        clipsToProcess.add(clip);\n      }\n    }\n\n    for (const transition of this.transitions) {\n      if (\n        time >= transition.start &&\n        time < transition.start + transition.duration\n      ) {\n        activeTransitions.push(transition);\n        clipsToProcess.add(transition.fromClip);\n        clipsToProcess.add(transition.toClip);\n      }\n    }\n\n    return { clipsToProcess, activeTransitions };\n  }\n\n  /**\n   * The main update loop for the timeline. It advances the time and updates all relevant clips.\n   * @param {p5} p - The p5.js instance.\n   * @internal\n   */\n  update(p) {\n    if (this.isPlaying) {\n      this.time += p.deltaTime;\n      if (this.time >= this.duration) {\n        this.time %= this.duration; // Frame-accurate loop\n      }\n    }\n\n    const { clipsToProcess } = this._getFrameState(this.time);\n\n    for (const clip of clipsToProcess) {\n      const relativeTime = this.time - clip.start;\n      clip.update(p, relativeTime);\n    }\n  }\n\n  /**\n   * Renders the current state of the timeline by delegating to the RenderEngine.\n   * @internal\n   */\n  async render() {\n    const { clipsToProcess, activeTransitions } = this._getFrameState(\n      this.time\n    );\n    await this.renderEngine.render(\n      clipsToProcess,\n      activeTransitions,\n      this.time\n    );\n  }\n\n  /**\n   * Starts or resumes playback.\n   */\n  play() {\n    this.isPlaying = true;\n  }\n\n  /**\n   * Pauses playback.\n   */\n  pause() {\n    this.isPlaying = false;\n  }\n\n  /**\n   * Seeks to a specific time in the timeline.\n   * @param {number} time - The time to seek to, in milliseconds.\n   */\n  seek(time) {\n    if (time >= 0 && time <= this.duration) {\n      this.time = time;\n    }\n  }\n\n  /**\n   * @private\n   * Loads all built-in plugins. This is called once on initialization.\n   */\n  _loadBuiltInPlugins() {\n    for (const plugin of builtInPlugins) {\n      this.pluginManager.register(plugin);\n      try {\n        plugin.onLoad(this);\n      } catch (error) {\n        ErrorHandler.critical(\n          `Error loading built-in plugin: ${plugin.name}`,\n          error\n        );\n      }\n    }\n  }\n}\n\nexport default Timeline;\n","/**\n * @class FrameRecorder\n * @description A class responsible for capturing and storing frames from a p5.js canvas.\n */\nclass FrameRecorder {\n  /**\n   * @param {HTMLCanvasElement} canvas - The p5.js canvas element to capture frames from.\n   */\n  constructor(canvas) {\n    if (!canvas || typeof canvas.toDataURL !== 'function') {\n      throw new Error(\n        'A valid canvas element must be provided to the FrameRecorder.'\n      );\n    }\n    this.canvas = canvas;\n    this.frames = [];\n  }\n\n  /**\n   * Starts a new recording session, clearing any previously captured frames.\n   */\n  start() {\n    this.frames = [];\n    console.log('Frame recording started.');\n  }\n\n  /**\n   * Captures the current content of the canvas and stores it as a WebP Data URL.\n   */\n  captureFrame() {\n    // Using 'image/webp' for a good balance of quality and file size.\n    // Quality is set to 0.8.\n    const frameDataUrl = this.canvas.toDataURL('image/webp', 0.8);\n    this.frames.push(frameDataUrl);\n  }\n\n  /**\n   * Stops the recording session. Currently a placeholder for future functionality.\n   */\n  stop() {\n    console.log(\n      `Frame recording stopped. Total frames captured: ${this.frames.length}`\n    );\n  }\n\n  /**\n   * Returns the array of captured frames.\n   * @returns {string[]} An array of base64 Data URLs representing the captured frames.\n   */\n  getFrames() {\n    return this.frames;\n  }\n}\n\nexport default FrameRecorder;\n","/**\n * @class Exporter\n * @description Manages the video export process by communicating with a Web Worker.\n */\nclass Exporter {\n  /**\n   * @param {object} [options={}] - Configuration options.\n   * @param {function} [options.onProgress] - Callback for progress updates.\n   * @param {function} [options.onLog] - Callback for log messages from FFmpeg.\n   * @param {function} [options.onError] - Callback for errors during the export process.\n   * @param {function} [options.onComplete] - Callback when the export is finished, receiving the video Blob.\n   */\n  constructor({ onProgress, onLog, onError, onComplete } = {}) {\n    this.worker = new Worker(new URL('./encoder.worker.js', import.meta.url), {\n      type: 'module',\n    });\n\n    this.onProgress = onProgress;\n    this.onLog = onLog;\n    this.onError = onError;\n    this.onComplete = onComplete;\n\n    this.worker.onmessage = this.handleWorkerMessage.bind(this);\n  }\n\n  /**\n   * Handles messages received from the encoding worker.\n   * @param {MessageEvent} event - The message event from the worker.\n   */\n  handleWorkerMessage({ data }) {\n    switch (data.type) {\n      case 'log':\n        if (this.onLog) this.onLog(data.data);\n        break;\n      case 'progress':\n        if (this.onProgress) this.onProgress(data.data);\n        break;\n      case 'error':\n        if (this.onError) this.onError(new Error(data.data));\n        break;\n      case 'done': {\n        const videoBlob = new Blob([data.data.buffer], { type: 'video/mp4' });\n        if (this.onComplete) this.onComplete(videoBlob);\n        break;\n      }\n      default:\n        console.warn(\n          'Exporter received unknown message type from worker:',\n          data.type\n        );\n    }\n  }\n\n  /**\n   * Starts the export process by sending the captured frames and optional audio to the worker.\n   * @param {string[]} frames - An array of frame Data URLs.\n   * @param {number} [frameRate=30] - The frame rate for the output video.\n   * @param {Blob|null} [audioBlob=null] - An optional Blob containing the audio data.\n   */\n  export(frames, frameRate = 30, audioBlob = null) {\n    if (!frames || frames.length === 0) {\n      const error = new Error('Cannot export without frames.');\n      if (this.onError) {\n        this.onError(error);\n      } else {\n        throw error;\n      }\n      return;\n    }\n\n    if (this.onLog)\n      this.onLog('Sending frames and audio data to export worker...');\n    this.worker.postMessage({ frames, frameRate, audioBlob });\n  }\n\n  /**\n   * Terminates the worker. Useful for cleanup when the exporter is no longer needed.\n   */\n  terminate() {\n    this.worker.terminate();\n  }\n}\n\nexport default Exporter;\n","import FrameRecorder from './FrameRecorder.js';\nimport Exporter from '../export/Exporter.js';\n\n/**\n * @class PlaybackController\n * @description Provides a UI and logic to control timeline playback and trigger exports.\n */\nclass PlaybackController {\n  /**\n   * @constructor\n   * @param {Timeline} timeline - The timeline instance to control.\n   * @param {HTMLCanvasElement} canvas - The p5.js canvas element for recording.\n   * @param {HTMLElement} container - The HTML element to append the UI controls to.\n   */\n  constructor(timeline, canvas, container) {\n    this.timeline = timeline;\n    this.canvas = canvas;\n    this.container = container;\n\n    // Initialize the components needed for exporting\n    this.frameRecorder = new FrameRecorder(this.canvas);\n    this.exporter = new Exporter({\n      onProgress: this.handleExportProgress.bind(this),\n      onComplete: this.handleExportComplete.bind(this),\n      onError: this.handleExportError.bind(this),\n      onLog: (log) => console.log('Exporter Log:', log),\n    });\n\n    this._createUI();\n  }\n\n  /**\n   * Creates and appends the playback and export UI controls.\n   * @private\n   */\n  _createUI() {\n    if (!this.container) return;\n\n    const wrapper = document.createElement('div');\n    wrapper.style.padding = '10px';\n    wrapper.style.backgroundColor = '#f0f0f0';\n    wrapper.style.borderTop = '1.5px solid #ccc';\n\n    // --- Basic Play/Pause Button ---\n    this.playButton = document.createElement('button');\n    this.playButton.textContent = 'Play';\n    this.playButton.onclick = () => {\n      if (this.timeline.isPlaying) {\n        this.pause();\n        this.playButton.textContent = 'Play';\n      } else {\n        this.play();\n        this.playButton.textContent = 'Pause';\n      }\n    };\n    wrapper.appendChild(this.playButton);\n\n    // --- Export Button ---\n    this.exportButton = document.createElement('button');\n    this.exportButton.textContent = 'Ekspor Video';\n    this.exportButton.style.marginLeft = '10px';\n    this.exportButton.onclick = () => this.startExportProcess();\n    wrapper.appendChild(this.exportButton);\n\n    // --- Status Display ---\n    this.exportStatus = document.createElement('span');\n    this.exportStatus.style.marginLeft = '15px';\n    this.exportStatus.style.fontFamily = 'monospace';\n    this.exportStatus.style.display = 'none'; // Hidden by default\n    wrapper.appendChild(this.exportStatus);\n\n    this.container.appendChild(wrapper);\n  }\n\n  /**\n   * Starts the entire export workflow: rendering frames and then encoding them.\n   * @private\n   */\n  async startExportProcess() {\n    this.exportButton.disabled = true;\n    this.playButton.disabled = true;\n    this.exportStatus.style.display = 'inline';\n    this.exportStatus.textContent = 'Rendering frames...';\n\n    // Ensure playback is paused and reset to the start\n    this.pause();\n    this.seek(0);\n\n    this.frameRecorder.start();\n\n    const frameRate = this.timeline.frameRate || 30;\n    const frameDuration = 1000 / frameRate;\n    const totalDuration = this.timeline.duration;\n\n    // Use a short timeout to allow the UI to update before the heavy loop starts.\n    await new Promise((resolve) => setTimeout(resolve, 50));\n\n    // --- Offline Rendering Loop ---\n    for (let time = 0; time <= totalDuration; time += frameDuration) {\n      this.timeline.seek(time); // Manually set the time\n      this.timeline.render(); // Manually trigger a render at that time\n      this.frameRecorder.captureFrame();\n    }\n\n    this.frameRecorder.stop();\n    this.exportStatus.textContent =\n      'Mengenkode video... (ini mungkin perlu waktu)';\n\n    // Hand off the captured frames to the exporter\n    this.exporter.export(this.frameRecorder.getFrames(), frameRate);\n  }\n\n  /**\n   * Handles progress updates from the exporter.\n   * @private\n   * @param {number} progress - The export progress percentage (0-100).\n   */\n  handleExportProgress(progress) {\n    this.exportStatus.textContent = `Mengenkode... ${progress}%`;\n  }\n\n  /**\n   * Handles the completion of the export process.\n   * @private\n   * @param {Blob} videoBlob - The resulting video file as a Blob.\n   */\n  handleExportComplete(videoBlob) {\n    this.exportStatus.textContent = 'Ekspor selesai! Memulai pengunduhan...';\n\n    // Create a temporary link to trigger the download\n    const url = URL.createObjectURL(videoBlob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'p5-video-export.mp4';\n    document.body.appendChild(a);\n    a.click();\n\n    // Clean up the temporary link and object URL\n    setTimeout(() => {\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      this._resetUIState();\n    }, 100);\n  }\n\n  /**\n   * Handles any errors that occur during the export process.\n   * @private\n   * @param {Error} error - The error object.\n   */\n  handleExportError(error) {\n    console.error('Export failed:', error);\n    this.exportStatus.textContent = `Error: ${error.message}`;\n    // Do not reset immediately, so the user can see the error.\n    // Consider adding a close button for the error message in a real app.\n    setTimeout(() => this._resetUIState(), 5000); // Reset after 5 seconds\n  }\n\n  /**\n   * Resets the UI controls to their default, interactive state.\n   * @private\n   */\n  _resetUIState() {\n    this.exportButton.disabled = false;\n    this.playButton.disabled = false;\n    this.exportStatus.style.display = 'none';\n    this.exportStatus.textContent = '';\n  }\n\n  /**\n   * @method play\n   * @description Starts or resumes playback of the timeline.\n   */\n  play() {\n    this.timeline.play();\n  }\n\n  /**\n   * @method pause\n   * @description Pauses playback of the timeline.\n   */\n  pause() {\n    this.timeline.pause();\n  }\n\n  /**\n   * @method seek\n   * @description Jumps to a specific time on the timeline.\n   * @param {number} time - The time to seek to, in milliseconds.\n   */\n  seek(time) {\n    this.timeline.seek(time);\n  }\n}\n\nexport default PlaybackController;\n","/**\n * @class PerformanceManager\n * @description Monitors application performance, primarily frame rate.\n */\nclass PerformanceManager {\n  /**\n   * @constructor\n   * @param {object} options - Configuration options.\n   * @param {number} [options.frameRateThreshold=45] - The frame rate below which a warning is logged.\n   */\n  constructor({ frameRateThreshold = 45 } = {}) {\n    this.frameRateThreshold = frameRateThreshold;\n    this.enabled = true;\n  }\n\n  /**\n   * @method monitor\n   * @description Checks the current frame rate and logs a warning if it's below the threshold.\n   * @param {object} p5 - The p5.js instance.\n   */\n  monitor(p5) {\n    if (!this.enabled || !p5) {\n      return;\n    }\n\n    const currentFrameRate = p5.frameRate();\n    if (currentFrameRate < this.frameRateThreshold) {\n      console.warn(\n        `PerformanceWarning: Frame rate is ${currentFrameRate.toFixed(2)} FPS, which is below the threshold of ${this.frameRateThreshold} FPS.`\n      );\n    }\n  }\n\n  /**\n   * @method enable\n   * @description Enables the performance monitor.\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * @method disable\n   * @description Disables the performance monitor.\n   */\n  disable() {\n    this.enabled = false;\n  }\n}\n\nexport default PerformanceManager;\n","/**\n * @class MemoryManager\n * @description Manages memory by caching assets and providing methods to clear unused ones.\n */\nclass MemoryManager {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.cache = new Map();\n    this.enabled = true;\n  }\n\n  /**\n   * @method addAsset\n   * @description Adds an asset to the cache.\n   * @param {string} key - The unique key for the asset (e.g., image URL or asset ID).\n   * @param {*} asset - The asset to be cached.\n   */\n  addAsset(key, asset) {\n    if (!this.enabled) return;\n    this.cache.set(key, asset);\n    console.log(`Asset added to cache: ${key}`);\n  }\n\n  /**\n   * @method getAsset\n   * @description Retrieves an asset from the cache.\n   * @param {string} key - The key of the asset to retrieve.\n   * @returns {*} The cached asset, or undefined if the key does not exist.\n   */\n  getAsset(key) {\n    return this.cache.get(key);\n  }\n\n  /**\n   * @method clearUnusedAssets\n   * @description Removes assets from the cache that are not present in the provided list of active asset keys.\n   * @param {string[]} activeAssetKeys - An array of keys for assets that are currently active or required.\n   */\n  clearUnusedAssets(activeAssetKeys) {\n    if (!this.enabled) return;\n    const activeKeysSet = new Set(activeAssetKeys);\n    let clearedCount = 0;\n    for (const key of this.cache.keys()) {\n      if (!activeKeysSet.has(key)) {\n        this.cache.delete(key);\n        clearedCount++;\n      }\n    }\n    if (clearedCount > 0) {\n      console.log(`Cleared ${clearedCount} unused assets from cache.`);\n    }\n  }\n\n  /**\n   * @method clearAll\n   * @description Clears the entire asset cache unconditionally.\n   */\n  clearAll() {\n    this.cache.clear();\n    console.log('Cleared all assets from cache.');\n  }\n\n  /**\n   * @method enable\n   * @description Enables the memory manager.\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * @method disable\n   * @description Disables the memory manager. Caching and clearing will be skipped.\n   */\n  disable() {\n    this.enabled = false;\n  }\n}\n\nexport default MemoryManager;\n","class Keyframe {\n  /**\n   * @param {number} time - The time in milliseconds, relative to the clip's start.\n   * @param {*} value - The value of the property at this keyframe.\n   * @param {string} [easing='linear'] - The easing function to use from this keyframe to the next.\n   */\n  constructor(time, value, easing = 'linear') {\n    this.time = time;\n    this.value = value;\n    this.easing = easing;\n  }\n}\n\nexport default Keyframe;\n","/**\n * @namespace Easing\n * @description A collection of easing functions for controlling animation speed.\n * These functions take a single argument `t` (time) which is a value between 0 and 1,\n * and return a new value, also between 0 and 1.\n * Based on the work of Grégoire Divaret-Chauveau.\n * @see {@link https://gist.github.com/gre/1650294}\n */\nconst Easing = {\n  /**\n   * No easing, no acceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  linear: (t) => t,\n  /**\n   * Accelerating from zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInQuad: (t) => t * t,\n  /**\n   * Decelerating to zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeOutQuad: (t) => t * (2 - t),\n  /**\n   * Acceleration until halfway, then deceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInOutQuad: (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n  /**\n   * Accelerating from zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInCubic: (t) => t * t * t,\n  /**\n   * Decelerating to zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeOutCubic: (t) => --t * t * t + 1,\n  /**\n   * Acceleration until halfway, then deceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInOutCubic: (t) =>\n    t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n};\n\nexport default Easing;\n","/**\n * Gets a nested value from an object using a string path.\n * @param {object} obj The object to retrieve the value from.\n * @param {string} path The path to the value (e.g., 'a.b.c').\n * @returns {*} The value at the specified path, or undefined if not found.\n */\nexport function getValueByPath(obj, path) {\n  return path.split('.').reduce((acc, part) => acc && acc[part], obj);\n}\n\n/**\n * Sets a nested value in an object using a string path.\n * Creates nested objects if they don't exist.\n * @param {object} obj The object to modify.\n * @param {string} path The path to the value (e.g., 'a.b.c').\n * @param {*} value The value to set.\n */\nexport function setValueByPath(obj, path, value) {\n  const keys = path.split('.');\n  const lastKey = keys.pop();\n  const lastObj = keys.reduce((acc, key) => {\n    if (!acc[key]) {\n      acc[key] = {};\n    }\n    return acc[key];\n  }, obj);\n  lastObj[lastKey] = value;\n}\n","import Keyframe from '../core/Keyframe.js';\nimport Easing from '../utils/Easing.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\nimport { getValueByPath, setValueByPath } from '../utils/ObjectUtils.js';\n\n/**\n * @class ClipBase\n * @description The fundamental building block for all media types on the timeline.\n * It manages common properties like timing, position, rotation, scale, and opacity,\n * as well as the keyframe and effects systems. This class is not intended to be used\n * directly but rather to be extended by specific clip types (e.g., TextClip, ImageClip).\n */\nclass ClipBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - The configuration object for the clip.\n   * @param {number} [options.start=0] - The start time of the clip on the timeline, in milliseconds.\n   * @param {number} [options.duration=1000] - The duration of the clip, in milliseconds.\n   * @param {number} [options.layer=0] - The layer order for rendering. Higher numbers are rendered on top.\n   * @param {string|null} [options.assetKey=null] - A key to identify the asset associated with this clip, used for memory management.\n   * @param {object} [options.properties={}] - Initial values for animatable properties (e.g., x, y, rotation, scale, opacity).\n   */\n  constructor({\n    start = 0,\n    duration = 1000,\n    layer = 0,\n    assetKey = null,\n    ...options\n  } = {}) {\n    this.start = start;\n    this.duration = duration;\n    this.layer = layer;\n    this.assetKey = assetKey;\n    this.timeline = null;\n\n    this.properties = {\n      x: 0,\n      y: 0,\n      rotation: 0,\n      scale: 1,\n      opacity: 1,\n      ...(options.properties || {}),\n    };\n\n    this.initialProperties = JSON.parse(JSON.stringify(this.properties));\n    this.keyframes = {};\n    this.effects = [];\n  }\n\n  /**\n   * Adds a keyframe for a specific property.\n   * @param {string} property - The name of the property to animate (e.g., 'x', 'opacity').\n   * @param {number} time - The time for this keyframe, relative to the clip's start time, in milliseconds.\n   * @param {*} value - The value of the property at this keyframe.\n   * @param {string} [easing='linear'] - The easing function to use for the transition from the previous keyframe.\n   * @returns {this} The current clip instance for chaining.\n   * @example\n   * myClip.addKeyframe('x', 0, 100)\n   *       .addKeyframe('x', 1000, 200, 'easeInQuad');\n   */\n  addKeyframe(property, time, value, easing = 'linear') {\n    if (!this.keyframes[property]) {\n      this.keyframes[property] = [];\n    }\n    this.keyframes[property].push(new Keyframe(time, value, easing));\n\n    if (this.timeline && this.timeline.isBatching) {\n      this.timeline.dirtyClips.add(this);\n    } else {\n      this.keyframes[property].sort((a, b) => a.time - b.time);\n    }\n    return this;\n  }\n\n  /**\n   * Adds an effect to the clip.\n   * @param {object} options - The configuration for the effect.\n   * @param {string} options.type - The type of effect to add (e.g., 'fadeIn', 'wiggle').\n   * @returns {this} The current clip instance for chaining.\n   * @example\n   * myClip.addEffect({ type: 'fadeIn', duration: 500 })\n   *       .addEffect({ type: 'fadeOut', start: 1500, duration: 500 });\n   */\n  addEffect(options = {}) {\n    const { type } = options;\n\n    if (!this.timeline) {\n      ErrorHandler.critical(\n        'Cannot add an effect to a clip that is not on a timeline.'\n      );\n      return this;\n    }\n\n    const EffectClass = this.timeline.effectTypes.get(type);\n    if (EffectClass) {\n      const effect = new EffectClass(options);\n      this.effects.push(effect);\n    } else {\n      ErrorHandler.warn(`Effect with type \"${type}\" not found.`);\n    }\n\n    return this; // Allow chaining\n  }\n\n  /**\n   * Sorts the keyframes for all properties.\n   * @internal\n   */\n  finalizeChanges() {\n    for (const prop in this.keyframes) {\n      if (Object.prototype.hasOwnProperty.call(this.keyframes, prop)) {\n        this.keyframes[prop].sort((a, b) => a.time - b.time);\n      }\n    }\n  }\n\n  /**\n   * Updates the clip's properties based on the current time.\n   * @internal\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    // Deep copy initial properties to reset state for this frame\n    this.properties = JSON.parse(JSON.stringify(this.initialProperties));\n\n    for (const prop in this.keyframes) {\n      if (Object.prototype.hasOwnProperty.call(this.keyframes, prop)) {\n        const value = this._calculateValue(p, prop, relativeTime);\n        setValueByPath(this.properties, prop, value);\n      }\n    }\n  }\n\n  /**\n   * Calculates the interpolated value for a property at a given time.\n   * @private\n   * @param {p5} p - The p5.js instance.\n   * @param {string} prop - The name of the property to calculate.\n   * @param {number} time - The current time within the clip's duration.\n   * @returns {*} The interpolated value of the property.\n   */\n  _calculateValue(p, prop, time) {\n    const kfs = this.keyframes[prop];\n    if (!kfs || kfs.length === 0) {\n      return getValueByPath(this.initialProperties, prop);\n    }\n\n    if (time <= kfs[0].time) {\n      return kfs[0].value;\n    }\n    if (time >= kfs[kfs.length - 1].time) {\n      return kfs[kfs.length - 1].value;\n    }\n\n    let low = 0;\n    let high = kfs.length - 1;\n    let prevKeyframeIndex = 0;\n\n    while (low <= high) {\n      const mid = Math.floor((low + high) / 2);\n      if (kfs[mid].time < time) {\n        prevKeyframeIndex = mid;\n        low = mid + 1;\n      } else if (kfs[mid].time > time) {\n        high = mid - 1;\n      } else {\n        return kfs[mid].value;\n      }\n    }\n\n    const prevKeyframe = kfs[prevKeyframeIndex];\n    const nextKeyframe = kfs[prevKeyframeIndex + 1];\n\n    const t =\n      (time - prevKeyframe.time) / (nextKeyframe.time - prevKeyframe.time);\n    const easingFunction = Easing[prevKeyframe.easing] || Easing.linear;\n    const easedT = easingFunction(t);\n\n    const from = prevKeyframe.value;\n    const to = nextKeyframe.value;\n\n    if (p.Color && from instanceof p.Color && to instanceof p.Color) {\n      return p.lerpColor(from, to, easedT);\n    }\n\n    return p.lerp(from, to, easedT);\n  }\n\n  /**\n   * Renders the clip's base transformations.\n   * @internal\n   * @param {p5} p - The p5.js instance or a p5.Graphics object.\n   */\n  render(p) {\n    p.push();\n    p.translate(this.properties.x, this.properties.y);\n    p.rotate(this.properties.rotation);\n    p.scale(this.properties.scale);\n  }\n}\n\nexport default ClipBase;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class TextClip\n * @extends ClipBase\n * @description A clip for rendering and animating text on the canvas.\n *\n * @param {string} text - The text content to display.\n * @param {object} [options={}] - Configuration options for the text clip. Inherits options from ClipBase.\n * @param {number} [options.fontSize=24] - The font size of the text.\n * @param {p5.Color|string} [options.fill='#ffffff'] - The fill color of the text.\n * @param {string} [options.align='center'] - The horizontal alignment of the text ('left', 'center', 'right').\n *\n * @example\n * let textClip = editor.createTextClip(\"Hello, p5.js!\", {\n *   start: 0,\n *   duration: 5000,\n *   properties: { x: 200, y: 200, fontSize: 32, fill: 'yellow' }\n * });\n * textClip.addKeyframe('opacity', 0, 0);\n * textClip.addKeyframe('opacity', 1000, 1);\n */\nclass TextClip extends ClipBase {\n  constructor(text, options = {}) {\n    super(options);\n    this.text = text;\n    this.properties.fontSize = options.fontSize || 24;\n    this.properties.fill = options.fill || '#ffffff';\n    this.properties.align = options.align || 'center';\n  }\n\n  /**\n   * Renders the text to the canvas with its current properties and transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    p.fill(this.properties.fill); // TODO: Handle opacity\n    p.textSize(this.properties.fontSize);\n    p.textAlign(this.properties.align, p.CENTER);\n    p.text(this.text, 0, 0);\n\n    p.pop();\n  }\n}\n\nexport default TextClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class ShapeClip\n * @extends ClipBase\n * @description A clip for drawing and animating basic p5.js shapes like rectangles and ellipses.\n *\n * @param {string} [shapeType='rect'] - The type of shape to draw ('rect' or 'ellipse').\n * @param {object} [options={}] - Configuration options for the shape clip. Inherits options from ClipBase.\n * @param {number} [options.width=100] - The width of the shape.\n * @param {number} [options.height=100] - The height of the shape.\n * @param {p5.Color|string} [options.fill='#ffffff'] - The fill color of the shape.\n * @param {p5.Color|string} [options.stroke='#000000'] - The stroke color of the shape.\n * @param {number} [options.strokeWeight=1] - The stroke weight of the shape.\n *\n * @example\n * let rectClip = editor.createShapeClip('rect', {\n *   start: 0,\n *   duration: 3000,\n *   properties: { width: 50, height: 50, fill: 'red' }\n * });\n * rectClip.addKeyframe('rotation', 0, 0);\n * rectClip.addKeyframe('rotation', 3000, Math.PI * 2);\n */\nclass ShapeClip extends ClipBase {\n  constructor(shapeType = 'rect', options = {}) {\n    super({\n      ...options,\n      properties: {\n        width: 100,\n        height: 100,\n        fill: '#ffffff',\n        stroke: '#000000',\n        strokeWeight: 1,\n        ...(options.properties || {}),\n      },\n    });\n    this.shapeType = shapeType;\n  }\n\n  /**\n   * Renders the shape to the canvas with its current properties and transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    p.fill(this.properties.fill); // TODO: Handle opacity\n    p.stroke(this.properties.stroke);\n    p.strokeWeight(this.properties.strokeWeight);\n\n    if (this.shapeType === 'rect') {\n      p.rectMode(p.CENTER);\n      p.rect(0, 0, this.properties.width, this.properties.height);\n    } else if (this.shapeType === 'ellipse') {\n      p.ellipseMode(p.CENTER);\n      p.ellipse(0, 0, this.properties.width, this.properties.height);\n    }\n\n    p.pop();\n  }\n}\n\nexport default ShapeClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class ImageClip\n * @extends ClipBase\n * @description A clip for displaying and animating an image on the canvas.\n *\n * @param {p5.Image|string} image - The p5.Image object or a URL to the image file.\n * If a URL is provided, it will be used as the `assetKey` for caching unless one is explicitly provided in the options.\n * @param {object} [options={}] - Configuration options for the image clip. Inherits options from ClipBase.\n *\n * @example\n * // Assuming 'logo.png' is preloaded\n * let imageClip = editor.createImageClip(logo, { start: 1000, duration: 4000 });\n * imageClip.addKeyframe('scale', 0, 0.5);\n * imageClip.addKeyframe('scale', 1000, 1);\n */\nclass ImageClip extends ClipBase {\n  constructor(image, options = {}) {\n    if (typeof image === 'string' && !options.assetKey) {\n      options.assetKey = image;\n    }\n    super({\n      ...options,\n      properties: {\n        width: image ? image.width : 0,\n        height: image ? image.height : 0,\n        ...(options.properties || {}),\n      },\n    });\n    this.image = image;\n  }\n\n  /**\n   * Renders the image to the canvas with its current transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    if (this.image) {\n      // TODO: Handle opacity with p.tint()\n      p.imageMode(p.CENTER);\n      p.image(this.image, 0, 0, this.properties.width, this.properties.height);\n    }\n\n    p.pop();\n  }\n}\n\nexport default ImageClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class AudioClip\n * @extends ClipBase\n * @description A clip for managing and playing audio on the timeline. It handles\n * playback synchronization and allows for keyframing audio properties like volume and pan.\n *\n * @param {p5.SoundFile|string} soundFile - The p5.SoundFile object or a URL to the audio file.\n * If a URL is provided, it will be used as the `assetKey` for caching unless one is explicitly provided in the options.\n * @param {object} [options={}] - Configuration options for the audio clip. Inherits options from ClipBase.\n *\n * @example\n * // Assuming 'mySound.mp3' is preloaded\n * let audioClip = editor.createAudioClip(mySound, { start: 2000, duration: 5000 });\n * audioClip.addKeyframe('volume', 0, 0); // Start silent\n * audioClip.addKeyframe('volume', 1000, 1); // Fade in\n * audioClip.addKeyframe('volume', 4000, 1); // Hold volume\n * audioClip.addKeyframe('volume', 5000, 0); // Fade out\n */\nclass AudioClip extends ClipBase {\n  constructor(soundFile, options = {}) {\n    if (typeof soundFile === 'string' && !options.assetKey) {\n      options.assetKey = soundFile;\n    }\n\n    const defaultAudioProps = {\n      volume: 1,\n      pan: 0,\n    };\n\n    super({\n      ...options,\n      properties: { ...defaultAudioProps, ...(options.properties || {}) },\n    });\n\n    this.soundFile = soundFile;\n    this._isPlaying = false;\n  }\n\n  /**\n   * Updates the audio playback state and properties based on the timeline's current position.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    super.update(p, relativeTime);\n\n    if (!this.soundFile || typeof this.soundFile.play !== 'function') {\n      return;\n    }\n\n    this.soundFile.setVolume(this.properties.volume);\n    this.soundFile.pan(this.properties.pan);\n\n    const isWithinClipBounds =\n      relativeTime >= 0 && relativeTime < this.duration;\n\n    if (isWithinClipBounds && !this._isPlaying) {\n      const startTimeInSound = relativeTime / 1000;\n      if (startTimeInSound < this.soundFile.duration()) {\n        this.soundFile.play();\n        this.soundFile.jump(startTimeInSound);\n        this._isPlaying = true;\n      }\n    } else if (!isWithinClipBounds && this._isPlaying) {\n      this.soundFile.stop();\n      this._isPlaying = false;\n    }\n  }\n\n  /**\n   * Audio clips do not have a visual representation, so this method is a no-op.\n   * It exists to fulfill the ClipBase interface.\n   * It exists to fulfill the ClipBase interface.\n   */\n  render() {\n    // Audio clips are not rendered visually.\n  }\n}\n\nexport default AudioClip;\n","import ClipBase from './ClipBase.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'blob:', 'data:'];\n\n/**\n * @class Hotspot\n * @description Represents a clickable area on a video clip.\n * This is a helper class used internally by VideoClip.\n */\nclass Hotspot {\n  constructor(options = {}) {\n    this.x = options.x || 0; // Center x, relative to the video's center\n    this.y = options.y || 0; // Center y, relative to the video's center\n    this.width = options.width || 100;\n    this.height = options.height || 50;\n    this.start = options.start || 0; // Start time relative to the video clip's start, in ms\n    this.duration = options.duration || 1000; // Duration in ms\n    this.onClick = options.onClick || (() => {});\n  }\n\n  /**\n   * Checks if a point is inside the hotspot's bounds.\n   * The coordinates are relative to the video clip's center.\n   * @param {number} px - The x-coordinate of the point to check.\n   * @param {number} py - The y-coordinate of the point to check.\n   * @returns {boolean} True if the point is inside the hotspot.\n   */\n  isHit(px, py) {\n    // Assuming imageMode(CENTER)\n    const halfW = this.width / 2;\n    const halfH = this.height / 2;\n    return (\n      px >= this.x - halfW &&\n      px <= this.x + halfW &&\n      py >= this.y - halfH &&\n      py <= this.y + halfH\n    );\n  }\n}\n\n/**\n * Represents a video clip that can be placed on the timeline.\n * Manages the playback and synchronization of an HTML5 video element.\n */\nclass VideoClip extends ClipBase {\n  /**\n   * @param {string} videoSrc - The source URL of the video.\n   * @param {object} options - The options for the clip, passed to ClipBase.\n   */\n  constructor(videoSrc, options = {}) {\n    super(options);\n\n    // Explicitly block javascript: URLs before attempting to parse.\n    if (\n      typeof videoSrc === 'string' &&\n      videoSrc.trim().toLowerCase().startsWith('javascript:')\n    ) {\n      ErrorHandler.critical(\n        `Unsafe video protocol: javascript:. Only safe protocols are allowed.`\n      );\n    }\n\n    try {\n      const url = new URL(videoSrc, document.baseURI);\n      if (!ALLOWED_PROTOCOLS.includes(url.protocol)) {\n        ErrorHandler.critical(\n          `Unsafe video protocol: ${url.protocol}. Only safe protocols are allowed.`\n        );\n      }\n    } catch (e) {\n      ErrorHandler.critical(`Invalid video source URL: ${videoSrc}`, e);\n    }\n\n    this.videoSrc = videoSrc;\n    this.isPlaying = false;\n    this.videoElement = null; // Element will be created lazily\n\n    // Add width and height to the animatable properties, with defaults.\n    this.properties.width = options.width || 1920; // Default to common video width\n    this.properties.height = options.height || 1080; // Default to common video height\n\n    this.hotspots = [];\n  }\n\n  /**\n   * @private\n   * Creates the video element and sets its initial properties.\n   * This is called lazily to avoid creating DOM elements unnecessarily.\n   */\n  _initElement() {\n    if (this.videoElement) return;\n\n    this.videoElement = document.createElement('video');\n    this.videoElement.src = this.videoSrc;\n    this.videoElement.preload = 'auto';\n    this.videoElement.muted = true; // Essential for browser autoplay policies\n    this.videoElement.playsInline = true; // Essential for mobile playback\n  }\n\n  /**\n   * Updates the video's state based on the timeline's current time.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    this._initElement(); // Ensure element exists\n    super.update(p, relativeTime);\n\n    // Synchronize video time with timeline time.\n    const targetTime = relativeTime / 1000;\n    const timeDifference = Math.abs(this.videoElement.currentTime - targetTime);\n    if (timeDifference > 0.05 || this.videoElement.paused) {\n      this.videoElement.currentTime = targetTime;\n    }\n\n    const isActive = relativeTime >= 0 && relativeTime < this.duration;\n    if (isActive && !this.isPlaying) {\n      const playPromise = this.videoElement.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(() => {\n          // Autoplay was prevented.\n        });\n      }\n      this.isPlaying = true;\n    } else if (!isActive && this.isPlaying) {\n      this.videoElement.pause();\n      this.isPlaying = false;\n    }\n  }\n\n  /**\n   * Renders the video frame to the p5.js canvas if the clip is active.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  /**\n   * Adds a clickable hotspot to the video clip.\n   * @param {object} options - Configuration for the hotspot.\n   * @param {number} options.x - Center x-coordinate, relative to the video's center.\n   * @param {number} options.y - Center y-coordinate, relative to the video's center.\n   * @param {number} options.width - Width of the hotspot.\n   * @param {number} options.height - Height of the hotspot.\n   * @param {number} options.start - Start time, relative to the clip's start, in ms.\n   * @param {number} options.duration - Duration of the hotspot, in ms.\n   * @param {Function} options.onClick - The callback function to execute when clicked.\n   * @returns {this} The current VideoClip instance for chaining.\n   */\n  addHotspot(options = {}) {\n    this.hotspots.push(new Hotspot(options));\n    return this;\n  }\n\n  /**\n   * Checks if a click at the given canvas coordinates hits any active hotspot.\n   * @internal\n   * @param {p5} p - The p5 instance.\n   * @param {number} canvasX - The mouseX coordinate on the canvas.\n   * @param {number} canvasY - The mouseY coordinate on the canvas.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  checkClick(p, canvasX, canvasY, relativeTime) {\n    // This simple implementation does not account for parent clip rotation or scale.\n    // It assumes the video clip is only translated.\n    const clipCanvasX = this.properties.x;\n    const clipCanvasY = this.properties.y;\n\n    // Convert canvas coordinates to be relative to the clip's center.\n    const relativeX = canvasX - clipCanvasX;\n    const relativeY = canvasY - clipCanvasY;\n\n    for (const hotspot of this.hotspots) {\n      const isTimeActive =\n        relativeTime >= hotspot.start &&\n        relativeTime < hotspot.start + hotspot.duration;\n\n      if (isTimeActive && hotspot.isHit(relativeX, relativeY)) {\n        hotspot.onClick();\n        // Stop after the first hit to prevent multiple triggers.\n        return true;\n      }\n    }\n    return false;\n  }\n\n  render(p, relativeTime) {\n    this._initElement(); // Ensure element exists\n    super.render(p, relativeTime);\n\n    if (this.videoElement && this.videoElement.readyState >= 3) {\n      p.imageMode(p.CENTER);\n      p.image(\n        this.videoElement,\n        0,\n        0,\n        this.properties.width,\n        this.properties.height\n      );\n    }\n\n    // --- Render Hotspots (for debugging/visualization) ---\n    // Make sure we are in a p5.js environment with drawing capabilities\n    if (p.rectMode) {\n      p.push();\n      p.rectMode(p.CENTER);\n      p.stroke('rgba(255, 0, 0, 0.75)');\n      p.strokeWeight(2);\n      p.noFill();\n      for (const hotspot of this.hotspots) {\n        const isTimeActive =\n          relativeTime >= hotspot.start &&\n          relativeTime < hotspot.start + hotspot.duration;\n        if (isTimeActive) {\n          p.rect(hotspot.x, hotspot.y, hotspot.width, hotspot.height);\n        }\n      }\n      p.pop();\n    }\n    // --- End Hotspot Rendering ---\n\n    p.pop();\n  }\n}\n\nexport default VideoClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class SlideShowClip\n * @extends ClipBase\n * @description A special clip type that acts as a container for a sequence of slides.\n * Each slide can contain its own set of clips. Navigation between slides is controlled\n * by `next()` and `previous()` methods, making it suitable for presentations.\n */\nclass SlideShowClip extends ClipBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - The configuration object for the clip.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.slides = [];\n    this.currentSlideIndex = 0;\n    this.slideActivationTime = 0;\n  }\n\n  /**\n   * Adds a new slide to the slideshow. A slide is an array of clips.\n   * @param {ClipBase[]} [clips=[]] - An array of clips that make up this slide.\n   * @returns {this} The current SlideShowClip instance for chaining.\n   * @example\n   * const slideShow = editor.createSlideShowClip({ duration: 30 });\n   * const slide1Clips = [\n   *   editor.createTextClip('Slide 1', { properties: { x: 100, y: 100 } }),\n   * ];\n   * slideShow.addSlide(slide1Clips);\n   */\n  addSlide(clips = []) {\n    this.slides.push(clips);\n    if (this.timeline) {\n      clips.forEach((clip) => {\n        clip.timeline = this.timeline;\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Activates a slide at a specific index and resets its internal animation clock.\n   * @private\n   * @param {number} index - The index of the slide to activate.\n   */\n  _activateSlide(index) {\n    this.currentSlideIndex = index;\n    if (this.timeline) {\n      // Record the time (relative to the slideshow's start) that this slide became active.\n      // This allows animations within the slide to play relative to this moment.\n      this.slideActivationTime = this.timeline.time - this.start;\n    }\n  }\n\n  /**\n   * Navigates to the next slide.\n   */\n  next() {\n    if (this.currentSlideIndex < this.slides.length - 1) {\n      this._activateSlide(this.currentSlideIndex + 1);\n    }\n  }\n\n  /**\n   * Navigates to the previous slide.\n   */\n  previous() {\n    if (this.currentSlideIndex > 0) {\n      this._activateSlide(this.currentSlideIndex - 1);\n    }\n  }\n\n  /**\n   * Updates the properties of the slideshow container and the clips of the active slide.\n   * @internal\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the slideshow's duration.\n   */\n  update(p, relativeTime) {\n    super.update(p, relativeTime); // Update container properties (e.g., position, scale)\n\n    const activeSlide = this.slides[this.currentSlideIndex];\n    if (activeSlide) {\n      const timeSinceSlideActivation = relativeTime - this.slideActivationTime;\n      activeSlide.forEach((clip) => {\n        // Update each clip on the current slide with a time relative to when the slide was shown.\n        clip.update(p, timeSinceSlideActivation);\n      });\n    }\n  }\n\n  /**\n   * Renders the currently active slide and its clips.\n   * This method is called by the RenderEngine.\n   * @internal\n   * @param {p5} p - The p5.js instance or a p5.Graphics object.\n   */\n  render(p) {\n    // First, apply the transformations of the slideshow container itself.\n    // super.render() handles the p.push() and transform operations.\n    super.render(p);\n\n    const activeSlide = this.slides[this.currentSlideIndex];\n    if (activeSlide) {\n      // Sort clips by layer, just like the main render engine.\n      const sortedClips = [...activeSlide].sort((a, b) => a.layer - b.layer);\n\n      // Render each clip within the current slide.\n      // The RenderEngine normally handles the push/pop for each clip. Since we are\n      // rendering these \"sub-clips\" manually, we must do it here.\n      sortedClips.forEach((clip) => {\n        clip.render(p); // This will do its own p.push() and transformations.\n        p.pop(); // We must provide the matching pop.\n      });\n    }\n  }\n}\n\nexport default SlideShowClip;\n","/**\n * @class TimelineUI\n * @description Renders and manages the interactive timeline interface.\n */\nclass TimelineUI {\n  /**\n   * @constructor\n   * @param {object} editor - The main p5.videoeditor instance.\n   * @param {HTMLElement} container - The HTML element to mount the UI into.\n   */\n  constructor(editor, container) {\n    this.editor = editor;\n    this.timeline = editor.timeline;\n    this.container = container;\n    this.isDragging = false;\n    this.draggedClip = null;\n    this.dragStartX = 0;\n    this.originalClipStart = 0;\n\n    this.view = {\n      width: this.container.clientWidth,\n      height: 200, // Default height\n      scale: 50, // 50 pixels per second\n    };\n    this.colors = {\n      background: '#282828',\n      ruler: '#333333',\n      text: '#DDDDDD',\n      clip: '#4A90E2',\n      playhead: '#FF0000',\n    };\n    this.layout = {\n      rulerHeight: 30,\n      trackHeight: 25,\n      trackGap: 5,\n    };\n\n    this._createDOMElements();\n    this._attachEventListeners();\n  }\n\n  /**\n   * @private\n   * Creates the necessary DOM elements for the timeline UI.\n   */\n  _createDOMElements() {\n    this.uiContainer = document.createElement('div');\n    this.uiContainer.className = 'p5ve-timeline-ui';\n    this.container.appendChild(this.uiContainer);\n\n    const sketch = (p) => {\n      this.p = p;\n      p.setup = () => {\n        const canvas = p.createCanvas(this.view.width, this.view.height);\n        canvas.parent(this.uiContainer);\n      };\n      p.draw = () => {\n        this._drawTimeline();\n      };\n    };\n\n    // Instantiate p5 in instance mode\n    new p5(sketch);\n  }\n\n  /**\n   * @private\n   * Attaches event listeners for UI interactions.\n   */\n  _attachEventListeners() {\n    const { p, layout } = this;\n\n    p.mousePressed = () => {\n      // Handle seeking\n      if (p.mouseY < layout.rulerHeight) {\n        this.isDragging = 'seek';\n        this._handleSeek(p.mouseX);\n        return;\n      }\n\n      // Handle seeking\n      if (p.mouseY < layout.rulerHeight) {\n        this.isDragging = 'seek';\n        this._handleSeek(p.mouseX);\n        return;\n      }\n\n      // Handle resizing and dragging\n      const { clip, handle } = this._getClipHandleAt(p.mouseX, p.mouseY);\n      if (clip) {\n        this.isDragging = handle; // 'left', 'right', or 'clip'\n        this.draggedClip = clip;\n        this.dragStartX = p.mouseX;\n        this.originalClipStart = clip.start;\n        this.originalClipDuration = clip.duration;\n      }\n    };\n\n    p.mouseDragged = () => {\n      if (this.isDragging === 'seek') {\n        this._handleSeek(p.mouseX);\n      } else if (this.draggedClip) {\n        const dx = p.mouseX - this.dragStartX;\n        const dTime = this._pxToTime(dx);\n\n        if (this.isDragging === 'clip') {\n          this._handleClipDrag(dTime);\n        } else if (this.isDragging === 'left') {\n          this._handleResizeLeft(dTime);\n        } else if (this.isDragging === 'right') {\n          this._handleResizeRight(dTime);\n        }\n      }\n    };\n\n    p.mouseReleased = () => {\n      this.isDragging = false;\n      this.draggedClip = null;\n    };\n  }\n\n  // --- Interaction Handlers ---\n\n  _handleSeek(mouseX) {\n    const time = this._pxToTime(mouseX);\n    this.timeline.seek(time);\n  }\n\n  _handleClipDrag(dTime) {\n    const newStart = this.originalClipStart + dTime;\n    this.draggedClip.start = Math.max(0, newStart);\n  }\n\n  _handleResizeLeft(dTime) {\n    const newStart = this.originalClipStart + dTime;\n    const newDuration = this.originalClipDuration - dTime;\n    if (newDuration > 100) {\n      // Minimum clip duration\n      this.draggedClip.start = Math.max(0, newStart);\n      this.draggedClip.duration = newDuration;\n    }\n  }\n\n  _handleResizeRight(dTime) {\n    const newDuration = this.originalClipDuration + dTime;\n    if (newDuration > 100) {\n      // Minimum clip duration\n      this.draggedClip.duration = newDuration;\n    }\n  }\n\n  _getClipHandleAt(x, y) {\n    const { timeline, layout } = this;\n    const handleWidth = 8; // px\n\n    for (const clip of timeline.clips) {\n      const clipX = this._timeToPx(clip.start);\n      const clipY =\n        layout.rulerHeight +\n        layout.trackGap +\n        clip.layer * (layout.trackHeight + layout.trackGap);\n      const clipW = this._timeToPx(clip.duration);\n      const clipH = layout.trackHeight;\n\n      if (y >= clipY && y <= clipY + clipH) {\n        if (x >= clipX && x < clipX + handleWidth) {\n          return { clip, handle: 'left' };\n        }\n        if (x > clipX + clipW - handleWidth && x <= clipX + clipW) {\n          return { clip, handle: 'right' };\n        }\n        if (x >= clipX && x <= clipX + clipW) {\n          return { clip, handle: 'clip' };\n        }\n      }\n    }\n    return { clip: null, handle: null };\n  }\n\n  // --- Coordinate Conversion ---\n\n  _timeToPx(time) {\n    return (time / 1000) * this.view.scale;\n  }\n\n  _pxToTime(px) {\n    return (px / this.view.scale) * 1000;\n  }\n\n  // --- Drawing Logic ---\n\n  _drawTimeline() {\n    this.p.background(this.colors.background);\n    this._drawRuler();\n    this._drawClips();\n    this._drawPlayhead();\n  }\n\n  _drawRuler() {\n    const { p, view, layout, colors } = this;\n    p.fill(colors.ruler);\n    p.noStroke();\n    p.rect(0, 0, view.width, layout.rulerHeight);\n\n    p.fill(colors.text);\n    p.textAlign(p.CENTER, p.CENTER);\n    p.textSize(10);\n\n    const increment = 1; // Major tick every 1 second\n    const numTicks = Math.floor(this._pxToTime(view.width) / 1000 / increment);\n\n    for (let i = 0; i <= numTicks; i++) {\n      const time = i * increment;\n      const x = this._timeToPx(time * 1000);\n      p.stroke(colors.text);\n      p.line(x, layout.rulerHeight - 10, x, layout.rulerHeight);\n      p.noStroke();\n      p.text(`${time}s`, x, layout.rulerHeight / 2);\n    }\n  }\n\n  _drawClips() {\n    const { p, timeline, layout, colors } = this;\n    p.noStroke();\n\n    for (const clip of timeline.clips) {\n      const x = this._timeToPx(clip.start);\n      const w = this._timeToPx(clip.duration);\n      const y =\n        layout.rulerHeight +\n        layout.trackGap +\n        clip.layer * (layout.trackHeight + layout.trackGap);\n\n      p.fill(colors.clip);\n      p.rect(x, y, w, layout.trackHeight, 4); // Rounded corners\n\n      p.fill(colors.text);\n      p.textAlign(p.LEFT, p.CENTER);\n      p.text(clip.name || 'Clip', x + 5, y + layout.trackHeight / 2);\n    }\n  }\n\n  _drawPlayhead() {\n    const { p, timeline, view, colors, layout } = this;\n    const x = this._timeToPx(timeline.time);\n\n    if (x >= 0 && x < view.width) {\n      p.stroke(colors.playhead);\n      p.strokeWeight(2);\n      p.line(x, layout.rulerHeight, x, view.height);\n    }\n  }\n\n  /**\n   * Updates and re-renders the timeline UI.\n   * This should be called in the p5.js draw loop.\n   */\n  draw() {\n    // The p5 draw loop is now handling rendering automatically.\n    // This method could be used for other updates if needed.\n  }\n}\n\nexport default TimelineUI;\n","import Timeline from './core/Timeline.js';\nimport PlaybackController from './core/PlaybackController.js';\nimport PerformanceManager from './core/PerformanceManager.js';\nimport ErrorHandler from './utils/ErrorHandler.js';\nimport MemoryManager from './utils/MemoryManager.js';\nimport ClipBase from './clips/ClipBase.js';\nimport TextClip from './clips/TextClip.js';\nimport ShapeClip from './clips/ShapeClip.js';\nimport ImageClip from './clips/ImageClip.js';\nimport AudioClip from './clips/AudioClip.js';\nimport VideoClip from './clips/VideoClip.js';\nimport SlideShowClip from './clips/SlideShowClip.js';\nimport GIF from 'gif.js/src/GIF';\nimport Exporter from './export/Exporter.js';\nimport EffectBase from './effects/EffectBase.js';\nimport TimelineUI from './ui/TimelineUI.js';\n\n/**\n * @class VideoEditor\n * @description The main entry point for users of the p5.videoeditor.js library.\n * It encapsulates the core components like the timeline, playback controls,\n * and managers into a simplified and easy-to-use API.\n *\n * @example\n * // In your p5.js sketch:\n * let editor;\n *\n * function setup() {\n *   createCanvas(1280, 720);\n *   editor = new VideoEditor(p5.instance, { canvas: canvas.elt });\n *\n *   // Create clips and add keyframes using the ergonomic API\n *   editor.createTextClip(\"Hello World\", { start: 1, duration: 5 })\n *     .addKeyframe('x', 0, 100)\n *     .addKeyframe('x', 5000, 500);\n * }\n *\n * async function draw() {\n *   background(0);\n *   editor.update(p5.instance);\n *   await editor.render();\n * }\n */\nclass VideoEditor {\n  /**\n   * @static\n   * @property {ErrorHandler} ErrorHandler - Exposes the static ErrorHandler class for advanced use cases.\n   */\n  static ErrorHandler = ErrorHandler;\n\n  /**\n   * @constructor\n   * @param {p5} p - The p5.js instance. Required for rendering.\n   * @param {object} [options={}] - Configuration options for the editor.\n   * @param {HTMLCanvasElement} [options.canvas=null] - The p5.js canvas element. Required for exporting.\n   * @param {HTMLElement} [options.uiContainer=null] - The container to append the UI controls to.\n   * @param {string} [options.gifWorkerPath=null] - The path to the 'gif.worker.js' file for GIF exporting.\n   * @param {object} [options.performance] - Performance-related settings passed to the PerformanceManager.\n   */\n  constructor(\n    p,\n    {\n      canvas = null,\n      uiContainer = null,\n      timelineUiContainer = null,\n      gifWorkerPath = './gif.worker.js', // Default path for the distributed worker file\n      ...options\n    } = {}\n  ) {\n    if (!p) {\n      throw new Error(\n        'A p5.js instance must be provided to the VideoEditor constructor.'\n      );\n    }\n    this.options = { gifWorkerPath };\n    this.timeline = new Timeline(p, canvas, options);\n    this.playbackController = new PlaybackController(\n      this.timeline,\n      canvas,\n      uiContainer\n    );\n    this.performanceManager = new PerformanceManager(options.performance);\n    this.memoryManager = new MemoryManager();\n\n    this.play = this.playbackController.play.bind(this.playbackController);\n    this.pause = this.playbackController.pause.bind(this.playbackController);\n    this.seek = this.playbackController.seek.bind(this.playbackController);\n\n    // Initialize the UI if a container is provided\n    if (timelineUiContainer) {\n      this.ui = new TimelineUI(this, timelineUiContainer);\n    }\n  }\n\n  /**\n   * Registers a plugin with the editor. This allows for extending the editor's\n   * capabilities with custom effects, transitions, or other features.\n   * @param {object} plugin - The plugin to register. It must have an `onLoad` method.\n   * @example\n   * import MyWipeTransition from './my-wipe-transition.js';\n   * editor.use(MyWipeTransition);\n   */\n  use(plugin) {\n    this.timeline.use(plugin);\n  }\n\n  /**\n   * Exports the timeline animation as a GIF file.\n   * This process is resource-intensive and may take some time.\n   * @param {object} [options={}] - Configuration options for the GIF export.\n   * @param {number} [options.frameRate=15] - The frame rate of the exported GIF.\n   * @param {number} [options.quality=10] - The quality of the GIF encoder. Lower is better.\n   * @param {string} [options.filename='p5.videoeditor-export.gif'] - The filename for the downloaded GIF.\n   * @param {function} [options.onProgress=null] - A callback function that receives the progress (0 to 1).\n   * @returns {Promise<void>} A promise that resolves when the export is complete.\n   * @example\n   * // Basic export\n   * editor.exportGIF();\n   *\n   * // Export with options and progress tracking\n   * editor.exportGIF({\n   *   frameRate: 24,\n   *   quality: 5,\n   *   filename: 'my-animation.gif',\n   *   onProgress: (progress) => {\n   *     console.log(`Export progress: ${Math.round(progress * 100)}%`);\n   *   }\n   * });\n   */\n  async exportGIF({\n    frameRate = 15,\n    quality = 10,\n    filename = 'p5.videoeditor-export.gif',\n    onProgress = null,\n  } = {}) {\n    console.log('Starting GIF export...');\n    const wasPlaying = this.playbackController.isPlaying;\n    const originalTime = this.timeline.time;\n\n    this.pause();\n    this.seek(0);\n\n    const gif = new GIF({\n      workers: 2,\n      quality,\n      workerScript: this.options.gifWorkerPath,\n    });\n\n    const frameDelay = 1000 / frameRate;\n    const totalFrames = Math.floor(this.timeline.duration / frameDelay);\n\n    for (let i = 0; i < totalFrames; i++) {\n      const currentTime = i * frameDelay;\n      this.seek(currentTime);\n      this.update(this.timeline.p);\n      await this.render();\n\n      // addFrame can take a canvas element or a context\n      gif.addFrame(this.timeline.canvas, {\n        copy: true,\n        delay: frameDelay,\n      });\n\n      if (onProgress) {\n        onProgress((i + 1) / totalFrames);\n      }\n    }\n\n    gif.on('finished', (blob) => {\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('GIF export finished.');\n\n      // Restore original state\n      this.seek(originalTime);\n      if (wasPlaying) {\n        this.play();\n      }\n    });\n\n    console.log('Rendering GIF frames...');\n    gif.render();\n  }\n\n  /**\n   * Exports the timeline animation as an MP4 video file.\n   * This process uses FFmpeg compiled to WebAssembly and can be resource-intensive.\n   * @param {object} [options={}] - Configuration options for the MP4 export.\n   * @param {number} [options.frameRate=30] - The frame rate of the exported video.\n   * @param {string} [options.filename='p5.videoeditor-export.mp4'] - The filename for the downloaded video.\n   * @param {function} [options.onProgress=null] - A callback for FFmpeg progress updates (0-100).\n   * @param {function} [options.onLog=null] - A callback for FFmpeg log messages.\n   * @returns {Promise<void>} A promise that resolves when the export is complete.\n   * @example\n   * // Basic export\n   * editor.exportMP4();\n   *\n   * // Export with options and progress tracking\n   * editor.exportMP4({\n   *   frameRate: 60,\n   *   filename: 'my-video.mp4',\n   *   onProgress: (progress) => {\n   *     console.log(`FFmpeg Progress: ${progress}%`);\n   *   },\n   *   onLog: (message) => {\n   *     console.log(`FFmpeg Log: ${message}`);\n   *   }\n   * });\n   */\n  async exportMP4({\n    frameRate = 30,\n    filename = 'p5.videoeditor-export.mp4',\n    onProgress = null,\n    onLog = null,\n  } = {}) {\n    console.log('Starting MP4 export...');\n    const wasPlaying = this.playbackController.isPlaying;\n    const originalTime = this.timeline.time;\n    let exporter = null;\n\n    try {\n      this.pause();\n      this.seek(0);\n\n      const frames = [];\n      const frameDelay = 1000 / frameRate;\n      const totalFrames = Math.floor(this.timeline.duration / frameDelay);\n\n      if (onLog) onLog('Generating frames...');\n\n      for (let i = 0; i < totalFrames; i++) {\n        const currentTime = i * frameDelay;\n        this.seek(currentTime);\n        this.update(this.timeline.p);\n        await this.render();\n        // Capture frame as a WebP Data URL for efficiency\n        const frameDataURL = this.timeline.canvas.toDataURL('image/webp', 0.9);\n        frames.push(frameDataURL);\n        // Provide a simple progress for the frame generation part\n        if (onProgress) onProgress(((i + 1) / totalFrames) * 10); // Report up to 10% progress for frame gen\n      }\n\n      if (onLog) onLog('Frames generated. Initializing exporter...');\n\n      await new Promise((resolve, reject) => {\n        exporter = new Exporter({\n          onProgress,\n          onLog,\n          onError: reject,\n          onComplete: (videoBlob) => {\n            const url = URL.createObjectURL(videoBlob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            console.log('MP4 export finished.');\n            resolve();\n          },\n        });\n\n        exporter.export(frames, frameRate);\n      });\n    } catch (error) {\n      console.error('MP4 export failed:', error);\n      ErrorHandler.showUserFriendlyError(error);\n    } finally {\n      // Cleanup and restore state\n      if (exporter) {\n        exporter.terminate();\n      }\n      this.seek(originalTime);\n      if (wasPlaying) {\n        this.play();\n      }\n    }\n  }\n\n  /**\n   * Creates a video clip and adds it to the timeline.\n   * @param {string} videoSrc - The source URL of the video file.\n   * @param {object} [options={}] - Configuration options for the VideoClip.\n   * @returns {VideoClip} The newly created VideoClip instance for chaining.\n   * @example\n   * editor.createVideoClip('./assets/my-video.mp4', { start: 0, duration: 10 });\n   */\n  createVideoClip(videoSrc, options = {}) {\n    const clip = new VideoClip(videoSrc, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a slideshow clip and adds it to the timeline.\n   * This clip can contain other clips and be controlled with next() and previous().\n   * @param {object} [options={}] - Configuration options for the SlideShowClip.\n   * @returns {SlideShowClip} The newly created SlideShowClip instance for chaining.\n   * @example\n   * const slideshow = editor.createSlideShowClip({ duration: 20 });\n   * slideshow.addSlide([ editor.createTextClip('First Slide') ]);\n   * slideshow.addSlide([ editor.createTextClip('Second Slide') ]);\n   */\n  createSlideShowClip(options = {}) {\n    const clip = new SlideShowClip(options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a text clip and adds it to the timeline.\n   * @param {string} text - The text content of the clip.\n   * @param {object} [options={}] - Configuration options for the TextClip.\n   * @returns {TextClip} The newly created TextClip instance for chaining.\n   * @example\n   * editor.createTextClip('Hello', { start: 1, duration: 3, properties: { y: 100 } })\n   *   .addKeyframe('x', 0, 50)\n   *   .addKeyframe('x', 3000, 250);\n   */\n  createTextClip(text, options = {}) {\n    const clip = new TextClip(text, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a shape clip and adds it to the timeline.\n   * @param {string} shapeType - The type of shape to create (e.g., 'rect', 'circle').\n   * @param {object} [options={}] - Configuration options for the ShapeClip.\n   * @returns {ShapeClip} The newly created ShapeClip instance for chaining.\n   * @example\n   * editor.createShapeClip('rect', { duration: 5, properties: { width: 100, fill: 'red' } });\n   */\n  createShapeClip(shapeType, options = {}) {\n    const clip = new ShapeClip(shapeType, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates an image clip and adds it to the timeline.\n   * @param {p5.Image} image - The preloaded p5.Image object.\n   * @param {object} [options={}] - Configuration options for the ImageClip.\n   * @returns {ImageClip} The newly created ImageClip instance for chaining.\n   * @example\n   * // In preload: myImage = p.loadImage('./assets/logo.png');\n   * // In setup:\n   * editor.createImageClip(myImage, { duration: 4 });\n   */\n  createImageClip(image, options = {}) {\n    const clip = new ImageClip(image, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates an audio clip and adds it to the timeline.\n   * @param {p5.SoundFile} soundFile - The preloaded p5.SoundFile object.\n   * @param {object} [options={}] - Configuration options for the AudioClip.\n   * @returns {AudioClip} The newly created AudioClip instance for chaining.\n   * @example\n   * // In preload: mySound = p.loadSound('./assets/music.mp3');\n   * // In setup:\n   * editor.createAudioClip(mySound, { start: 0, duration: 15 });\n   */\n  createAudioClip(soundFile, options = {}) {\n    const clip = new AudioClip(soundFile, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Caches an asset manually in the MemoryManager.\n   * @param {string} key - The unique key to store the asset under.\n   * @param {*} asset - The asset to cache (e.g., p5.Image, p5.SoundFile).\n   */\n  cacheAsset(key, asset) {\n    this.memoryManager.addAsset(key, asset);\n  }\n\n  /**\n   * Updates the state of the timeline and all active clips.\n   * @param {p5} p - The p5.js instance.\n   */\n  update(p) {\n    this.performanceManager.monitor(p);\n    this.timeline.update(p);\n\n    const activeAssetKeys = this.timeline\n      .getActiveClips()\n      .map((clip) => clip.assetKey)\n      .filter((key) => key);\n    this.memoryManager.clearUnusedAssets(activeAssetKeys);\n  }\n\n  /**\n   * Renders the current state of the timeline to the canvas.\n   */\n  async render() {\n    await this.timeline.render();\n  }\n\n  /**\n   * Handles mouse press events to check for interactions like hotspot clicks.\n   * This method should be called from the p5.js `mousePressed()` function.\n   * @param {p5} p - The p5.js instance, which provides mouseX and mouseY.\n   * @example\n   * function mousePressed() {\n   *   editor.handleMousePressed(p);\n   * }\n   */\n  handleMousePressed(p) {\n    const activeClips = this.timeline.getActiveClips();\n    // Iterate in reverse order so we check the topmost clips first.\n    for (let i = activeClips.length - 1; i >= 0; i--) {\n      const clip = activeClips[i];\n      if (clip instanceof VideoClip) {\n        const relativeTime = this.timeline.time - clip.start;\n        const wasClicked = clip.checkClick(p, p.mouseX, p.mouseY, relativeTime);\n        if (wasClicked) {\n          // Stop after the first clip that handles the click.\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Displays a user-friendly error message.\n   * @param {Error} error - The error object to display.\n   */\n  showUserFriendlyError(error) {\n    ErrorHandler.showUserFriendlyError(error);\n  }\n}\n\n// Export all the public classes for advanced usage\nexport {\n  VideoEditor,\n  Timeline,\n  PlaybackController,\n  PerformanceManager,\n  MemoryManager,\n  ErrorHandler,\n  ClipBase,\n  TextClip,\n  ShapeClip,\n  ImageClip,\n  AudioClip,\n  VideoClip,\n  SlideShowClip,\n  EffectBase,\n};\n"],"names":["PluginManager","constructor","this","plugins","register","plugin","name","trim","type","onLoad","some","p","console","warn","push","RenderEngine","canvas","width","height","sceneBuffer","createGraphics","WEBGL","effectBuffer","shaders","shaderPromises","postProcessingEffects","loadShader","key","fragUrl","promise","shader","log","render","clipsToRender","activeTransitions","time","_renderScene","finalBuffer","_applyPostProcessing","image","clear","clipsInTransition","Set","transition","add","fromClip","toClip","standaloneClips","filter","clip","has","sort","a","b","layer","relativeTime","start","effect","effects","apply","pop","length","sourceBuffer","destinationBuffer","i","setUniform","uniforms","value","Object","entries","rect","ErrorHandler","critical","message","originalError","error","Error","warning","showUserFriendlyError","EffectBase","duration","_clip","_p","_relativeTime","GPUEffectBase","options","super","renderEngine","getUniforms","BlurEffect","radius","resolution","Math","max","u_radius","u_direction","u_resolution","BlurEffectPlugin","timeline","registerEffectType","TransitionBase","getProgress","_progress","CrossFadeTransition","progress","fromClipOpacity","properties","opacity","toClipOpacity","fromRelativeTime","toRelativeTime","CrossFadeTransitionPlugin","registerTransitionType","FadeInEffect","t","lerp","FadeInEffectPlugin","FadeOutEffect","FadeOutEffectPlugin","WiggleEffect","frequency","amplitude","baseOptions","millis","noiseX","noise","noiseY","offsetX","offsetY","x","y","builtInPlugins","Timeline","clips","transitions","isPlaying","isBatching","dirtyClips","needsClipSorting","pluginManager","transitionTypes","Map","effectTypes","_loadBuiltInPlugins","use","addClip","transitionClass","set","effectClass","addTransition","TransitionClass","get","batch","callback","finalizeBatch","forEach","finalizeChanges","getActiveClips","activeClips","_getFrameState","clipsToProcess","update","deltaTime","play","pause","seek","FrameRecorder","toDataURL","frames","captureFrame","frameDataUrl","stop","getFrames","Exporter","onProgress","onLog","onError","onComplete","worker","Worker","URL","document","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","src","baseURI","onmessage","handleWorkerMessage","bind","data","videoBlob","Blob","buffer","frameRate","audioBlob","postMessage","terminate","PlaybackController","container","frameRecorder","exporter","handleExportProgress","handleExportComplete","handleExportError","_createUI","wrapper","createElement","style","padding","backgroundColor","borderTop","playButton","textContent","onclick","appendChild","exportButton","marginLeft","startExportProcess","exportStatus","fontFamily","display","disabled","frameDuration","totalDuration","Promise","resolve","setTimeout","export","url","createObjectURL","download","body","click","removeChild","revokeObjectURL","_resetUIState","PerformanceManager","frameRateThreshold","enabled","monitor","p5","currentFrameRate","toFixed","enable","disable","MemoryManager","cache","addAsset","asset","getAsset","clearUnusedAssets","activeAssetKeys","activeKeysSet","clearedCount","keys","delete","clearAll","Keyframe","easing","Easing","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","setValueByPath","obj","path","split","lastKey","reduce","acc","ClipBase","assetKey","rotation","scale","initialProperties","JSON","parse","stringify","keyframes","addKeyframe","property","addEffect","EffectClass","prop","prototype","hasOwnProperty","call","_calculateValue","kfs","part","low","high","prevKeyframeIndex","mid","floor","prevKeyframe","nextKeyframe","easedT","from","to","Color","lerpColor","translate","rotate","TextClip","text","fontSize","fill","align","textSize","textAlign","CENTER","ShapeClip","shapeType","stroke","strokeWeight","rectMode","ellipseMode","ellipse","ImageClip","imageMode","AudioClip","soundFile","volume","pan","_isPlaying","setVolume","isWithinClipBounds","startTimeInSound","jump","ALLOWED_PROTOCOLS","Hotspot","onClick","isHit","px","py","halfW","halfH","VideoClip","videoSrc","toLowerCase","startsWith","includes","protocol","e","videoElement","hotspots","_initElement","preload","muted","playsInline","targetTime","abs","currentTime","paused","isActive","playPromise","undefined","catch","addHotspot","checkClick","canvasX","canvasY","relativeX","relativeY","hotspot","readyState","noFill","SlideShowClip","slides","currentSlideIndex","slideActivationTime","addSlide","_activateSlide","index","next","previous","activeSlide","timeSinceSlideActivation","TimelineUI","editor","isDragging","draggedClip","dragStartX","originalClipStart","view","clientWidth","colors","background","ruler","playhead","layout","rulerHeight","trackHeight","trackGap","_createDOMElements","_attachEventListeners","uiContainer","className","setup","createCanvas","parent","draw","_drawTimeline","mousePressed","mouseY","_handleSeek","mouseX","handle","_getClipHandleAt","originalClipDuration","mouseDragged","dx","dTime","_pxToTime","_handleClipDrag","_handleResizeLeft","_handleResizeRight","mouseReleased","newStart","newDuration","clipX","_timeToPx","clipY","clipW","clipH","_drawRuler","_drawClips","_drawPlayhead","noStroke","numTicks","line","w","LEFT","static","timelineUiContainer","gifWorkerPath","playbackController","performanceManager","performance","memoryManager","ui","exportGIF","quality","filename","wasPlaying","originalTime","gif","GIF","workers","workerScript","frameDelay","totalFrames","addFrame","copy","delay","on","blob","exportMP4","frameDataURL","reject","createVideoClip","createSlideShowClip","createTextClip","createShapeClip","createImageClip","createAudioClip","cacheAsset","map","handleMousePressed"],"mappings":"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"}