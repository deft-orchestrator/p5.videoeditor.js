{"version":3,"file":"p5.videoeditor.min.js","sources":["../src/core/PluginManager.js","../src/core/RenderEngine.js","../src/utils/ErrorHandler.js","../src/core/Timeline.js","../src/core/FrameRecorder.js","../src/export/Exporter.js","../src/core/PlaybackController.js","../src/core/PerformanceManager.js","../src/utils/MemoryManager.js","../src/core/Keyframe.js","../src/utils/Easing.js","../src/clips/ClipBase.js","../src/clips/TextClip.js","../src/clips/ShapeClip.js","../src/clips/ImageClip.js","../src/clips/AudioClip.js","../src/clips/VideoClip.js","../src/clips/SlideShowClip.js","../src/effects/EffectBase.js","../src/p5.videoeditor.js"],"sourcesContent":["/**\n * @class PluginManager\n * @description Manages the registration and validation of all plugins.\n */\nexport class PluginManager {\n  constructor() {\n    /**\n     * @type {Array<object>}\n     */\n    this.plugins = [];\n  }\n\n  /**\n   * @method register\n   * @description Registers and validates a plugin.\n   * @param {object} plugin - The plugin object to register.\n   * @property {string} plugin.name - The name of the plugin.\n   * @property {string} plugin.type - The type of the plugin (e.g., 'effect', 'transition').\n   * @property {function} plugin.onLoad - The function to be called when the plugin is loaded.\n   */\n  register(plugin) {\n    if (!plugin) {\n      console.warn('Invalid plugin: Plugin object is null or undefined.');\n      return;\n    }\n\n    if (typeof plugin.name !== 'string' || plugin.name.trim() === '') {\n      console.warn(\n        'Invalid plugin: \"name\" must be a non-empty string.',\n        plugin\n      );\n      return;\n    }\n\n    if (typeof plugin.type !== 'string' || plugin.type.trim() === '') {\n      console.warn(\n        'Invalid plugin: \"type\" must be a non-empty string.',\n        plugin\n      );\n      return;\n    }\n\n    if (typeof plugin.onLoad !== 'function') {\n      console.warn('Invalid plugin: \"onLoad\" must be a function.', plugin);\n      return;\n    }\n\n    if (this.plugins.some((p) => p.name === plugin.name)) {\n      console.warn(`Plugin with name \"${plugin.name}\" is already registered.`);\n      return;\n    }\n\n    this.plugins.push(plugin);\n  }\n}\n","/**\n * @class RenderEngine\n * @description Handles all WebGL-based drawing operations.\n * Manages a multi-pass rendering pipeline for applying post-processing effects.\n */\nclass RenderEngine {\n  /**\n   * @constructor\n   * @param {p5} p - The p5.js instance used for drawing.\n   * @param {HTMLCanvasElement} canvas - The main canvas element.\n   */\n  constructor(p, canvas) {\n    this.p = p;\n    this.canvas = canvas;\n    this.width = canvas.width;\n    this.height = canvas.height;\n\n    // Create off-screen graphics buffers for multi-pass rendering\n    this.sceneBuffer = p.createGraphics(this.width, this.height, p.WEBGL);\n    this.effectBuffer = p.createGraphics(this.width, this.height, p.WEBGL);\n\n    this.shaders = {}; // Cache for compiled shaders\n    this.shaderPromises = {}; // Cache for shader loading promises\n    this.postProcessingEffects = []; // Queue of effects for the current frame\n  }\n\n  /**\n   * Loads a shader and caches the loading promise.\n   * @param {string} key - A unique key to identify the shader.\n   * @param {string} fragUrl - The URL to the fragment shader file.\n   */\n  loadShader(key, fragUrl) {\n    if (this.shaders[key] || this.shaderPromises[key]) {\n      return;\n    }\n    const vertUrl = 'src/shaders/passthrough.vert';\n    const promise = this.p.loadShader(vertUrl, fragUrl, (shader) => {\n      this.shaders[key] = shader;\n      delete this.shaderPromises[key];\n      console.log(`Shader \"${key}\" loaded.`);\n    });\n    this.shaderPromises[key] = promise;\n  }\n\n  /**\n   * Orchestrates the multi-pass rendering process.\n   * @param {Set<ClipBase>} clipsToRender - A Set of all clips that should be rendered this frame.\n   * @param {TransitionBase[]} activeTransitions - A list of transitions currently active.\n   * @param {number} time - The current time of the timeline.\n   */\n  async render(clipsToRender, activeTransitions, time) {\n    // Pass 1: Render the scene of clips and transitions to a buffer.\n    this._renderScene(clipsToRender, activeTransitions, time);\n\n    // Pass 2: Apply post-processing effects, ping-ponging between buffers.\n    const finalBuffer = await this._applyPostProcessing();\n\n    // Pass 3: Draw the final result to the main canvas.\n    this.p.image(finalBuffer, 0, 0);\n\n    // Clear the effects queue for the next frame.\n    this.postProcessingEffects = [];\n  }\n\n  /**\n   * @private\n   * Renders all active clips and transitions to the main scene buffer.\n   */\n  _renderScene(clipsToRender, activeTransitions, time) {\n    this.sceneBuffer.clear();\n    this.sceneBuffer.push();\n\n    const clipsInTransition = new Set();\n    for (const transition of activeTransitions) {\n      clipsInTransition.add(transition.fromClip);\n      clipsInTransition.add(transition.toClip);\n    }\n\n    const standaloneClips = [...clipsToRender].filter(\n      (clip) => !clipsInTransition.has(clip)\n    );\n    standaloneClips.sort((a, b) => a.layer - b.layer);\n\n    for (const clip of standaloneClips) {\n      const relativeTime = time - clip.start;\n      for (const effect of clip.effects) {\n        effect.apply(clip, this.sceneBuffer, relativeTime);\n      }\n      clip.render(this.sceneBuffer);\n    }\n\n    for (const transition of activeTransitions) {\n      transition.render(this.sceneBuffer, time);\n    }\n\n    this.sceneBuffer.pop();\n  }\n\n  /**\n   * @private\n   * Applies all queued post-processing effects to the scene buffer.\n   * @returns {p5.Graphics} The final graphics buffer with all effects applied.\n   */\n  async _applyPostProcessing() {\n    if (this.postProcessingEffects.length === 0) {\n      return this.sceneBuffer;\n    }\n\n    let sourceBuffer = this.sceneBuffer;\n    let destinationBuffer = this.effectBuffer;\n\n    for (let i = 0; i < this.postProcessingEffects.length; i++) {\n      const effect = this.postProcessingEffects[i];\n\n      if (this.shaderPromises[effect.type]) {\n        await this.shaderPromises[effect.type];\n      }\n\n      const shader = this.shaders[effect.type];\n      if (shader) {\n        destinationBuffer.shader(shader);\n        shader.setUniform('u_texture', sourceBuffer);\n\n        if (effect.uniforms) {\n          for (const [key, value] of Object.entries(effect.uniforms)) {\n            shader.setUniform(key, value);\n          }\n        }\n\n        destinationBuffer.rect(\n          -this.width / 2,\n          -this.height / 2,\n          this.width,\n          this.height\n        );\n\n        // Ping-pong: swap buffers for the next pass\n        [sourceBuffer, destinationBuffer] = [destinationBuffer, sourceBuffer];\n      }\n    }\n\n    // The final rendered image is in the last sourceBuffer\n    return sourceBuffer;\n  }\n}\n\nexport default RenderEngine;\n","/**\n * @class ErrorHandler\n * @description Provides a centralized way to handle and display errors and warnings.\n */\nclass ErrorHandler {\n  /**\n   * Handles critical errors that might stop the execution.\n   * Logs the error and throws it to stop the script.\n   * @param {string} message - The error message.\n   * @param {Error} [originalError] - The original error object.\n   */\n  static critical(message, originalError) {\n    console.error(`[p5.videoeditor.js] Critical Error: ${message}`);\n    if (originalError) {\n      console.error('Original Error:', originalError);\n    }\n    throw new Error(`[p5.videoeditor.js] ${message}`);\n  }\n\n  /**\n   * Handles warnings for non-critical issues.\n   * Logs a warning message to the console.\n   * @param {string} message - The warning message.\n   */\n  static warning(message) {\n    console.warn(`[p5.videoeditor.js] Warning: ${message}`);\n  }\n\n  /**\n   * Displays a user-friendly error message.\n   * In a real UI, this might show a modal or a notification.\n   * For now, it will just log a formatted error.\n   * @param {Error} error - The error object to display.\n   */\n  static showUserFriendlyError(error) {\n    // For now, just log a friendly message.\n    // This can be expanded to show an overlay on the p5.js canvas.\n    console.error(`[p5.videoeditor.js] An error occurred: ${error.message}`);\n  }\n}\n\nexport default ErrorHandler;\n","import { PluginManager } from './PluginManager.js';\nimport RenderEngine from './RenderEngine.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\n/**\n * @class Timeline\n * @description Manages the collection of clips, their timing, and the overall playback state.\n * It is the central component that orchestrates the animation. This class is typically\n * accessed via `editor.timeline`.\n */\nclass Timeline {\n  /**\n   * @constructor\n   * @param {p5} p - The p5.js instance.\n   * @param {HTMLCanvasElement} canvas - The canvas element.\n   * @param {object} [options={}] - Configuration options for the timeline.\n   * @param {number} [options.duration=10000] - The total duration of the timeline in milliseconds.\n   */\n  constructor(p, canvas, { duration = 10000 } = {}) {\n    this.duration = duration;\n    this.clips = [];\n    this.transitions = [];\n    this.time = 0;\n    this.isPlaying = false;\n\n    this.isBatching = false;\n    this.dirtyClips = new Set();\n    this.needsClipSorting = false;\n\n    this.renderEngine = new RenderEngine(p, canvas);\n    this.pluginManager = new PluginManager();\n    this.transitionTypes = new Map();\n    this.effectTypes = new Map();\n    this._pluginsLoaded = false;\n  }\n\n  /**\n   * Registers a plugin with the timeline.\n   * @param {object} plugin - The plugin to register.\n   * @example\n   * import MyCustomPlugin from './plugins/my-plugin.js';\n   * editor.timeline.use(new MyCustomPlugin());\n   */\n  use(plugin) {\n    this.pluginManager.register(plugin);\n  }\n\n  /**\n   * Adds a clip to the timeline. Typically called by the `VideoEditor` factory methods.\n   * @param {ClipBase} clip - The clip instance to add.\n   */\n  addClip(clip) {\n    this.clips.push(clip);\n    clip.timeline = this;\n\n    if (this.isBatching) {\n      this.needsClipSorting = true;\n    } else {\n      this.clips.sort((a, b) => a.layer - b.layer);\n    }\n  }\n\n  /**\n   * Registers a new transition type with the timeline.\n   * @param {string} name - The name of the transition (e.g., 'crossfade').\n   * @param {TransitionBase} transitionClass - The class constructor for the transition.\n   */\n  registerTransitionType(name, transitionClass) {\n    this.transitionTypes.set(name, transitionClass);\n  }\n\n  /**\n   * Registers a new effect type with the timeline.\n   * @param {string} name - The name of the effect (e.g., 'wiggle').\n   * @param {EffectBase} effectClass - The class constructor for the effect.\n   */\n  registerEffectType(name, effectClass) {\n    this.effectTypes.set(name, effectClass);\n  }\n\n  /**\n   * Creates and adds a transition between two clips.\n   * @param {object} options - The configuration for the transition.\n   * @param {ClipBase} options.fromClip - The clip to transition from.\n   * @param {ClipBase} options.toClip - The clip to transition to.\n   * @param {number} options.duration - The duration of the transition in milliseconds.\n   * @param {string} options.type - The type of transition (e.g., 'crossfade').\n   * @returns {TransitionBase|null} The created transition instance, or null if the type is unknown.\n   * @example\n   * const clipA = editor.createTextClip('A', { start: 0, duration: 2 });\n   * const clipB = editor.createTextClip('B', { start: 1, duration: 2 });\n   * editor.timeline.addTransition({ fromClip: clipA, toClip: clipB, duration: 1, type: 'crossfade' });\n   */\n  addTransition(options) {\n    const TransitionClass = this.transitionTypes.get(options.type);\n    if (!TransitionClass) {\n      ErrorHandler.warning(`Unknown transition type: ${options.type}`);\n      return null;\n    }\n    const transition = new TransitionClass(options);\n    this.transitions.push(transition);\n    return transition;\n  }\n\n  /**\n   * Groups multiple clip or keyframe additions into a single operation to optimize performance.\n   * @param {Function} callback - A function that contains the operations to be batched.\n   * @example\n   * editor.timeline.batch(() => {\n   *   editor.createTextClip(...);\n   *   editor.createImageClip(...);\n   * });\n   */\n  batch(callback) {\n    this.isBatching = true;\n    try {\n      callback();\n    } finally {\n      this.isBatching = false;\n      this.finalizeBatch();\n    }\n  }\n\n  /**\n   * @private\n   * Finalizes batch operations by sorting dirty clips and layers.\n   */\n  finalizeBatch() {\n    this.dirtyClips.forEach((clip) => clip.finalizeChanges());\n    this.dirtyClips.clear();\n\n    if (this.needsClipSorting) {\n      this.clips.sort((a, b) => a.layer - b.layer);\n      this.needsClipSorting = false;\n    }\n  }\n\n  /**\n   * Gets all clips that are directly active at the current time.\n   * Note: This does not include clips that are only active because of a transition.\n   * @returns {ClipBase[]} An array of active clips.\n   */\n  getActiveClips() {\n    const activeClips = [];\n    for (const clip of this.clips) {\n      if (this.time >= clip.start && this.time < clip.start + clip.duration) {\n        activeClips.push(clip);\n      }\n    }\n    return activeClips;\n  }\n\n  /**\n   * @private\n   * Determines which clips and transitions are active at a specific time.\n   * @param {number} time - The time to check against.\n   * @returns {{clipsToProcess: Set<ClipBase>, activeTransitions: TransitionBase[]}}\n   */\n  _getFrameState(time) {\n    const clipsToProcess = new Set();\n    const activeTransitions = [];\n\n    for (const clip of this.clips) {\n      if (time >= clip.start && time < clip.start + clip.duration) {\n        clipsToProcess.add(clip);\n      }\n    }\n\n    for (const transition of this.transitions) {\n      if (\n        time >= transition.start &&\n        time < transition.start + transition.duration\n      ) {\n        activeTransitions.push(transition);\n        clipsToProcess.add(transition.fromClip);\n        clipsToProcess.add(transition.toClip);\n      }\n    }\n\n    return { clipsToProcess, activeTransitions };\n  }\n\n  /**\n   * The main update loop for the timeline. It advances the time and updates all relevant clips.\n   * @param {p5} p - The p5.js instance.\n   * @internal\n   */\n  update(p) {\n    if (!this._pluginsLoaded) {\n      this._loadPlugins();\n      this._pluginsLoaded = true;\n    }\n\n    if (this.isPlaying) {\n      this.time += p.deltaTime;\n      if (this.time >= this.duration) {\n        this.time %= this.duration; // Frame-accurate loop\n      }\n    }\n\n    const { clipsToProcess } = this._getFrameState(this.time);\n\n    for (const clip of clipsToProcess) {\n      const relativeTime = this.time - clip.start;\n      clip.update(p, relativeTime);\n    }\n  }\n\n  /**\n   * Renders the current state of the timeline by delegating to the RenderEngine.\n   * @internal\n   */\n  async render() {\n    const { clipsToProcess, activeTransitions } = this._getFrameState(\n      this.time\n    );\n    await this.renderEngine.render(clipsToProcess, activeTransitions, this.time);\n  }\n\n  /**\n   * Starts or resumes playback.\n   */\n  play() {\n    this.isPlaying = true;\n  }\n\n  /**\n   * Pauses playback.\n   */\n  pause() {\n    this.isPlaying = false;\n  }\n\n  /**\n   * Seeks to a specific time in the timeline.\n   * @param {number} time - The time to seek to, in milliseconds.\n   */\n  seek(time) {\n    if (time >= 0 && time <= this.duration) {\n      this.time = time;\n    }\n  }\n\n  /**\n   * @private\n   * Loads all registered plugins by calling their onLoad methods.\n   */\n  _loadPlugins() {\n    for (const plugin of this.pluginManager.plugins) {\n      try {\n        plugin.onLoad(this);\n      } catch (error) {\n        ErrorHandler.critical(`Error loading plugin: ${plugin.name}`, error);\n      }\n    }\n  }\n}\n\nexport default Timeline;\n","/**\n * @class FrameRecorder\n * @description A class responsible for capturing and storing frames from a p5.js canvas.\n */\nclass FrameRecorder {\n  /**\n   * @param {HTMLCanvasElement} canvas - The p5.js canvas element to capture frames from.\n   */\n  constructor(canvas) {\n    if (!canvas || typeof canvas.toDataURL !== 'function') {\n      throw new Error(\n        'A valid canvas element must be provided to the FrameRecorder.'\n      );\n    }\n    this.canvas = canvas;\n    this.frames = [];\n  }\n\n  /**\n   * Starts a new recording session, clearing any previously captured frames.\n   */\n  start() {\n    this.frames = [];\n    console.log('Frame recording started.');\n  }\n\n  /**\n   * Captures the current content of the canvas and stores it as a WebP Data URL.\n   */\n  captureFrame() {\n    // Using 'image/webp' for a good balance of quality and file size.\n    // Quality is set to 0.8.\n    const frameDataUrl = this.canvas.toDataURL('image/webp', 0.8);\n    this.frames.push(frameDataUrl);\n  }\n\n  /**\n   * Stops the recording session. Currently a placeholder for future functionality.\n   */\n  stop() {\n    console.log(\n      `Frame recording stopped. Total frames captured: ${this.frames.length}`\n    );\n  }\n\n  /**\n   * Returns the array of captured frames.\n   * @returns {string[]} An array of base64 Data URLs representing the captured frames.\n   */\n  getFrames() {\n    return this.frames;\n  }\n}\n\nexport default FrameRecorder;\n","/**\n * @class Exporter\n * @description Manages the video export process by communicating with a Web Worker.\n */\nclass Exporter {\n  /**\n   * @param {object} [options={}] - Configuration options.\n   * @param {function} [options.onProgress] - Callback for progress updates.\n   * @param {function} [options.onLog] - Callback for log messages from FFmpeg.\n   * @param {function} [options.onError] - Callback for errors during the export process.\n   * @param {function} [options.onComplete] - Callback when the export is finished, receiving the video Blob.\n   */\n  constructor({ onProgress, onLog, onError, onComplete } = {}) {\n    this.worker = new Worker(new URL('./encoder.worker.js', import.meta.url), {\n      type: 'module',\n    });\n\n    this.onProgress = onProgress;\n    this.onLog = onLog;\n    this.onError = onError;\n    this.onComplete = onComplete;\n\n    this.worker.onmessage = this.handleWorkerMessage.bind(this);\n  }\n\n  /**\n   * Handles messages received from the encoding worker.\n   * @param {MessageEvent} event - The message event from the worker.\n   */\n  handleWorkerMessage({ data }) {\n    switch (data.type) {\n      case 'log':\n        if (this.onLog) this.onLog(data.data);\n        break;\n      case 'progress':\n        if (this.onProgress) this.onProgress(data.data);\n        break;\n      case 'error':\n        if (this.onError) this.onError(new Error(data.data));\n        break;\n      case 'done': {\n        const videoBlob = new Blob([data.data.buffer], { type: 'video/mp4' });\n        if (this.onComplete) this.onComplete(videoBlob);\n        break;\n      }\n      default:\n        console.warn(\n          'Exporter received unknown message type from worker:',\n          data.type\n        );\n    }\n  }\n\n  /**\n   * Starts the export process by sending the captured frames to the worker.\n   * @param {string[]} frames - An array of frame Data URLs.\n   * @param {number} [frameRate=30] - The frame rate for the output video.\n   */\n  export(frames, frameRate = 30) {\n    if (!frames || frames.length === 0) {\n      const error = new Error('Cannot export without frames.');\n      if (this.onError) {\n        this.onError(error);\n      } else {\n        throw error;\n      }\n      return;\n    }\n\n    if (this.onLog) this.onLog('Sending frames to export worker...');\n    this.worker.postMessage({ frames, frameRate });\n  }\n\n  /**\n   * Terminates the worker. Useful for cleanup when the exporter is no longer needed.\n   */\n  terminate() {\n    this.worker.terminate();\n  }\n}\n\nexport default Exporter;\n","import FrameRecorder from './FrameRecorder.js';\nimport Exporter from '../export/Exporter.js';\n\n/**\n * @class PlaybackController\n * @description Provides a UI and logic to control timeline playback and trigger exports.\n */\nclass PlaybackController {\n  /**\n   * @constructor\n   * @param {Timeline} timeline - The timeline instance to control.\n   * @param {HTMLCanvasElement} canvas - The p5.js canvas element for recording.\n   * @param {HTMLElement} container - The HTML element to append the UI controls to.\n   */\n  constructor(timeline, canvas, container) {\n    this.timeline = timeline;\n    this.canvas = canvas;\n    this.container = container;\n\n    // Initialize the components needed for exporting\n    this.frameRecorder = new FrameRecorder(this.canvas);\n    this.exporter = new Exporter({\n      onProgress: this.handleExportProgress.bind(this),\n      onComplete: this.handleExportComplete.bind(this),\n      onError: this.handleExportError.bind(this),\n      onLog: (log) => console.log('Exporter Log:', log),\n    });\n\n    this._createUI();\n  }\n\n  /**\n   * Creates and appends the playback and export UI controls.\n   * @private\n   */\n  _createUI() {\n    if (!this.container) return;\n\n    const wrapper = document.createElement('div');\n    wrapper.style.padding = '10px';\n    wrapper.style.backgroundColor = '#f0f0f0';\n    wrapper.style.borderTop = '1.5px solid #ccc';\n\n    // --- Basic Play/Pause Button ---\n    this.playButton = document.createElement('button');\n    this.playButton.textContent = 'Play';\n    this.playButton.onclick = () => {\n      if (this.timeline.isPlaying) {\n        this.pause();\n        this.playButton.textContent = 'Play';\n      } else {\n        this.play();\n        this.playButton.textContent = 'Pause';\n      }\n    };\n    wrapper.appendChild(this.playButton);\n\n    // --- Export Button ---\n    this.exportButton = document.createElement('button');\n    this.exportButton.textContent = 'Ekspor Video';\n    this.exportButton.style.marginLeft = '10px';\n    this.exportButton.onclick = () => this.startExportProcess();\n    wrapper.appendChild(this.exportButton);\n\n    // --- Status Display ---\n    this.exportStatus = document.createElement('span');\n    this.exportStatus.style.marginLeft = '15px';\n    this.exportStatus.style.fontFamily = 'monospace';\n    this.exportStatus.style.display = 'none'; // Hidden by default\n    wrapper.appendChild(this.exportStatus);\n\n    this.container.appendChild(wrapper);\n  }\n\n  /**\n   * Starts the entire export workflow: rendering frames and then encoding them.\n   * @private\n   */\n  async startExportProcess() {\n    this.exportButton.disabled = true;\n    this.playButton.disabled = true;\n    this.exportStatus.style.display = 'inline';\n    this.exportStatus.textContent = 'Rendering frames...';\n\n    // Ensure playback is paused and reset to the start\n    this.pause();\n    this.seek(0);\n\n    this.frameRecorder.start();\n\n    const frameRate = this.timeline.frameRate || 30;\n    const frameDuration = 1000 / frameRate;\n    const totalDuration = this.timeline.duration;\n\n    // Use a short timeout to allow the UI to update before the heavy loop starts.\n    await new Promise((resolve) => setTimeout(resolve, 50));\n\n    // --- Offline Rendering Loop ---\n    for (let time = 0; time <= totalDuration; time += frameDuration) {\n      this.timeline.seek(time); // Manually set the time\n      this.timeline.render(); // Manually trigger a render at that time\n      this.frameRecorder.captureFrame();\n    }\n\n    this.frameRecorder.stop();\n    this.exportStatus.textContent =\n      'Mengenkode video... (ini mungkin perlu waktu)';\n\n    // Hand off the captured frames to the exporter\n    this.exporter.export(this.frameRecorder.getFrames(), frameRate);\n  }\n\n  /**\n   * Handles progress updates from the exporter.\n   * @private\n   * @param {number} progress - The export progress percentage (0-100).\n   */\n  handleExportProgress(progress) {\n    this.exportStatus.textContent = `Mengenkode... ${progress}%`;\n  }\n\n  /**\n   * Handles the completion of the export process.\n   * @private\n   * @param {Blob} videoBlob - The resulting video file as a Blob.\n   */\n  handleExportComplete(videoBlob) {\n    this.exportStatus.textContent = 'Ekspor selesai! Memulai pengunduhan...';\n\n    // Create a temporary link to trigger the download\n    const url = URL.createObjectURL(videoBlob);\n    const a = document.createElement('a');\n    a.style.display = 'none';\n    a.href = url;\n    a.download = 'p5-video-export.mp4';\n    document.body.appendChild(a);\n    a.click();\n\n    // Clean up the temporary link and object URL\n    setTimeout(() => {\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      this._resetUIState();\n    }, 100);\n  }\n\n  /**\n   * Handles any errors that occur during the export process.\n   * @private\n   * @param {Error} error - The error object.\n   */\n  handleExportError(error) {\n    console.error('Export failed:', error);\n    this.exportStatus.textContent = `Error: ${error.message}`;\n    // Do not reset immediately, so the user can see the error.\n    // Consider adding a close button for the error message in a real app.\n    setTimeout(() => this._resetUIState(), 5000); // Reset after 5 seconds\n  }\n\n  /**\n   * Resets the UI controls to their default, interactive state.\n   * @private\n   */\n  _resetUIState() {\n    this.exportButton.disabled = false;\n    this.playButton.disabled = false;\n    this.exportStatus.style.display = 'none';\n    this.exportStatus.textContent = '';\n  }\n\n  /**\n   * @method play\n   * @description Starts or resumes playback of the timeline.\n   */\n  play() {\n    this.timeline.play();\n  }\n\n  /**\n   * @method pause\n   * @description Pauses playback of the timeline.\n   */\n  pause() {\n    this.timeline.pause();\n  }\n\n  /**\n   * @method seek\n   * @description Jumps to a specific time on the timeline.\n   * @param {number} time - The time to seek to, in milliseconds.\n   */\n  seek(time) {\n    this.timeline.seek(time);\n  }\n}\n\nexport default PlaybackController;\n","/**\n * @class PerformanceManager\n * @description Monitors application performance, primarily frame rate.\n */\nclass PerformanceManager {\n  /**\n   * @constructor\n   * @param {object} options - Configuration options.\n   * @param {number} [options.frameRateThreshold=45] - The frame rate below which a warning is logged.\n   */\n  constructor({ frameRateThreshold = 45 } = {}) {\n    this.frameRateThreshold = frameRateThreshold;\n    this.enabled = true;\n  }\n\n  /**\n   * @method monitor\n   * @description Checks the current frame rate and logs a warning if it's below the threshold.\n   * @param {object} p5 - The p5.js instance.\n   */\n  monitor(p5) {\n    if (!this.enabled || !p5) {\n      return;\n    }\n\n    const currentFrameRate = p5.frameRate();\n    if (currentFrameRate < this.frameRateThreshold) {\n      console.warn(\n        `PerformanceWarning: Frame rate is ${currentFrameRate.toFixed(2)} FPS, which is below the threshold of ${this.frameRateThreshold} FPS.`\n      );\n    }\n  }\n\n  /**\n   * @method enable\n   * @description Enables the performance monitor.\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * @method disable\n   * @description Disables the performance monitor.\n   */\n  disable() {\n    this.enabled = false;\n  }\n}\n\nexport default PerformanceManager;\n","/**\n * @class MemoryManager\n * @description Manages memory by caching assets and providing methods to clear unused ones.\n */\nclass MemoryManager {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this.cache = new Map();\n    this.enabled = true;\n  }\n\n  /**\n   * @method addAsset\n   * @description Adds an asset to the cache.\n   * @param {string} key - The unique key for the asset (e.g., image URL or asset ID).\n   * @param {*} asset - The asset to be cached.\n   */\n  addAsset(key, asset) {\n    if (!this.enabled) return;\n    this.cache.set(key, asset);\n    console.log(`Asset added to cache: ${key}`);\n  }\n\n  /**\n   * @method getAsset\n   * @description Retrieves an asset from the cache.\n   * @param {string} key - The key of the asset to retrieve.\n   * @returns {*} The cached asset, or undefined if the key does not exist.\n   */\n  getAsset(key) {\n    return this.cache.get(key);\n  }\n\n  /**\n   * @method clearUnusedAssets\n   * @description Removes assets from the cache that are not present in the provided list of active asset keys.\n   * @param {string[]} activeAssetKeys - An array of keys for assets that are currently active or required.\n   */\n  clearUnusedAssets(activeAssetKeys) {\n    if (!this.enabled) return;\n    const activeKeysSet = new Set(activeAssetKeys);\n    let clearedCount = 0;\n    for (const key of this.cache.keys()) {\n      if (!activeKeysSet.has(key)) {\n        this.cache.delete(key);\n        clearedCount++;\n      }\n    }\n    if (clearedCount > 0) {\n      console.log(`Cleared ${clearedCount} unused assets from cache.`);\n    }\n  }\n\n  /**\n   * @method clearAll\n   * @description Clears the entire asset cache unconditionally.\n   */\n  clearAll() {\n    this.cache.clear();\n    console.log('Cleared all assets from cache.');\n  }\n\n  /**\n   * @method enable\n   * @description Enables the memory manager.\n   */\n  enable() {\n    this.enabled = true;\n  }\n\n  /**\n   * @method disable\n   * @description Disables the memory manager. Caching and clearing will be skipped.\n   */\n  disable() {\n    this.enabled = false;\n  }\n}\n\nexport default MemoryManager;\n","class Keyframe {\n  /**\n   * @param {number} time - The time in milliseconds, relative to the clip's start.\n   * @param {*} value - The value of the property at this keyframe.\n   * @param {string} [easing='linear'] - The easing function to use from this keyframe to the next.\n   */\n  constructor(time, value, easing = 'linear') {\n    this.time = time;\n    this.value = value;\n    this.easing = easing;\n  }\n}\n\nexport default Keyframe;\n","/**\n * @namespace Easing\n * @description A collection of easing functions for controlling animation speed.\n * These functions take a single argument `t` (time) which is a value between 0 and 1,\n * and return a new value, also between 0 and 1.\n * Based on the work of Grégoire Divaret-Chauveau.\n * @see {@link https://gist.github.com/gre/1650294}\n */\nconst Easing = {\n  /**\n   * No easing, no acceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  linear: (t) => t,\n  /**\n   * Accelerating from zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInQuad: (t) => t * t,\n  /**\n   * Decelerating to zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeOutQuad: (t) => t * (2 - t),\n  /**\n   * Acceleration until halfway, then deceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInOutQuad: (t) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n  /**\n   * Accelerating from zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInCubic: (t) => t * t * t,\n  /**\n   * Decelerating to zero velocity.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeOutCubic: (t) => --t * t * t + 1,\n  /**\n   * Acceleration until halfway, then deceleration.\n   * @param {number} t - Time.\n   * @returns {number}\n   */\n  easeInOutCubic: (t) =>\n    t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n};\n\nexport default Easing;\n","import Keyframe from '../core/Keyframe.js';\nimport Easing from '../utils/Easing.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\n/**\n * @class ClipBase\n * @description The fundamental building block for all media types on the timeline.\n * It manages common properties like timing, position, rotation, scale, and opacity,\n * as well as the keyframe and effects systems. This class is not intended to be used\n * directly but rather to be extended by specific clip types (e.g., TextClip, ImageClip).\n */\nclass ClipBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - The configuration object for the clip.\n   * @param {number} [options.start=0] - The start time of the clip on the timeline, in milliseconds.\n   * @param {number} [options.duration=1000] - The duration of the clip, in milliseconds.\n   * @param {number} [options.layer=0] - The layer order for rendering. Higher numbers are rendered on top.\n   * @param {string|null} [options.assetKey=null] - A key to identify the asset associated with this clip, used for memory management.\n   * @param {object} [options.properties={}] - Initial values for animatable properties (e.g., x, y, rotation, scale, opacity).\n   */\n  constructor({\n    start = 0,\n    duration = 1000,\n    layer = 0,\n    assetKey = null,\n    ...options\n  } = {}) {\n    this.start = start;\n    this.duration = duration;\n    this.layer = layer;\n    this.assetKey = assetKey;\n    this.timeline = null;\n\n    this.properties = {\n      x: 0,\n      y: 0,\n      rotation: 0,\n      scale: 1,\n      opacity: 1,\n      ...(options.properties || {}),\n    };\n\n    this.initialProperties = JSON.parse(JSON.stringify(this.properties));\n    this.keyframes = {};\n    this.effects = [];\n  }\n\n  /**\n   * Adds a keyframe for a specific property.\n   * @param {string} property - The name of the property to animate (e.g., 'x', 'opacity').\n   * @param {number} time - The time for this keyframe, relative to the clip's start time, in milliseconds.\n   * @param {*} value - The value of the property at this keyframe.\n   * @param {string} [easing='linear'] - The easing function to use for the transition from the previous keyframe.\n   * @returns {this} The current clip instance for chaining.\n   * @example\n   * myClip.addKeyframe('x', 0, 100)\n   *       .addKeyframe('x', 1000, 200, 'easeInQuad');\n   */\n  addKeyframe(property, time, value, easing = 'linear') {\n    if (!Object.prototype.hasOwnProperty.call(this.properties, property)) {\n      ErrorHandler.critical(\n        `Property \"${property}\" is not a recognized or animatable property of this clip.`\n      );\n    }\n\n    if (!this.keyframes[property]) {\n      this.keyframes[property] = [];\n    }\n    this.keyframes[property].push(new Keyframe(time, value, easing));\n\n    if (this.timeline && this.timeline.isBatching) {\n      this.timeline.dirtyClips.add(this);\n    } else {\n      this.keyframes[property].sort((a, b) => a.time - b.time);\n    }\n    return this;\n  }\n\n  /**\n   * Adds an effect to the clip.\n   * @param {object} options - The configuration for the effect.\n   * @param {string} options.type - The type of effect to add (e.g., 'fadeIn', 'wiggle').\n   * @returns {this} The current clip instance for chaining.\n   * @example\n   * myClip.addEffect({ type: 'fadeIn', duration: 500 })\n   *       .addEffect({ type: 'fadeOut', start: 1500, duration: 500 });\n   */\n  addEffect(options = {}) {\n    const { type } = options;\n\n    if (!this.timeline) {\n      ErrorHandler.critical(\n        'Cannot add an effect to a clip that is not on a timeline.'\n      );\n      return this;\n    }\n\n    const EffectClass = this.timeline.effectTypes.get(type);\n    if (EffectClass) {\n      const effect = new EffectClass(options);\n      this.effects.push(effect);\n    } else {\n      ErrorHandler.warn(`Effect with type \"${type}\" not found.`);\n    }\n\n    return this; // Allow chaining\n  }\n\n  /**\n   * Sorts the keyframes for all properties.\n   * @internal\n   */\n  finalizeChanges() {\n    for (const prop in this.keyframes) {\n      if (Object.prototype.hasOwnProperty.call(this.keyframes, prop)) {\n        this.keyframes[prop].sort((a, b) => a.time - b.time);\n      }\n    }\n  }\n\n  /**\n   * Updates the clip's properties based on the current time.\n   * @internal\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    Object.assign(this.properties, this.initialProperties);\n\n    for (const prop in this.keyframes) {\n      if (Object.prototype.hasOwnProperty.call(this.keyframes, prop)) {\n        this.properties[prop] = this._calculateValue(p, prop, relativeTime);\n      }\n    }\n  }\n\n  /**\n   * Calculates the interpolated value for a property at a given time.\n   * @private\n   * @param {p5} p - The p5.js instance.\n   * @param {string} prop - The name of the property to calculate.\n   * @param {number} time - The current time within the clip's duration.\n   * @returns {*} The interpolated value of the property.\n   */\n  _calculateValue(p, prop, time) {\n    const kfs = this.keyframes[prop];\n    if (!kfs || kfs.length === 0) {\n      return this.initialProperties[prop];\n    }\n\n    if (time <= kfs[0].time) {\n      return kfs[0].value;\n    }\n    if (time >= kfs[kfs.length - 1].time) {\n      return kfs[kfs.length - 1].value;\n    }\n\n    let low = 0;\n    let high = kfs.length - 1;\n    let prevKeyframeIndex = 0;\n\n    while (low <= high) {\n      const mid = Math.floor((low + high) / 2);\n      if (kfs[mid].time < time) {\n        prevKeyframeIndex = mid;\n        low = mid + 1;\n      } else if (kfs[mid].time > time) {\n        high = mid - 1;\n      } else {\n        return kfs[mid].value;\n      }\n    }\n\n    const prevKeyframe = kfs[prevKeyframeIndex];\n    const nextKeyframe = kfs[prevKeyframeIndex + 1];\n\n    const t =\n      (time - prevKeyframe.time) / (nextKeyframe.time - prevKeyframe.time);\n    const easingFunction = Easing[prevKeyframe.easing] || Easing.linear;\n    const easedT = easingFunction(t);\n\n    const from = prevKeyframe.value;\n    const to = nextKeyframe.value;\n\n    if (p.Color && from instanceof p.Color && to instanceof p.Color) {\n      return p.lerpColor(from, to, easedT);\n    }\n\n    return p.lerp(from, to, easedT);\n  }\n\n  /**\n   * Renders the clip's base transformations.\n   * @internal\n   * @param {p5} p - The p5.js instance or a p5.Graphics object.\n   */\n  render(p) {\n    p.push();\n    p.translate(this.properties.x, this.properties.y);\n    p.rotate(this.properties.rotation);\n    p.scale(this.properties.scale);\n  }\n}\n\nexport default ClipBase;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class TextClip\n * @extends ClipBase\n * @description A clip for rendering and animating text on the canvas.\n *\n * @param {string} text - The text content to display.\n * @param {object} [options={}] - Configuration options for the text clip. Inherits options from ClipBase.\n * @param {number} [options.fontSize=24] - The font size of the text.\n * @param {p5.Color|string} [options.fill='#ffffff'] - The fill color of the text.\n * @param {string} [options.align='center'] - The horizontal alignment of the text ('left', 'center', 'right').\n *\n * @example\n * let textClip = editor.createTextClip(\"Hello, p5.js!\", {\n *   start: 0,\n *   duration: 5000,\n *   properties: { x: 200, y: 200, fontSize: 32, fill: 'yellow' }\n * });\n * textClip.addKeyframe('opacity', 0, 0);\n * textClip.addKeyframe('opacity', 1000, 1);\n */\nclass TextClip extends ClipBase {\n  constructor(text, options = {}) {\n    super(options);\n    this.text = text;\n    this.properties.fontSize = options.fontSize || 24;\n    this.properties.fill = options.fill || '#ffffff';\n    this.properties.align = options.align || 'center';\n  }\n\n  /**\n   * Renders the text to the canvas with its current properties and transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    p.fill(this.properties.fill); // TODO: Handle opacity\n    p.textSize(this.properties.fontSize);\n    p.textAlign(this.properties.align, p.CENTER);\n    p.text(this.text, 0, 0);\n\n    p.pop();\n  }\n}\n\nexport default TextClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class ShapeClip\n * @extends ClipBase\n * @description A clip for drawing and animating basic p5.js shapes like rectangles and ellipses.\n *\n * @param {string} [shapeType='rect'] - The type of shape to draw ('rect' or 'ellipse').\n * @param {object} [options={}] - Configuration options for the shape clip. Inherits options from ClipBase.\n * @param {number} [options.width=100] - The width of the shape.\n * @param {number} [options.height=100] - The height of the shape.\n * @param {p5.Color|string} [options.fill='#ffffff'] - The fill color of the shape.\n * @param {p5.Color|string} [options.stroke='#000000'] - The stroke color of the shape.\n * @param {number} [options.strokeWeight=1] - The stroke weight of the shape.\n *\n * @example\n * let rectClip = editor.createShapeClip('rect', {\n *   start: 0,\n *   duration: 3000,\n *   properties: { width: 50, height: 50, fill: 'red' }\n * });\n * rectClip.addKeyframe('rotation', 0, 0);\n * rectClip.addKeyframe('rotation', 3000, Math.PI * 2);\n */\nclass ShapeClip extends ClipBase {\n  constructor(shapeType = 'rect', options = {}) {\n    super({\n      ...options,\n      properties: {\n        width: 100,\n        height: 100,\n        fill: '#ffffff',\n        stroke: '#000000',\n        strokeWeight: 1,\n        ...(options.properties || {}),\n      },\n    });\n    this.shapeType = shapeType;\n  }\n\n  /**\n   * Renders the shape to the canvas with its current properties and transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    p.fill(this.properties.fill); // TODO: Handle opacity\n    p.stroke(this.properties.stroke);\n    p.strokeWeight(this.properties.strokeWeight);\n\n    if (this.shapeType === 'rect') {\n      p.rectMode(p.CENTER);\n      p.rect(0, 0, this.properties.width, this.properties.height);\n    } else if (this.shapeType === 'ellipse') {\n      p.ellipseMode(p.CENTER);\n      p.ellipse(0, 0, this.properties.width, this.properties.height);\n    }\n\n    p.pop();\n  }\n}\n\nexport default ShapeClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class ImageClip\n * @extends ClipBase\n * @description A clip for displaying and animating an image on the canvas.\n *\n * @param {p5.Image|string} image - The p5.Image object or a URL to the image file.\n * If a URL is provided, it will be used as the `assetKey` for caching unless one is explicitly provided in the options.\n * @param {object} [options={}] - Configuration options for the image clip. Inherits options from ClipBase.\n *\n * @example\n * // Assuming 'logo.png' is preloaded\n * let imageClip = editor.createImageClip(logo, { start: 1000, duration: 4000 });\n * imageClip.addKeyframe('scale', 0, 0.5);\n * imageClip.addKeyframe('scale', 1000, 1);\n */\nclass ImageClip extends ClipBase {\n  constructor(image, options = {}) {\n    if (typeof image === 'string' && !options.assetKey) {\n      options.assetKey = image;\n    }\n    super({\n      ...options,\n      properties: {\n        width: image ? image.width : 0,\n        height: image ? image.height : 0,\n        ...(options.properties || {}),\n      },\n    });\n    this.image = image;\n  }\n\n  /**\n   * Renders the image to the canvas with its current transformations.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  render(p, relativeTime) {\n    super.render(p, relativeTime);\n\n    if (this.image) {\n      // TODO: Handle opacity with p.tint()\n      p.imageMode(p.CENTER);\n      p.image(this.image, 0, 0, this.properties.width, this.properties.height);\n    }\n\n    p.pop();\n  }\n}\n\nexport default ImageClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class AudioClip\n * @extends ClipBase\n * @description A clip for managing and playing audio on the timeline. It handles\n * playback synchronization and allows for keyframing audio properties like volume and pan.\n *\n * @param {p5.SoundFile|string} soundFile - The p5.SoundFile object or a URL to the audio file.\n * If a URL is provided, it will be used as the `assetKey` for caching unless one is explicitly provided in the options.\n * @param {object} [options={}] - Configuration options for the audio clip. Inherits options from ClipBase.\n *\n * @example\n * // Assuming 'mySound.mp3' is preloaded\n * let audioClip = editor.createAudioClip(mySound, { start: 2000, duration: 5000 });\n * audioClip.addKeyframe('volume', 0, 0); // Start silent\n * audioClip.addKeyframe('volume', 1000, 1); // Fade in\n * audioClip.addKeyframe('volume', 4000, 1); // Hold volume\n * audioClip.addKeyframe('volume', 5000, 0); // Fade out\n */\nclass AudioClip extends ClipBase {\n  constructor(soundFile, options = {}) {\n    if (typeof soundFile === 'string' && !options.assetKey) {\n      options.assetKey = soundFile;\n    }\n\n    const defaultAudioProps = {\n      volume: 1,\n      pan: 0,\n    };\n\n    super({\n      ...options,\n      properties: { ...defaultAudioProps, ...(options.properties || {}) },\n    });\n\n    this.soundFile = soundFile;\n    this._isPlaying = false;\n  }\n\n  /**\n   * Updates the audio playback state and properties based on the timeline's current position.\n   * This method is called automatically by the timeline in the draw loop.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    super.update(p, relativeTime);\n\n    if (!this.soundFile || typeof this.soundFile.play !== 'function') {\n      return;\n    }\n\n    this.soundFile.setVolume(this.properties.volume);\n    this.soundFile.pan(this.properties.pan);\n\n    const isWithinClipBounds =\n      relativeTime >= 0 && relativeTime < this.duration;\n\n    if (isWithinClipBounds && !this._isPlaying) {\n      const startTimeInSound = relativeTime / 1000;\n      if (startTimeInSound < this.soundFile.duration()) {\n        this.soundFile.play();\n        this.soundFile.jump(startTimeInSound);\n        this._isPlaying = true;\n      }\n    } else if (!isWithinClipBounds && this._isPlaying) {\n      this.soundFile.stop();\n      this._isPlaying = false;\n    }\n  }\n\n  /**\n   * Audio clips do not have a visual representation, so this method is a no-op.\n   * It exists to fulfill the ClipBase interface.\n   * It exists to fulfill the ClipBase interface.\n   */\n  render() {\n    // Audio clips are not rendered visually.\n  }\n}\n\nexport default AudioClip;\n","import ClipBase from './ClipBase.js';\nimport ErrorHandler from '../utils/ErrorHandler.js';\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'blob:', 'data:'];\n\n/**\n * @class Hotspot\n * @description Represents a clickable area on a video clip.\n * This is a helper class used internally by VideoClip.\n */\nclass Hotspot {\n  constructor(options = {}) {\n    this.x = options.x || 0; // Center x, relative to the video's center\n    this.y = options.y || 0; // Center y, relative to the video's center\n    this.width = options.width || 100;\n    this.height = options.height || 50;\n    this.start = options.start || 0; // Start time relative to the video clip's start, in ms\n    this.duration = options.duration || 1000; // Duration in ms\n    this.onClick = options.onClick || (() => {});\n  }\n\n  /**\n   * Checks if a point is inside the hotspot's bounds.\n   * The coordinates are relative to the video clip's center.\n   * @param {number} px - The x-coordinate of the point to check.\n   * @param {number} py - The y-coordinate of the point to check.\n   * @returns {boolean} True if the point is inside the hotspot.\n   */\n  isHit(px, py) {\n    // Assuming imageMode(CENTER)\n    const halfW = this.width / 2;\n    const halfH = this.height / 2;\n    return (\n      px >= this.x - halfW &&\n      px <= this.x + halfW &&\n      py >= this.y - halfH &&\n      py <= this.y + halfH\n    );\n  }\n}\n\n/**\n * Represents a video clip that can be placed on the timeline.\n * Manages the playback and synchronization of an HTML5 video element.\n */\nclass VideoClip extends ClipBase {\n  /**\n   * @param {string} videoSrc - The source URL of the video.\n   * @param {object} options - The options for the clip, passed to ClipBase.\n   */\n  constructor(videoSrc, options = {}) {\n    super(options);\n\n    // Explicitly block javascript: URLs before attempting to parse.\n    if (\n      typeof videoSrc === 'string' &&\n      videoSrc.trim().toLowerCase().startsWith('javascript:')\n    ) {\n      ErrorHandler.critical(\n        `Unsafe video protocol: javascript:. Only safe protocols are allowed.`\n      );\n    }\n\n    try {\n      const url = new URL(videoSrc, document.baseURI);\n      if (!ALLOWED_PROTOCOLS.includes(url.protocol)) {\n        ErrorHandler.critical(\n          `Unsafe video protocol: ${url.protocol}. Only safe protocols are allowed.`\n        );\n      }\n    } catch (e) {\n      ErrorHandler.critical(`Invalid video source URL: ${videoSrc}`, e);\n    }\n\n    this.videoSrc = videoSrc;\n    this.isPlaying = false;\n    this.videoElement = null; // Element will be created lazily\n\n    // Add width and height to the animatable properties, with defaults.\n    this.properties.width = options.width || 1920; // Default to common video width\n    this.properties.height = options.height || 1080; // Default to common video height\n\n    this.hotspots = [];\n  }\n\n  /**\n   * @private\n   * Creates the video element and sets its initial properties.\n   * This is called lazily to avoid creating DOM elements unnecessarily.\n   */\n  _initElement() {\n    if (this.videoElement) return;\n\n    this.videoElement = document.createElement('video');\n    this.videoElement.src = this.videoSrc;\n    this.videoElement.preload = 'auto';\n    this.videoElement.muted = true; // Essential for browser autoplay policies\n    this.videoElement.playsInline = true; // Essential for mobile playback\n  }\n\n  /**\n   * Updates the video's state based on the timeline's current time.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  update(p, relativeTime) {\n    this._initElement(); // Ensure element exists\n    super.update(p, relativeTime);\n\n    // Synchronize video time with timeline time.\n    const targetTime = relativeTime / 1000;\n    const timeDifference = Math.abs(this.videoElement.currentTime - targetTime);\n    if (timeDifference > 0.05 || this.videoElement.paused) {\n      this.videoElement.currentTime = targetTime;\n    }\n\n    const isActive = relativeTime >= 0 && relativeTime < this.duration;\n    if (isActive && !this.isPlaying) {\n      const playPromise = this.videoElement.play();\n      if (playPromise !== undefined) {\n        playPromise.catch(() => {\n          // Autoplay was prevented.\n        });\n      }\n      this.isPlaying = true;\n    } else if (!isActive && this.isPlaying) {\n      this.videoElement.pause();\n      this.isPlaying = false;\n    }\n  }\n\n  /**\n   * Renders the video frame to the p5.js canvas if the clip is active.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  /**\n   * Adds a clickable hotspot to the video clip.\n   * @param {object} options - Configuration for the hotspot.\n   * @param {number} options.x - Center x-coordinate, relative to the video's center.\n   * @param {number} options.y - Center y-coordinate, relative to the video's center.\n   * @param {number} options.width - Width of the hotspot.\n   * @param {number} options.height - Height of the hotspot.\n   * @param {number} options.start - Start time, relative to the clip's start, in ms.\n   * @param {number} options.duration - Duration of the hotspot, in ms.\n   * @param {Function} options.onClick - The callback function to execute when clicked.\n   * @returns {this} The current VideoClip instance for chaining.\n   */\n  addHotspot(options = {}) {\n    this.hotspots.push(new Hotspot(options));\n    return this;\n  }\n\n  /**\n   * Checks if a click at the given canvas coordinates hits any active hotspot.\n   * @internal\n   * @param {p5} p - The p5 instance.\n   * @param {number} canvasX - The mouseX coordinate on the canvas.\n   * @param {number} canvasY - The mouseY coordinate on the canvas.\n   * @param {number} relativeTime - The current time within the clip's duration.\n   */\n  checkClick(p, canvasX, canvasY, relativeTime) {\n    // This simple implementation does not account for parent clip rotation or scale.\n    // It assumes the video clip is only translated.\n    const clipCanvasX = this.properties.x;\n    const clipCanvasY = this.properties.y;\n\n    // Convert canvas coordinates to be relative to the clip's center.\n    const relativeX = canvasX - clipCanvasX;\n    const relativeY = canvasY - clipCanvasY;\n\n    for (const hotspot of this.hotspots) {\n      const isTimeActive =\n        relativeTime >= hotspot.start &&\n        relativeTime < hotspot.start + hotspot.duration;\n\n      if (isTimeActive && hotspot.isHit(relativeX, relativeY)) {\n        hotspot.onClick();\n        // Stop after the first hit to prevent multiple triggers.\n        return true;\n      }\n    }\n    return false;\n  }\n\n  render(p, relativeTime) {\n    this._initElement(); // Ensure element exists\n    super.render(p, relativeTime);\n\n    if (this.videoElement && this.videoElement.readyState >= 3) {\n      p.imageMode(p.CENTER);\n      p.image(\n        this.videoElement,\n        0,\n        0,\n        this.properties.width,\n        this.properties.height\n      );\n    }\n\n    // --- Render Hotspots (for debugging/visualization) ---\n    // Make sure we are in a p5.js environment with drawing capabilities\n    if (p.rectMode) {\n      p.push();\n      p.rectMode(p.CENTER);\n      p.stroke('rgba(255, 0, 0, 0.75)');\n      p.strokeWeight(2);\n      p.noFill();\n      for (const hotspot of this.hotspots) {\n        const isTimeActive =\n          relativeTime >= hotspot.start &&\n          relativeTime < hotspot.start + hotspot.duration;\n        if (isTimeActive) {\n          p.rect(hotspot.x, hotspot.y, hotspot.width, hotspot.height);\n        }\n      }\n      p.pop();\n    }\n    // --- End Hotspot Rendering ---\n\n    p.pop();\n  }\n}\n\nexport default VideoClip;\n","import ClipBase from './ClipBase.js';\n\n/**\n * @class SlideShowClip\n * @extends ClipBase\n * @description A special clip type that acts as a container for a sequence of slides.\n * Each slide can contain its own set of clips. Navigation between slides is controlled\n * by `next()` and `previous()` methods, making it suitable for presentations.\n */\nclass SlideShowClip extends ClipBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - The configuration object for the clip.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.slides = [];\n    this.currentSlideIndex = 0;\n    this.slideActivationTime = 0;\n  }\n\n  /**\n   * Adds a new slide to the slideshow. A slide is an array of clips.\n   * @param {ClipBase[]} [clips=[]] - An array of clips that make up this slide.\n   * @returns {this} The current SlideShowClip instance for chaining.\n   * @example\n   * const slideShow = editor.createSlideShowClip({ duration: 30 });\n   * const slide1Clips = [\n   *   editor.createTextClip('Slide 1', { properties: { x: 100, y: 100 } }),\n   * ];\n   * slideShow.addSlide(slide1Clips);\n   */\n  addSlide(clips = []) {\n    this.slides.push(clips);\n    if (this.timeline) {\n      clips.forEach((clip) => {\n        clip.timeline = this.timeline;\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Activates a slide at a specific index and resets its internal animation clock.\n   * @private\n   * @param {number} index - The index of the slide to activate.\n   */\n  _activateSlide(index) {\n    this.currentSlideIndex = index;\n    if (this.timeline) {\n      // Record the time (relative to the slideshow's start) that this slide became active.\n      // This allows animations within the slide to play relative to this moment.\n      this.slideActivationTime = this.timeline.time - this.start;\n    }\n  }\n\n  /**\n   * Navigates to the next slide.\n   */\n  next() {\n    if (this.currentSlideIndex < this.slides.length - 1) {\n      this._activateSlide(this.currentSlideIndex + 1);\n    }\n  }\n\n  /**\n   * Navigates to the previous slide.\n   */\n  previous() {\n    if (this.currentSlideIndex > 0) {\n      this._activateSlide(this.currentSlideIndex - 1);\n    }\n  }\n\n  /**\n   * Updates the properties of the slideshow container and the clips of the active slide.\n   * @internal\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the slideshow's duration.\n   */\n  update(p, relativeTime) {\n    super.update(p, relativeTime); // Update container properties (e.g., position, scale)\n\n    const activeSlide = this.slides[this.currentSlideIndex];\n    if (activeSlide) {\n      const timeSinceSlideActivation = relativeTime - this.slideActivationTime;\n      activeSlide.forEach((clip) => {\n        // Update each clip on the current slide with a time relative to when the slide was shown.\n        clip.update(p, timeSinceSlideActivation);\n      });\n    }\n  }\n\n  /**\n   * Renders the currently active slide and its clips.\n   * This method is called by the RenderEngine.\n   * @internal\n   * @param {p5} p - The p5.js instance or a p5.Graphics object.\n   */\n  render(p) {\n    // First, apply the transformations of the slideshow container itself.\n    // super.render() handles the p.push() and transform operations.\n    super.render(p);\n\n    const activeSlide = this.slides[this.currentSlideIndex];\n    if (activeSlide) {\n      // Sort clips by layer, just like the main render engine.\n      const sortedClips = [...activeSlide].sort((a, b) => a.layer - b.layer);\n\n      // Render each clip within the current slide.\n      // The RenderEngine normally handles the push/pop for each clip. Since we are\n      // rendering these \"sub-clips\" manually, we must do it here.\n      sortedClips.forEach((clip) => {\n        clip.render(p); // This will do its own p.push() and transformations.\n        p.pop(); // We must provide the matching pop.\n      });\n    }\n  }\n}\n\nexport default SlideShowClip;\n","/**\n * @class EffectBase\n * @description The abstract base class for all visual effects.\n * It defines the standard interface that all effects must implement.\n */\nclass EffectBase {\n  /**\n   * @constructor\n   * @param {object} [options={}] - Configuration options for the effect.\n   * @param {number} [options.start=0] - The start time of the effect, relative to the clip's start, in milliseconds.\n   * @param {number} [options.duration=1000] - The duration of the effect in milliseconds.\n   */\n  constructor({ start = 0, duration = 1000 } = {}) {\n    this.start = start;\n    this.duration = duration;\n  }\n\n  /**\n   * Abstract method to apply the effect.\n   * This method must be implemented by any class that extends EffectBase.\n   * @param {ClipBase} clip - The clip to which the effect is being applied.\n   * @param {p5} p - The p5.js instance.\n   * @param {number} relativeTime - The current time within the clip's duration, in milliseconds.\n   */\n  apply(_clip, _p, _relativeTime) {\n    throw new Error('The \"apply()\" method must be implemented by a subclass.');\n  }\n}\n\nexport default EffectBase;\n","import Timeline from './core/Timeline.js';\nimport PlaybackController from './core/PlaybackController.js';\nimport PerformanceManager from './core/PerformanceManager.js';\nimport ErrorHandler from './utils/ErrorHandler.js';\nimport MemoryManager from './utils/MemoryManager.js';\nimport ClipBase from './clips/ClipBase.js';\nimport TextClip from './clips/TextClip.js';\nimport ShapeClip from './clips/ShapeClip.js';\nimport ImageClip from './clips/ImageClip.js';\nimport AudioClip from './clips/AudioClip.js';\nimport VideoClip from './clips/VideoClip.js';\nimport SlideShowClip from './clips/SlideShowClip.js';\nimport GIF from 'gif.js/src/GIF';\nimport EffectBase from './effects/EffectBase.js';\n\n/**\n * @class VideoEditor\n * @description The main entry point for users of the p5.videoeditor.js library.\n * It encapsulates the core components like the timeline, playback controls,\n * and managers into a simplified and easy-to-use API.\n *\n * @example\n * // In your p5.js sketch:\n * let editor;\n *\n * function setup() {\n *   createCanvas(1280, 720);\n *   editor = new VideoEditor(p5.instance, { canvas: canvas.elt });\n *\n *   // Create clips and add keyframes using the ergonomic API\n *   editor.createTextClip(\"Hello World\", { start: 1, duration: 5 })\n *     .addKeyframe('x', 0, 100)\n *     .addKeyframe('x', 5000, 500);\n * }\n *\n * async function draw() {\n *   background(0);\n *   editor.update(p5.instance);\n *   await editor.render();\n * }\n */\nclass VideoEditor {\n  /**\n   * @static\n   * @property {ErrorHandler} ErrorHandler - Exposes the static ErrorHandler class for advanced use cases.\n   */\n  static ErrorHandler = ErrorHandler;\n\n  /**\n   * @constructor\n   * @param {p5} p - The p5.js instance. Required for rendering.\n   * @param {object} [options={}] - Configuration options for the editor.\n   * @param {HTMLCanvasElement} [options.canvas=null] - The p5.js canvas element. Required for exporting.\n   * @param {HTMLElement} [options.uiContainer=null] - The container to append the UI controls to.\n   * @param {string} [options.gifWorkerPath=null] - The path to the 'gif.worker.js' file for GIF exporting.\n   * @param {object} [options.performance] - Performance-related settings passed to the PerformanceManager.\n   */\n  constructor(\n    p,\n    {\n      canvas = null,\n      uiContainer = null,\n      gifWorkerPath = './gif.worker.js', // Default path for the distributed worker file\n      ...options\n    } = {}\n  ) {\n    if (!p) {\n      throw new Error(\n        'A p5.js instance must be provided to the VideoEditor constructor.'\n      );\n    }\n    this.options = { gifWorkerPath };\n    this.timeline = new Timeline(p, canvas, options);\n    this.playbackController = new PlaybackController(\n      this.timeline,\n      canvas,\n      uiContainer\n    );\n    this.performanceManager = new PerformanceManager(options.performance);\n    this.memoryManager = new MemoryManager();\n\n    this.play = this.playbackController.play.bind(this.playbackController);\n    this.pause = this.playbackController.pause.bind(this.playbackController);\n    this.seek = this.playbackController.seek.bind(this.playbackController);\n  }\n\n  /**\n   * Exports the timeline animation as a GIF file.\n   * This process is resource-intensive and may take some time.\n   * @param {object} [options={}] - Configuration options for the GIF export.\n   * @param {number} [options.frameRate=15] - The frame rate of the exported GIF.\n   * @param {number} [options.quality=10] - The quality of the GIF encoder. Lower is better.\n   * @param {string} [options.filename='p5.videoeditor-export.gif'] - The filename for the downloaded GIF.\n   * @param {function} [options.onProgress=null] - A callback function that receives the progress (0 to 1).\n   * @returns {Promise<void>} A promise that resolves when the export is complete.\n   * @example\n   * // Basic export\n   * editor.exportGIF();\n   *\n   * // Export with options and progress tracking\n   * editor.exportGIF({\n   *   frameRate: 24,\n   *   quality: 5,\n   *   filename: 'my-animation.gif',\n   *   onProgress: (progress) => {\n   *     console.log(`Export progress: ${Math.round(progress * 100)}%`);\n   *   }\n   * });\n   */\n  async exportGIF({\n    frameRate = 15,\n    quality = 10,\n    filename = 'p5.videoeditor-export.gif',\n    onProgress = null,\n  } = {}) {\n    console.log('Starting GIF export...');\n    const wasPlaying = this.playbackController.isPlaying;\n    const originalTime = this.timeline.time;\n\n    this.pause();\n    this.seek(0);\n\n    const gif = new GIF({\n      workers: 2,\n      quality,\n      workerScript: this.options.gifWorkerPath,\n    });\n\n    const frameDelay = 1000 / frameRate;\n    const totalFrames = Math.floor(this.timeline.duration / frameDelay);\n\n    for (let i = 0; i < totalFrames; i++) {\n      const currentTime = i * frameDelay;\n      this.seek(currentTime);\n      this.update(this.timeline.p);\n      await this.render();\n\n      // addFrame can take a canvas element or a context\n      gif.addFrame(this.timeline.canvas, {\n        copy: true,\n        delay: frameDelay,\n      });\n\n      if (onProgress) {\n        onProgress((i + 1) / totalFrames);\n      }\n    }\n\n    gif.on('finished', (blob) => {\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n\n      console.log('GIF export finished.');\n\n      // Restore original state\n      this.seek(originalTime);\n      if (wasPlaying) {\n        this.play();\n      }\n    });\n\n    console.log('Rendering GIF frames...');\n    gif.render();\n  }\n\n  /**\n   * Creates a video clip and adds it to the timeline.\n   * @param {string} videoSrc - The source URL of the video file.\n   * @param {object} [options={}] - Configuration options for the VideoClip.\n   * @returns {VideoClip} The newly created VideoClip instance for chaining.\n   * @example\n   * editor.createVideoClip('./assets/my-video.mp4', { start: 0, duration: 10 });\n   */\n  createVideoClip(videoSrc, options = {}) {\n    const clip = new VideoClip(videoSrc, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a slideshow clip and adds it to the timeline.\n   * This clip can contain other clips and be controlled with next() and previous().\n   * @param {object} [options={}] - Configuration options for the SlideShowClip.\n   * @returns {SlideShowClip} The newly created SlideShowClip instance for chaining.\n   * @example\n   * const slideshow = editor.createSlideShowClip({ duration: 20 });\n   * slideshow.addSlide([ editor.createTextClip('First Slide') ]);\n   * slideshow.addSlide([ editor.createTextClip('Second Slide') ]);\n   */\n  createSlideShowClip(options = {}) {\n    const clip = new SlideShowClip(options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a text clip and adds it to the timeline.\n   * @param {string} text - The text content of the clip.\n   * @param {object} [options={}] - Configuration options for the TextClip.\n   * @returns {TextClip} The newly created TextClip instance for chaining.\n   * @example\n   * editor.createTextClip('Hello', { start: 1, duration: 3, properties: { y: 100 } })\n   *   .addKeyframe('x', 0, 50)\n   *   .addKeyframe('x', 3000, 250);\n   */\n  createTextClip(text, options = {}) {\n    const clip = new TextClip(text, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates a shape clip and adds it to the timeline.\n   * @param {string} shapeType - The type of shape to create (e.g., 'rect', 'circle').\n   * @param {object} [options={}] - Configuration options for the ShapeClip.\n   * @returns {ShapeClip} The newly created ShapeClip instance for chaining.\n   * @example\n   * editor.createShapeClip('rect', { duration: 5, properties: { width: 100, fill: 'red' } });\n   */\n  createShapeClip(shapeType, options = {}) {\n    const clip = new ShapeClip(shapeType, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates an image clip and adds it to the timeline.\n   * @param {p5.Image} image - The preloaded p5.Image object.\n   * @param {object} [options={}] - Configuration options for the ImageClip.\n   * @returns {ImageClip} The newly created ImageClip instance for chaining.\n   * @example\n   * // In preload: myImage = p.loadImage('./assets/logo.png');\n   * // In setup:\n   * editor.createImageClip(myImage, { duration: 4 });\n   */\n  createImageClip(image, options = {}) {\n    const clip = new ImageClip(image, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Creates an audio clip and adds it to the timeline.\n   * @param {p5.SoundFile} soundFile - The preloaded p5.SoundFile object.\n   * @param {object} [options={}] - Configuration options for the AudioClip.\n   * @returns {AudioClip} The newly created AudioClip instance for chaining.\n   * @example\n   * // In preload: mySound = p.loadSound('./assets/music.mp3');\n   * // In setup:\n   * editor.createAudioClip(mySound, { start: 0, duration: 15 });\n   */\n  createAudioClip(soundFile, options = {}) {\n    const clip = new AudioClip(soundFile, options);\n    this.timeline.addClip(clip);\n    return clip;\n  }\n\n  /**\n   * Caches an asset manually in the MemoryManager.\n   * @param {string} key - The unique key to store the asset under.\n   * @param {*} asset - The asset to cache (e.g., p5.Image, p5.SoundFile).\n   */\n  cacheAsset(key, asset) {\n    this.memoryManager.addAsset(key, asset);\n  }\n\n  /**\n   * Updates the state of the timeline and all active clips.\n   * @param {p5} p - The p5.js instance.\n   */\n  update(p) {\n    this.performanceManager.monitor(p);\n    this.timeline.update(p);\n\n    const activeAssetKeys = this.timeline\n      .getActiveClips()\n      .map((clip) => clip.assetKey)\n      .filter((key) => key);\n    this.memoryManager.clearUnusedAssets(activeAssetKeys);\n  }\n\n  /**\n   * Renders the current state of the timeline to the canvas.\n   */\n  async render() {\n    await this.timeline.render();\n  }\n\n  /**\n   * Handles mouse press events to check for interactions like hotspot clicks.\n   * This method should be called from the p5.js `mousePressed()` function.\n   * @param {p5} p - The p5.js instance, which provides mouseX and mouseY.\n   * @example\n   * function mousePressed() {\n   *   editor.handleMousePressed(p);\n   * }\n   */\n  handleMousePressed(p) {\n    const activeClips = this.timeline.getActiveClips();\n    // Iterate in reverse order so we check the topmost clips first.\n    for (let i = activeClips.length - 1; i >= 0; i--) {\n      const clip = activeClips[i];\n      if (clip instanceof VideoClip) {\n        const relativeTime = this.timeline.time - clip.start;\n        const wasClicked = clip.checkClick(p, p.mouseX, p.mouseY, relativeTime);\n        if (wasClicked) {\n          // Stop after the first clip that handles the click.\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Displays a user-friendly error message.\n   * @param {Error} error - The error object to display.\n   */\n  showUserFriendlyError(error) {\n    ErrorHandler.showUserFriendlyError(error);\n  }\n}\n\n// Export all the public classes for advanced usage\nexport {\n  VideoEditor,\n  Timeline,\n  PlaybackController,\n  PerformanceManager,\n  MemoryManager,\n  ErrorHandler,\n  ClipBase,\n  TextClip,\n  ShapeClip,\n  ImageClip,\n  AudioClip,\n  VideoClip,\n  SlideShowClip,\n  EffectBase,\n};\n"],"names":["PluginManager","constructor","this","plugins","register","plugin","name","trim","type","onLoad","some","p","console","warn","push","RenderEngine","canvas","width","height","sceneBuffer","createGraphics","WEBGL","effectBuffer","shaders","shaderPromises","postProcessingEffects","loadShader","key","fragUrl","promise","shader","log","render","clipsToRender","activeTransitions","time","_renderScene","finalBuffer","_applyPostProcessing","image","clear","clipsInTransition","Set","transition","add","fromClip","toClip","standaloneClips","filter","clip","has","sort","a","b","layer","relativeTime","start","effect","effects","apply","pop","length","sourceBuffer","destinationBuffer","i","setUniform","uniforms","value","Object","entries","rect","ErrorHandler","critical","message","originalError","error","Error","warning","showUserFriendlyError","Timeline","duration","clips","transitions","isPlaying","isBatching","dirtyClips","needsClipSorting","renderEngine","pluginManager","transitionTypes","Map","effectTypes","_pluginsLoaded","use","addClip","timeline","registerTransitionType","transitionClass","set","registerEffectType","effectClass","addTransition","options","TransitionClass","get","batch","callback","finalizeBatch","forEach","finalizeChanges","getActiveClips","activeClips","_getFrameState","clipsToProcess","update","_loadPlugins","deltaTime","play","pause","seek","FrameRecorder","toDataURL","frames","captureFrame","frameDataUrl","stop","getFrames","Exporter","onProgress","onLog","onError","onComplete","worker","Worker","URL","document","location","require","pathToFileURL","__filename","href","_documentCurrentScript","tagName","toUpperCase","src","baseURI","onmessage","handleWorkerMessage","bind","data","videoBlob","Blob","buffer","frameRate","postMessage","terminate","PlaybackController","container","frameRecorder","exporter","handleExportProgress","handleExportComplete","handleExportError","_createUI","wrapper","createElement","style","padding","backgroundColor","borderTop","playButton","textContent","onclick","appendChild","exportButton","marginLeft","startExportProcess","exportStatus","fontFamily","display","disabled","frameDuration","totalDuration","Promise","resolve","setTimeout","export","progress","url","createObjectURL","download","body","click","removeChild","revokeObjectURL","_resetUIState","PerformanceManager","frameRateThreshold","enabled","monitor","p5","currentFrameRate","toFixed","enable","disable","MemoryManager","cache","addAsset","asset","getAsset","clearUnusedAssets","activeAssetKeys","activeKeysSet","clearedCount","keys","delete","clearAll","Keyframe","easing","Easing","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","ClipBase","assetKey","properties","x","y","rotation","scale","opacity","initialProperties","JSON","parse","stringify","keyframes","addKeyframe","property","prototype","hasOwnProperty","call","addEffect","EffectClass","prop","assign","_calculateValue","kfs","low","high","prevKeyframeIndex","mid","Math","floor","prevKeyframe","nextKeyframe","easedT","from","to","Color","lerpColor","lerp","translate","rotate","TextClip","text","super","fontSize","fill","align","textSize","textAlign","CENTER","ShapeClip","shapeType","stroke","strokeWeight","rectMode","ellipseMode","ellipse","ImageClip","imageMode","AudioClip","soundFile","volume","pan","_isPlaying","setVolume","isWithinClipBounds","startTimeInSound","jump","ALLOWED_PROTOCOLS","Hotspot","onClick","isHit","px","py","halfW","halfH","VideoClip","videoSrc","toLowerCase","startsWith","includes","protocol","e","videoElement","hotspots","_initElement","preload","muted","playsInline","targetTime","abs","currentTime","paused","isActive","playPromise","undefined","catch","addHotspot","checkClick","canvasX","canvasY","relativeX","relativeY","hotspot","readyState","noFill","SlideShowClip","slides","currentSlideIndex","slideActivationTime","addSlide","_activateSlide","index","next","previous","activeSlide","timeSinceSlideActivation","_clip","_p","_relativeTime","static","uiContainer","gifWorkerPath","playbackController","performanceManager","performance","memoryManager","exportGIF","quality","filename","wasPlaying","originalTime","gif","GIF","workers","workerScript","frameDelay","totalFrames","addFrame","copy","delay","on","blob","createVideoClip","createSlideShowClip","createTextClip","createShapeClip","createImageClip","createAudioClip","cacheAsset","map","handleMousePressed","mouseX","mouseY"],"mappings":"uXAIO,MAAMA,EACX,WAAAC,GAIEC,KAAKC,QAAU,EACjB,CAUA,QAAAC,CAASC,GACFA,EAKsB,iBAAhBA,EAAOC,MAA4C,KAAvBD,EAAOC,KAAKC,OAQxB,iBAAhBF,EAAOG,MAA4C,KAAvBH,EAAOG,KAAKD,OAQtB,mBAAlBF,EAAOI,OAKdP,KAAKC,QAAQO,KAAMC,GAAMA,EAAEL,OAASD,EAAOC,MAC7CM,QAAQC,KAAK,qBAAqBR,EAAOC,gCAI3CJ,KAAKC,QAAQW,KAAKT,GAThBO,QAAQC,KAAK,+CAAgDR,GAR7DO,QAAQC,KACN,qDACAR,GAVFO,QAAQC,KACN,qDACAR,GAPFO,QAAQC,KAAK,sDA+BjB,EChDF,MAAME,EAMJ,WAAAd,CAAYU,EAAGK,GACbd,KAAKS,EAAIA,EACTT,KAAKc,OAASA,EACdd,KAAKe,MAAQD,EAAOC,MACpBf,KAAKgB,OAASF,EAAOE,OAGrBhB,KAAKiB,YAAcR,EAAES,eAAelB,KAAKe,MAAOf,KAAKgB,OAAQP,EAAEU,OAC/DnB,KAAKoB,aAAeX,EAAES,eAAelB,KAAKe,MAAOf,KAAKgB,OAAQP,EAAEU,OAEhEnB,KAAKqB,QAAU,GACfrB,KAAKsB,eAAiB,GACtBtB,KAAKuB,sBAAwB,EAC/B,CAOA,UAAAC,CAAWC,EAAKC,GACd,GAAI1B,KAAKqB,QAAQI,IAAQzB,KAAKsB,eAAeG,GAC3C,OAEF,MACME,EAAU3B,KAAKS,EAAEe,WADP,+BAC2BE,EAAUE,IACnD5B,KAAKqB,QAAQI,GAAOG,SACb5B,KAAKsB,eAAeG,GAC3Bf,QAAQmB,IAAI,WAAWJ,gBAEzBzB,KAAKsB,eAAeG,GAAOE,CAC7B,CAQA,YAAMG,CAAOC,EAAeC,EAAmBC,GAE7CjC,KAAKkC,aAAaH,EAAeC,EAAmBC,GAGpD,MAAME,QAAoBnC,KAAKoC,uBAG/BpC,KAAKS,EAAE4B,MAAMF,EAAa,EAAG,GAG7BnC,KAAKuB,sBAAwB,EAC/B,CAMA,YAAAW,CAAaH,EAAeC,EAAmBC,GAC7CjC,KAAKiB,YAAYqB,QACjBtC,KAAKiB,YAAYL,OAEjB,MAAM2B,EAAoB,IAAIC,IAC9B,IAAK,MAAMC,KAAcT,EACvBO,EAAkBG,IAAID,EAAWE,UACjCJ,EAAkBG,IAAID,EAAWG,QAGnC,MAAMC,EAAkB,IAAId,GAAee,OACxCC,IAAUR,EAAkBS,IAAID,IAEnCF,EAAgBI,KAAK,CAACC,EAAGC,IAAMD,EAAEE,MAAQD,EAAEC,OAE3C,IAAK,MAAML,KAAQF,EAAiB,CAClC,MAAMQ,EAAepB,EAAOc,EAAKO,MACjC,IAAK,MAAMC,KAAUR,EAAKS,QACxBD,EAAOE,MAAMV,EAAM/C,KAAKiB,YAAaoC,GAEvCN,EAAKjB,OAAO9B,KAAKiB,YACnB,CAEA,IAAK,MAAMwB,KAAcT,EACvBS,EAAWX,OAAO9B,KAAKiB,YAAagB,GAGtCjC,KAAKiB,YAAYyC,KACnB,CAOA,0BAAMtB,GACJ,GAA0C,IAAtCpC,KAAKuB,sBAAsBoC,OAC7B,OAAO3D,KAAKiB,YAGd,IAAI2C,EAAe5D,KAAKiB,YACpB4C,EAAoB7D,KAAKoB,aAE7B,IAAK,IAAI0C,EAAI,EAAGA,EAAI9D,KAAKuB,sBAAsBoC,OAAQG,IAAK,CAC1D,MAAMP,EAASvD,KAAKuB,sBAAsBuC,GAEtC9D,KAAKsB,eAAeiC,EAAOjD,aACvBN,KAAKsB,eAAeiC,EAAOjD,MAGnC,MAAMsB,EAAS5B,KAAKqB,QAAQkC,EAAOjD,MACnC,GAAIsB,EAAQ,CAIV,GAHAiC,EAAkBjC,OAAOA,GACzBA,EAAOmC,WAAW,YAAaH,GAE3BL,EAAOS,SACT,IAAK,MAAOvC,EAAKwC,KAAUC,OAAOC,QAAQZ,EAAOS,UAC/CpC,EAAOmC,WAAWtC,EAAKwC,GAI3BJ,EAAkBO,MACfpE,KAAKe,MAAQ,GACbf,KAAKgB,OAAS,EACfhB,KAAKe,MACLf,KAAKgB,SAIN4C,EAAcC,GAAqB,CAACA,EAAmBD,EAC1D,CACF,CAGA,OAAOA,CACT,EC3IF,MAAMS,EAOJ,eAAOC,CAASC,EAASC,GAKvB,MAJA9D,QAAQ+D,MAAM,uCAAuCF,KACjDC,GACF9D,QAAQ+D,MAAM,kBAAmBD,GAE7B,IAAIE,MAAM,uBAAuBH,IACzC,CAOA,cAAOI,CAAQJ,GACb7D,QAAQC,KAAK,gCAAgC4D,IAC/C,CAQA,4BAAOK,CAAsBH,GAG3B/D,QAAQ+D,MAAM,0CAA0CA,EAAMF,UAChE,EC5BF,MAAMM,EAQJ,WAAA9E,CAAYU,EAAGK,GAAQgE,SAAEA,EAAW,KAAU,IAC5C9E,KAAK8E,SAAWA,EAChB9E,KAAK+E,MAAQ,GACb/E,KAAKgF,YAAc,GACnBhF,KAAKiC,KAAO,EACZjC,KAAKiF,WAAY,EAEjBjF,KAAKkF,YAAa,EAClBlF,KAAKmF,WAAa,IAAI3C,IACtBxC,KAAKoF,kBAAmB,EAExBpF,KAAKqF,aAAe,IAAIxE,EAAaJ,EAAGK,GACxCd,KAAKsF,cAAgB,IAAIxF,EACzBE,KAAKuF,gBAAkB,IAAIC,IAC3BxF,KAAKyF,YAAc,IAAID,IACvBxF,KAAK0F,gBAAiB,CACxB,CASA,GAAAC,CAAIxF,GACFH,KAAKsF,cAAcpF,SAASC,EAC9B,CAMA,OAAAyF,CAAQ7C,GACN/C,KAAK+E,MAAMnE,KAAKmC,GAChBA,EAAK8C,SAAW7F,KAEZA,KAAKkF,WACPlF,KAAKoF,kBAAmB,EAExBpF,KAAK+E,MAAM9B,KAAK,CAACC,EAAGC,IAAMD,EAAEE,MAAQD,EAAEC,MAE1C,CAOA,sBAAA0C,CAAuB1F,EAAM2F,GAC3B/F,KAAKuF,gBAAgBS,IAAI5F,EAAM2F,EACjC,CAOA,kBAAAE,CAAmB7F,EAAM8F,GACvBlG,KAAKyF,YAAYO,IAAI5F,EAAM8F,EAC7B,CAeA,aAAAC,CAAcC,GACZ,MAAMC,EAAkBrG,KAAKuF,gBAAgBe,IAAIF,EAAQ9F,MACzD,IAAK+F,EAEH,OADAhC,EAAaM,QAAQ,4BAA4ByB,EAAQ9F,QAClD,KAET,MAAMmC,EAAa,IAAI4D,EAAgBD,GAEvC,OADApG,KAAKgF,YAAYpE,KAAK6B,GACfA,CACT,CAWA,KAAA8D,CAAMC,GACJxG,KAAKkF,YAAa,EAClB,IACEsB,GACF,CAAC,QACCxG,KAAKkF,YAAa,EAClBlF,KAAKyG,eACP,CACF,CAMA,aAAAA,GACEzG,KAAKmF,WAAWuB,QAAS3D,GAASA,EAAK4D,mBACvC3G,KAAKmF,WAAW7C,QAEZtC,KAAKoF,mBACPpF,KAAK+E,MAAM9B,KAAK,CAACC,EAAGC,IAAMD,EAAEE,MAAQD,EAAEC,OACtCpD,KAAKoF,kBAAmB,EAE5B,CAOA,cAAAwB,GACE,MAAMC,EAAc,GACpB,IAAK,MAAM9D,KAAQ/C,KAAK+E,MAClB/E,KAAKiC,MAAQc,EAAKO,OAAStD,KAAKiC,KAAOc,EAAKO,MAAQP,EAAK+B,UAC3D+B,EAAYjG,KAAKmC,GAGrB,OAAO8D,CACT,CAQA,cAAAC,CAAe7E,GACb,MAAM8E,EAAiB,IAAIvE,IACrBR,EAAoB,GAE1B,IAAK,MAAMe,KAAQ/C,KAAK+E,MAClB9C,GAAQc,EAAKO,OAASrB,EAAOc,EAAKO,MAAQP,EAAK+B,UACjDiC,EAAerE,IAAIK,GAIvB,IAAK,MAAMN,KAAczC,KAAKgF,YAE1B/C,GAAQQ,EAAWa,OACnBrB,EAAOQ,EAAWa,MAAQb,EAAWqC,WAErC9C,EAAkBpB,KAAK6B,GACvBsE,EAAerE,IAAID,EAAWE,UAC9BoE,EAAerE,IAAID,EAAWG,SAIlC,MAAO,CAAEmE,iBAAgB/E,oBAC3B,CAOA,MAAAgF,CAAOvG,GACAT,KAAK0F,iBACR1F,KAAKiH,eACLjH,KAAK0F,gBAAiB,GAGpB1F,KAAKiF,YACPjF,KAAKiC,MAAQxB,EAAEyG,UACXlH,KAAKiC,MAAQjC,KAAK8E,WACpB9E,KAAKiC,MAAQjC,KAAK8E,WAItB,MAAMiC,eAAEA,GAAmB/G,KAAK8G,eAAe9G,KAAKiC,MAEpD,IAAK,MAAMc,KAAQgE,EAAgB,CACjC,MAAM1D,EAAerD,KAAKiC,KAAOc,EAAKO,MACtCP,EAAKiE,OAAOvG,EAAG4C,EACjB,CACF,CAMA,YAAMvB,GACJ,MAAMiF,eAAEA,EAAc/E,kBAAEA,GAAsBhC,KAAK8G,eACjD9G,KAAKiC,YAEDjC,KAAKqF,aAAavD,OAAOiF,EAAgB/E,EAAmBhC,KAAKiC,KACzE,CAKA,IAAAkF,GACEnH,KAAKiF,WAAY,CACnB,CAKA,KAAAmC,GACEpH,KAAKiF,WAAY,CACnB,CAMA,IAAAoC,CAAKpF,GACCA,GAAQ,GAAKA,GAAQjC,KAAK8E,WAC5B9E,KAAKiC,KAAOA,EAEhB,CAMA,YAAAgF,GACE,IAAK,MAAM9G,KAAUH,KAAKsF,cAAcrF,QACtC,IACEE,EAAOI,OAAOP,KAChB,CAAE,MAAOyE,GACPJ,EAAaC,SAAS,yBAAyBnE,EAAOC,OAAQqE,EAChE,CAEJ,EC3PF,MAAM6C,EAIJ,WAAAvH,CAAYe,GACV,IAAKA,GAAsC,mBAArBA,EAAOyG,UAC3B,MAAM,IAAI7C,MACR,iEAGJ1E,KAAKc,OAASA,EACdd,KAAKwH,OAAS,EAChB,CAKA,KAAAlE,GACEtD,KAAKwH,OAAS,GACd9G,QAAQmB,IAAI,2BACd,CAKA,YAAA4F,GAGE,MAAMC,EAAe1H,KAAKc,OAAOyG,UAAU,aAAc,IACzDvH,KAAKwH,OAAO5G,KAAK8G,EACnB,CAKA,IAAAC,GACEjH,QAAQmB,IACN,mDAAmD7B,KAAKwH,OAAO7D,SAEnE,CAMA,SAAAiE,GACE,OAAO5H,KAAKwH,MACd,EC/CF,MAAMK,EAQJ,WAAA9H,EAAY+H,WAAEA,EAAUC,MAAEA,EAAKC,QAAEA,EAAOC,WAAEA,GAAe,IACvDjI,KAAKkI,OAAS,IAAIC,OAAO,IAAIC,IAAI,sBAAuB,oBAAAC,UAAA,oBAAAC,SAAAC,QAAA,OAAAC,cAAAC,YAAAC,KAAA,oBAAAL,SAAAC,SAAAI,KAAAC,GAAA,WAAAA,EAAAC,QAAAC,eAAAF,EAAAG,KAAA,IAAAV,IAAA,wBAAAC,SAAAU,SAAAL,MAAkB,CACxEpI,KAAM,WAGRN,KAAK8H,WAAaA,EAClB9H,KAAK+H,MAAQA,EACb/H,KAAKgI,QAAUA,EACfhI,KAAKiI,WAAaA,EAElBjI,KAAKkI,OAAOc,UAAYhJ,KAAKiJ,oBAAoBC,KAAKlJ,KACxD,CAMA,mBAAAiJ,EAAoBE,KAAEA,IACpB,OAAQA,EAAK7I,MACX,IAAK,MACCN,KAAK+H,OAAO/H,KAAK+H,MAAMoB,EAAKA,MAChC,MACF,IAAK,WACCnJ,KAAK8H,YAAY9H,KAAK8H,WAAWqB,EAAKA,MAC1C,MACF,IAAK,QACCnJ,KAAKgI,SAAShI,KAAKgI,QAAQ,IAAItD,MAAMyE,EAAKA,OAC9C,MACF,IAAK,OAAQ,CACX,MAAMC,EAAY,IAAIC,KAAK,CAACF,EAAKA,KAAKG,QAAS,CAAEhJ,KAAM,cACnDN,KAAKiI,YAAYjI,KAAKiI,WAAWmB,GACrC,KACF,CACA,QACE1I,QAAQC,KACN,sDACAwI,EAAK7I,MAGb,CAOA,OAAOkH,EAAQ+B,EAAY,IACzB,IAAK/B,GAA4B,IAAlBA,EAAO7D,OAAc,CAClC,MAAMc,EAAQ,IAAIC,MAAM,iCACxB,IAAI1E,KAAKgI,QAGP,MAAMvD,EAER,YAJEzE,KAAKgI,QAAQvD,EAKjB,CAEIzE,KAAK+H,OAAO/H,KAAK+H,MAAM,sCAC3B/H,KAAKkI,OAAOsB,YAAY,CAAEhC,SAAQ+B,aACpC,CAKA,SAAAE,GACEzJ,KAAKkI,OAAOuB,WACd,ECvEF,MAAMC,EAOJ,WAAA3J,CAAY8F,EAAU/E,EAAQ6I,GAC5B3J,KAAK6F,SAAWA,EAChB7F,KAAKc,OAASA,EACdd,KAAK2J,UAAYA,EAGjB3J,KAAK4J,cAAgB,IAAItC,EAActH,KAAKc,QAC5Cd,KAAK6J,SAAW,IAAIhC,EAAS,CAC3BC,WAAY9H,KAAK8J,qBAAqBZ,KAAKlJ,MAC3CiI,WAAYjI,KAAK+J,qBAAqBb,KAAKlJ,MAC3CgI,QAAShI,KAAKgK,kBAAkBd,KAAKlJ,MACrC+H,MAAQlG,GAAQnB,QAAQmB,IAAI,gBAAiBA,KAG/C7B,KAAKiK,WACP,CAMA,SAAAA,GACE,IAAKjK,KAAK2J,UAAW,OAErB,MAAMO,EAAU7B,SAAS8B,cAAc,OACvCD,EAAQE,MAAMC,QAAU,OACxBH,EAAQE,MAAME,gBAAkB,UAChCJ,EAAQE,MAAMG,UAAY,mBAG1BvK,KAAKwK,WAAanC,SAAS8B,cAAc,UACzCnK,KAAKwK,WAAWC,YAAc,OAC9BzK,KAAKwK,WAAWE,QAAU,KACpB1K,KAAK6F,SAASZ,WAChBjF,KAAKoH,QACLpH,KAAKwK,WAAWC,YAAc,SAE9BzK,KAAKmH,OACLnH,KAAKwK,WAAWC,YAAc,UAGlCP,EAAQS,YAAY3K,KAAKwK,YAGzBxK,KAAK4K,aAAevC,SAAS8B,cAAc,UAC3CnK,KAAK4K,aAAaH,YAAc,eAChCzK,KAAK4K,aAAaR,MAAMS,WAAa,OACrC7K,KAAK4K,aAAaF,QAAU,IAAM1K,KAAK8K,qBACvCZ,EAAQS,YAAY3K,KAAK4K,cAGzB5K,KAAK+K,aAAe1C,SAAS8B,cAAc,QAC3CnK,KAAK+K,aAAaX,MAAMS,WAAa,OACrC7K,KAAK+K,aAAaX,MAAMY,WAAa,YACrChL,KAAK+K,aAAaX,MAAMa,QAAU,OAClCf,EAAQS,YAAY3K,KAAK+K,cAEzB/K,KAAK2J,UAAUgB,YAAYT,EAC7B,CAMA,wBAAMY,GACJ9K,KAAK4K,aAAaM,UAAW,EAC7BlL,KAAKwK,WAAWU,UAAW,EAC3BlL,KAAK+K,aAAaX,MAAMa,QAAU,SAClCjL,KAAK+K,aAAaN,YAAc,sBAGhCzK,KAAKoH,QACLpH,KAAKqH,KAAK,GAEVrH,KAAK4J,cAActG,QAEnB,MAAMiG,EAAYvJ,KAAK6F,SAAS0D,WAAa,GACvC4B,EAAgB,IAAO5B,EACvB6B,EAAgBpL,KAAK6F,SAASf,eAG9B,IAAIuG,QAASC,GAAYC,WAAWD,EAAS,KAGnD,IAAK,IAAIrJ,EAAO,EAAGA,GAAQmJ,EAAenJ,GAAQkJ,EAChDnL,KAAK6F,SAASwB,KAAKpF,GACnBjC,KAAK6F,SAAS/D,SACd9B,KAAK4J,cAAcnC,eAGrBzH,KAAK4J,cAAcjC,OACnB3H,KAAK+K,aAAaN,YAChB,gDAGFzK,KAAK6J,SAAS2B,OAAOxL,KAAK4J,cAAchC,YAAa2B,EACvD,CAOA,oBAAAO,CAAqB2B,GACnBzL,KAAK+K,aAAaN,YAAc,iBAAiBgB,IACnD,CAOA,oBAAA1B,CAAqBX,GACnBpJ,KAAK+K,aAAaN,YAAc,yCAGhC,MAAMiB,EAAMtD,IAAIuD,gBAAgBvC,GAC1BlG,EAAImF,SAAS8B,cAAc,KACjCjH,EAAEkH,MAAMa,QAAU,OAClB/H,EAAEwF,KAAOgD,EACTxI,EAAE0I,SAAW,sBACbvD,SAASwD,KAAKlB,YAAYzH,GAC1BA,EAAE4I,QAGFP,WAAW,KACTlD,SAASwD,KAAKE,YAAY7I,GAC1BkF,IAAI4D,gBAAgBN,GACpB1L,KAAKiM,iBACJ,IACL,CAOA,iBAAAjC,CAAkBvF,GAChB/D,QAAQ+D,MAAM,iBAAkBA,GAChCzE,KAAK+K,aAAaN,YAAc,UAAUhG,EAAMF,UAGhDgH,WAAW,IAAMvL,KAAKiM,gBAAiB,IACzC,CAMA,aAAAA,GACEjM,KAAK4K,aAAaM,UAAW,EAC7BlL,KAAKwK,WAAWU,UAAW,EAC3BlL,KAAK+K,aAAaX,MAAMa,QAAU,OAClCjL,KAAK+K,aAAaN,YAAc,EAClC,CAMA,IAAAtD,GACEnH,KAAK6F,SAASsB,MAChB,CAMA,KAAAC,GACEpH,KAAK6F,SAASuB,OAChB,CAOA,IAAAC,CAAKpF,GACHjC,KAAK6F,SAASwB,KAAKpF,EACrB,EC7LF,MAAMiK,EAMJ,WAAAnM,EAAYoM,mBAAEA,EAAqB,IAAO,CAAA,GACxCnM,KAAKmM,mBAAqBA,EAC1BnM,KAAKoM,SAAU,CACjB,CAOA,OAAAC,CAAQC,GACN,IAAKtM,KAAKoM,UAAYE,EACpB,OAGF,MAAMC,EAAmBD,EAAG/C,YACxBgD,EAAmBvM,KAAKmM,oBAC1BzL,QAAQC,KACN,qCAAqC4L,EAAiBC,QAAQ,2CAA2CxM,KAAKmM,0BAGpH,CAMA,MAAAM,GACEzM,KAAKoM,SAAU,CACjB,CAMA,OAAAM,GACE1M,KAAKoM,SAAU,CACjB,EC3CF,MAAMO,EAIJ,WAAA5M,GACEC,KAAK4M,MAAQ,IAAIpH,IACjBxF,KAAKoM,SAAU,CACjB,CAQA,QAAAS,CAASpL,EAAKqL,GACP9M,KAAKoM,UACVpM,KAAK4M,MAAM5G,IAAIvE,EAAKqL,GACpBpM,QAAQmB,IAAI,yBAAyBJ,KACvC,CAQA,QAAAsL,CAAStL,GACP,OAAOzB,KAAK4M,MAAMtG,IAAI7E,EACxB,CAOA,iBAAAuL,CAAkBC,GAChB,IAAKjN,KAAKoM,QAAS,OACnB,MAAMc,EAAgB,IAAI1K,IAAIyK,GAC9B,IAAIE,EAAe,EACnB,IAAK,MAAM1L,KAAOzB,KAAK4M,MAAMQ,OACtBF,EAAclK,IAAIvB,KACrBzB,KAAK4M,MAAMS,OAAO5L,GAClB0L,KAGAA,EAAe,GACjBzM,QAAQmB,IAAI,WAAWsL,8BAE3B,CAMA,QAAAG,GACEtN,KAAK4M,MAAMtK,QACX5B,QAAQmB,IAAI,iCACd,CAMA,MAAA4K,GACEzM,KAAKoM,SAAU,CACjB,CAMA,OAAAM,GACE1M,KAAKoM,SAAU,CACjB,EC9EF,MAAMmB,EAMJ,WAAAxN,CAAYkC,EAAMgC,EAAOuJ,EAAS,UAChCxN,KAAKiC,KAAOA,EACZjC,KAAKiE,MAAQA,EACbjE,KAAKwN,OAASA,CAChB,ECFF,MAAMC,EAAS,CAMbC,OAASC,GAAMA,EAMfC,WAAaD,GAAMA,EAAIA,EAMvBE,YAAcF,GAAMA,GAAK,EAAIA,GAM7BG,cAAgBH,GAAOA,EAAI,GAAM,EAAIA,EAAIA,GAAU,EAAI,EAAIA,GAAKA,EAAnB,EAM7CI,YAAcJ,GAAMA,EAAIA,EAAIA,EAM5BK,aAAeL,KAAQA,EAAIA,EAAIA,EAAI,EAMnCM,eAAiBN,GACfA,EAAI,GAAM,EAAIA,EAAIA,EAAIA,GAAKA,EAAI,IAAM,EAAIA,EAAI,IAAM,EAAIA,EAAI,GAAK,GCxCpE,MAAMO,EAUJ,WAAAnO,EAAYuD,MACVA,EAAQ,EAACwB,SACTA,EAAW,IAAI1B,MACfA,EAAQ,EAAC+K,SACTA,EAAW,QACR/H,GACD,IACFpG,KAAKsD,MAAQA,EACbtD,KAAK8E,SAAWA,EAChB9E,KAAKoD,MAAQA,EACbpD,KAAKmO,SAAWA,EAChBnO,KAAK6F,SAAW,KAEhB7F,KAAKoO,WAAa,CAChBC,EAAG,EACHC,EAAG,EACHC,SAAU,EACVC,MAAO,EACPC,QAAS,KACLrI,EAAQgI,YAAc,IAG5BpO,KAAK0O,kBAAoBC,KAAKC,MAAMD,KAAKE,UAAU7O,KAAKoO,aACxDpO,KAAK8O,UAAY,CAAA,EACjB9O,KAAKwD,QAAU,EACjB,CAaA,WAAAuL,CAAYC,EAAU/M,EAAMgC,EAAOuJ,EAAS,UAiB1C,OAhBKtJ,OAAO+K,UAAUC,eAAeC,KAAKnP,KAAKoO,WAAYY,IACzD3K,EAAaC,SACX,aAAa0K,+DAIZhP,KAAK8O,UAAUE,KAClBhP,KAAK8O,UAAUE,GAAY,IAE7BhP,KAAK8O,UAAUE,GAAUpO,KAAK,IAAI2M,EAAStL,EAAMgC,EAAOuJ,IAEpDxN,KAAK6F,UAAY7F,KAAK6F,SAASX,WACjClF,KAAK6F,SAASV,WAAWzC,IAAI1C,MAE7BA,KAAK8O,UAAUE,GAAU/L,KAAK,CAACC,EAAGC,IAAMD,EAAEjB,KAAOkB,EAAElB,MAE9CjC,IACT,CAWA,SAAAoP,CAAUhJ,EAAU,IAClB,MAAM9F,KAAEA,GAAS8F,EAEjB,IAAKpG,KAAK6F,SAIR,OAHAxB,EAAaC,SACX,6DAEKtE,KAGT,MAAMqP,EAAcrP,KAAK6F,SAASJ,YAAYa,IAAIhG,GAClD,GAAI+O,EAAa,CACf,MAAM9L,EAAS,IAAI8L,EAAYjJ,GAC/BpG,KAAKwD,QAAQ5C,KAAK2C,EACpB,MACEc,EAAa1D,KAAK,qBAAqBL,iBAGzC,OAAON,IACT,CAMA,eAAA2G,GACE,IAAK,MAAM2I,KAAQtP,KAAK8O,UAClB5K,OAAO+K,UAAUC,eAAeC,KAAKnP,KAAK8O,UAAWQ,IACvDtP,KAAK8O,UAAUQ,GAAMrM,KAAK,CAACC,EAAGC,IAAMD,EAAEjB,KAAOkB,EAAElB,KAGrD,CAQA,MAAA+E,CAAOvG,EAAG4C,GACRa,OAAOqL,OAAOvP,KAAKoO,WAAYpO,KAAK0O,mBAEpC,IAAK,MAAMY,KAAQtP,KAAK8O,UAClB5K,OAAO+K,UAAUC,eAAeC,KAAKnP,KAAK8O,UAAWQ,KACvDtP,KAAKoO,WAAWkB,GAAQtP,KAAKwP,gBAAgB/O,EAAG6O,EAAMjM,GAG5D,CAUA,eAAAmM,CAAgB/O,EAAG6O,EAAMrN,GACvB,MAAMwN,EAAMzP,KAAK8O,UAAUQ,GAC3B,IAAKG,GAAsB,IAAfA,EAAI9L,OACd,OAAO3D,KAAK0O,kBAAkBY,GAGhC,GAAIrN,GAAQwN,EAAI,GAAGxN,KACjB,OAAOwN,EAAI,GAAGxL,MAEhB,GAAIhC,GAAQwN,EAAIA,EAAI9L,OAAS,GAAG1B,KAC9B,OAAOwN,EAAIA,EAAI9L,OAAS,GAAGM,MAG7B,IAAIyL,EAAM,EACNC,EAAOF,EAAI9L,OAAS,EACpBiM,EAAoB,EAExB,KAAOF,GAAOC,GAAM,CAClB,MAAME,EAAMC,KAAKC,OAAOL,EAAMC,GAAQ,GACtC,GAAIF,EAAII,GAAK5N,KAAOA,EAClB2N,EAAoBC,EACpBH,EAAMG,EAAM,MACP,MAAIJ,EAAII,GAAK5N,KAAOA,GAGzB,OAAOwN,EAAII,GAAK5L,MAFhB0L,EAAOE,EAAM,CAGf,CACF,CAEA,MAAMG,EAAeP,EAAIG,GACnBK,EAAeR,EAAIG,EAAoB,GAEvCjC,GACH1L,EAAO+N,EAAa/N,OAASgO,EAAahO,KAAO+N,EAAa/N,MAE3DiO,GADiBzC,EAAOuC,EAAaxC,SAAWC,EAAOC,QAC/BC,GAExBwC,EAAOH,EAAa/L,MACpBmM,EAAKH,EAAahM,MAExB,OAAIxD,EAAE4P,OAASF,aAAgB1P,EAAE4P,OAASD,aAAc3P,EAAE4P,MACjD5P,EAAE6P,UAAUH,EAAMC,EAAIF,GAGxBzP,EAAE8P,KAAKJ,EAAMC,EAAIF,EAC1B,CAOA,MAAApO,CAAOrB,GACLA,EAAEG,OACFH,EAAE+P,UAAUxQ,KAAKoO,WAAWC,EAAGrO,KAAKoO,WAAWE,GAC/C7N,EAAEgQ,OAAOzQ,KAAKoO,WAAWG,UACzB9N,EAAE+N,MAAMxO,KAAKoO,WAAWI,MAC1B,ECpLF,MAAMkC,UAAiBxC,EACrB,WAAAnO,CAAY4Q,EAAMvK,EAAU,IAC1BwK,MAAMxK,GACNpG,KAAK2Q,KAAOA,EACZ3Q,KAAKoO,WAAWyC,SAAWzK,EAAQyK,UAAY,GAC/C7Q,KAAKoO,WAAW0C,KAAO1K,EAAQ0K,MAAQ,UACvC9Q,KAAKoO,WAAW2C,MAAQ3K,EAAQ2K,OAAS,QAC3C,CAQA,MAAAjP,CAAOrB,EAAG4C,GACRuN,MAAM9O,OAAOrB,EAAG4C,GAEhB5C,EAAEqQ,KAAK9Q,KAAKoO,WAAW0C,MACvBrQ,EAAEuQ,SAAShR,KAAKoO,WAAWyC,UAC3BpQ,EAAEwQ,UAAUjR,KAAKoO,WAAW2C,MAAOtQ,EAAEyQ,QACrCzQ,EAAEkQ,KAAK3Q,KAAK2Q,KAAM,EAAG,GAErBlQ,EAAEiD,KACJ,ECtBF,MAAMyN,UAAkBjD,EACtB,WAAAnO,CAAYqR,EAAY,OAAQhL,EAAU,CAAA,GACxCwK,MAAM,IACDxK,EACHgI,WAAY,CACVrN,MAAO,IACPC,OAAQ,IACR8P,KAAM,UACNO,OAAQ,UACRC,aAAc,KACVlL,EAAQgI,YAAc,MAG9BpO,KAAKoR,UAAYA,CACnB,CAQA,MAAAtP,CAAOrB,EAAG4C,GACRuN,MAAM9O,OAAOrB,EAAG4C,GAEhB5C,EAAEqQ,KAAK9Q,KAAKoO,WAAW0C,MACvBrQ,EAAE4Q,OAAOrR,KAAKoO,WAAWiD,QACzB5Q,EAAE6Q,aAAatR,KAAKoO,WAAWkD,cAER,SAAnBtR,KAAKoR,WACP3Q,EAAE8Q,SAAS9Q,EAAEyQ,QACbzQ,EAAE2D,KAAK,EAAG,EAAGpE,KAAKoO,WAAWrN,MAAOf,KAAKoO,WAAWpN,SACxB,YAAnBhB,KAAKoR,YACd3Q,EAAE+Q,YAAY/Q,EAAEyQ,QAChBzQ,EAAEgR,QAAQ,EAAG,EAAGzR,KAAKoO,WAAWrN,MAAOf,KAAKoO,WAAWpN,SAGzDP,EAAEiD,KACJ,EC7CF,MAAMgO,UAAkBxD,EACtB,WAAAnO,CAAYsC,EAAO+D,EAAU,IACN,iBAAV/D,GAAuB+D,EAAQ+H,WACxC/H,EAAQ+H,SAAW9L,GAErBuO,MAAM,IACDxK,EACHgI,WAAY,CACVrN,MAAOsB,EAAQA,EAAMtB,MAAQ,EAC7BC,OAAQqB,EAAQA,EAAMrB,OAAS,KAC3BoF,EAAQgI,YAAc,MAG9BpO,KAAKqC,MAAQA,CACf,CAQA,MAAAP,CAAOrB,EAAG4C,GACRuN,MAAM9O,OAAOrB,EAAG4C,GAEZrD,KAAKqC,QAEP5B,EAAEkR,UAAUlR,EAAEyQ,QACdzQ,EAAE4B,MAAMrC,KAAKqC,MAAO,EAAG,EAAGrC,KAAKoO,WAAWrN,MAAOf,KAAKoO,WAAWpN,SAGnEP,EAAEiD,KACJ,EC7BF,MAAMkO,UAAkB1D,EACtB,WAAAnO,CAAY8R,EAAWzL,EAAU,IACN,iBAAdyL,GAA2BzL,EAAQ+H,WAC5C/H,EAAQ+H,SAAW0D,GAQrBjB,MAAM,IACDxK,EACHgI,WAAY,CANZ0D,OAAQ,EACRC,IAAK,KAKmC3L,EAAQgI,YAAc,CAAA,KAGhEpO,KAAK6R,UAAYA,EACjB7R,KAAKgS,YAAa,CACpB,CAQA,MAAAhL,CAAOvG,EAAG4C,GAGR,GAFAuN,MAAM5J,OAAOvG,EAAG4C,IAEXrD,KAAK6R,WAA4C,mBAAxB7R,KAAK6R,UAAU1K,KAC3C,OAGFnH,KAAK6R,UAAUI,UAAUjS,KAAKoO,WAAW0D,QACzC9R,KAAK6R,UAAUE,IAAI/R,KAAKoO,WAAW2D,KAEnC,MAAMG,EACJ7O,GAAgB,GAAKA,EAAerD,KAAK8E,SAE3C,GAAIoN,IAAuBlS,KAAKgS,WAAY,CAC1C,MAAMG,EAAmB9O,EAAe,IACpC8O,EAAmBnS,KAAK6R,UAAU/M,aACpC9E,KAAK6R,UAAU1K,OACfnH,KAAK6R,UAAUO,KAAKD,GACpBnS,KAAKgS,YAAa,EAEtB,MAAYE,GAAsBlS,KAAKgS,aACrChS,KAAK6R,UAAUlK,OACf3H,KAAKgS,YAAa,EAEtB,CAOA,MAAAlQ,GAEA,EC5EF,MAAMuQ,EAAoB,CAAC,QAAS,SAAU,QAAS,SAOvD,MAAMC,EACJ,WAAAvS,CAAYqG,EAAU,IACpBpG,KAAKqO,EAAIjI,EAAQiI,GAAK,EACtBrO,KAAKsO,EAAIlI,EAAQkI,GAAK,EACtBtO,KAAKe,MAAQqF,EAAQrF,OAAS,IAC9Bf,KAAKgB,OAASoF,EAAQpF,QAAU,GAChChB,KAAKsD,MAAQ8C,EAAQ9C,OAAS,EAC9BtD,KAAK8E,SAAWsB,EAAQtB,UAAY,IACpC9E,KAAKuS,QAAUnM,EAAQmM,SAAO,MAAa,EAC7C,CASA,KAAAC,CAAMC,EAAIC,GAER,MAAMC,EAAQ3S,KAAKe,MAAQ,EACrB6R,EAAQ5S,KAAKgB,OAAS,EAC5B,OACEyR,GAAMzS,KAAKqO,EAAIsE,GACfF,GAAMzS,KAAKqO,EAAIsE,GACfD,GAAM1S,KAAKsO,EAAIsE,GACfF,GAAM1S,KAAKsO,EAAIsE,CAEnB,EAOF,MAAMC,UAAkB3E,EAKtB,WAAAnO,CAAY+S,EAAU1M,EAAU,IAC9BwK,MAAMxK,GAIgB,iBAAb0M,GACPA,EAASzS,OAAO0S,cAAcC,WAAW,gBAEzC3O,EAAaC,SACX,wEAIJ,IACE,MAAMoH,EAAM,IAAItD,IAAI0K,EAAUzK,SAASU,SAClCsJ,EAAkBY,SAASvH,EAAIwH,WAClC7O,EAAaC,SACX,0BAA0BoH,EAAIwH,6CAGpC,CAAE,MAAOC,GACP9O,EAAaC,SAAS,6BAA6BwO,IAAYK,EACjE,CAEAnT,KAAK8S,SAAWA,EAChB9S,KAAKiF,WAAY,EACjBjF,KAAKoT,aAAe,KAGpBpT,KAAKoO,WAAWrN,MAAQqF,EAAQrF,OAAS,KACzCf,KAAKoO,WAAWpN,OAASoF,EAAQpF,QAAU,KAE3ChB,KAAKqT,SAAW,EAClB,CAOA,YAAAC,GACMtT,KAAKoT,eAETpT,KAAKoT,aAAe/K,SAAS8B,cAAc,SAC3CnK,KAAKoT,aAAatK,IAAM9I,KAAK8S,SAC7B9S,KAAKoT,aAAaG,QAAU,OAC5BvT,KAAKoT,aAAaI,OAAQ,EAC1BxT,KAAKoT,aAAaK,aAAc,EAClC,CAOA,MAAAzM,CAAOvG,EAAG4C,GACRrD,KAAKsT,eACL1C,MAAM5J,OAAOvG,EAAG4C,GAGhB,MAAMqQ,EAAarQ,EAAe,KACXyM,KAAK6D,IAAI3T,KAAKoT,aAAaQ,YAAcF,GAC3C,KAAQ1T,KAAKoT,aAAaS,UAC7C7T,KAAKoT,aAAaQ,YAAcF,GAGlC,MAAMI,EAAWzQ,GAAgB,GAAKA,EAAerD,KAAK8E,SAC1D,GAAIgP,IAAa9T,KAAKiF,UAAW,CAC/B,MAAM8O,EAAc/T,KAAKoT,aAAajM,YAClB6M,IAAhBD,GACFA,EAAYE,MAAM,QAIpBjU,KAAKiF,WAAY,CACnB,MAAY6O,GAAY9T,KAAKiF,YAC3BjF,KAAKoT,aAAahM,QAClBpH,KAAKiF,WAAY,EAErB,CAmBA,UAAAiP,CAAW9N,EAAU,IAEnB,OADApG,KAAKqT,SAASzS,KAAK,IAAI0R,EAAQlM,IACxBpG,IACT,CAUA,UAAAmU,CAAW1T,EAAG2T,EAASC,EAAShR,GAG9B,MAIMiR,EAAYF,EAJEpU,KAAKoO,WAAWC,EAK9BkG,EAAYF,EAJErU,KAAKoO,WAAWE,EAMpC,IAAK,MAAMkG,KAAWxU,KAAKqT,SAAU,CAKnC,GAHEhQ,GAAgBmR,EAAQlR,OACxBD,EAAemR,EAAQlR,MAAQkR,EAAQ1P,UAErB0P,EAAQhC,MAAM8B,EAAWC,GAG3C,OAFAC,EAAQjC,WAED,CAEX,CACA,OAAO,CACT,CAEA,MAAAzQ,CAAOrB,EAAG4C,GAiBR,GAhBArD,KAAKsT,eACL1C,MAAM9O,OAAOrB,EAAG4C,GAEZrD,KAAKoT,cAAgBpT,KAAKoT,aAAaqB,YAAc,IACvDhU,EAAEkR,UAAUlR,EAAEyQ,QACdzQ,EAAE4B,MACArC,KAAKoT,aACL,EACA,EACApT,KAAKoO,WAAWrN,MAChBf,KAAKoO,WAAWpN,SAMhBP,EAAE8Q,SAAU,CACd9Q,EAAEG,OACFH,EAAE8Q,SAAS9Q,EAAEyQ,QACbzQ,EAAE4Q,OAAO,yBACT5Q,EAAE6Q,aAAa,GACf7Q,EAAEiU,SACF,IAAK,MAAMF,KAAWxU,KAAKqT,SAAU,CAEjChQ,GAAgBmR,EAAQlR,OACxBD,EAAemR,EAAQlR,MAAQkR,EAAQ1P,UAEvCrE,EAAE2D,KAAKoQ,EAAQnG,EAAGmG,EAAQlG,EAAGkG,EAAQzT,MAAOyT,EAAQxT,OAExD,CACAP,EAAEiD,KACJ,CAGAjD,EAAEiD,KACJ,ECpNF,MAAMiR,UAAsBzG,EAK1B,WAAAnO,CAAYqG,EAAU,IACpBwK,MAAMxK,GACNpG,KAAK4U,OAAS,GACd5U,KAAK6U,kBAAoB,EACzB7U,KAAK8U,oBAAsB,CAC7B,CAaA,QAAAC,CAAShQ,EAAQ,IAOf,OANA/E,KAAK4U,OAAOhU,KAAKmE,GACb/E,KAAK6F,UACPd,EAAM2B,QAAS3D,IACbA,EAAK8C,SAAW7F,KAAK6F,WAGlB7F,IACT,CAOA,cAAAgV,CAAeC,GACbjV,KAAK6U,kBAAoBI,EACrBjV,KAAK6F,WAGP7F,KAAK8U,oBAAsB9U,KAAK6F,SAAS5D,KAAOjC,KAAKsD,MAEzD,CAKA,IAAA4R,GACMlV,KAAK6U,kBAAoB7U,KAAK4U,OAAOjR,OAAS,GAChD3D,KAAKgV,eAAehV,KAAK6U,kBAAoB,EAEjD,CAKA,QAAAM,GACMnV,KAAK6U,kBAAoB,GAC3B7U,KAAKgV,eAAehV,KAAK6U,kBAAoB,EAEjD,CAQA,MAAA7N,CAAOvG,EAAG4C,GACRuN,MAAM5J,OAAOvG,EAAG4C,GAEhB,MAAM+R,EAAcpV,KAAK4U,OAAO5U,KAAK6U,mBACrC,GAAIO,EAAa,CACf,MAAMC,EAA2BhS,EAAerD,KAAK8U,oBACrDM,EAAY1O,QAAS3D,IAEnBA,EAAKiE,OAAOvG,EAAG4U,IAEnB,CACF,CAQA,MAAAvT,CAAOrB,GAGLmQ,MAAM9O,OAAOrB,GAEb,MAAM2U,EAAcpV,KAAK4U,OAAO5U,KAAK6U,mBACrC,GAAIO,EAAa,CAEK,IAAIA,GAAanS,KAAK,CAACC,EAAGC,IAAMD,EAAEE,MAAQD,EAAEC,OAKpDsD,QAAS3D,IACnBA,EAAKjB,OAAOrB,GACZA,EAAEiD,OAEN,CACF,0CChHF,MAOE,WAAA3D,EAAYuD,MAAEA,EAAQ,EAACwB,SAAEA,EAAW,KAAS,IAC3C9E,KAAKsD,MAAQA,EACbtD,KAAK8E,SAAWA,CAClB,CASA,KAAArB,CAAM6R,EAAOC,EAAIC,GACf,MAAM,IAAI9Q,MAAM,0DAClB,wLCeF,MAKE+Q,oBAAsBpR,EAWtB,WAAAtE,CACEU,GACAK,OACEA,EAAS,KAAI4U,YACbA,EAAc,KAAIC,cAClBA,EAAgB,qBACbvP,GACD,CAAA,GAEJ,IAAK3F,EACH,MAAM,IAAIiE,MACR,qEAGJ1E,KAAKoG,QAAU,CAAEuP,iBACjB3V,KAAK6F,SAAW,IAAIhB,EAASpE,EAAGK,EAAQsF,GACxCpG,KAAK4V,mBAAqB,IAAIlM,EAC5B1J,KAAK6F,SACL/E,EACA4U,GAEF1V,KAAK6V,mBAAqB,IAAI3J,EAAmB9F,EAAQ0P,aACzD9V,KAAK+V,cAAgB,IAAIpJ,EAEzB3M,KAAKmH,KAAOnH,KAAK4V,mBAAmBzO,KAAK+B,KAAKlJ,KAAK4V,oBACnD5V,KAAKoH,MAAQpH,KAAK4V,mBAAmBxO,MAAM8B,KAAKlJ,KAAK4V,oBACrD5V,KAAKqH,KAAOrH,KAAK4V,mBAAmBvO,KAAK6B,KAAKlJ,KAAK4V,mBACrD,CAyBA,eAAMI,EAAUzM,UACdA,EAAY,GAAE0M,QACdA,EAAU,GAAEC,SACZA,EAAW,4BAA2BpO,WACtCA,EAAa,MACX,IACFpH,QAAQmB,IAAI,0BACZ,MAAMsU,EAAanW,KAAK4V,mBAAmB3Q,UACrCmR,EAAepW,KAAK6F,SAAS5D,KAEnCjC,KAAKoH,QACLpH,KAAKqH,KAAK,GAEV,MAAMgP,EAAM,IAAIC,EAAI,CAClBC,QAAS,EACTN,UACAO,aAAcxW,KAAKoG,QAAQuP,gBAGvBc,EAAa,IAAOlN,EACpBmN,EAAc5G,KAAKC,MAAM/P,KAAK6F,SAASf,SAAW2R,GAExD,IAAK,IAAI3S,EAAI,EAAGA,EAAI4S,EAAa5S,IAAK,CACpC,MAAM8P,EAAc9P,EAAI2S,EACxBzW,KAAKqH,KAAKuM,GACV5T,KAAKgH,OAAOhH,KAAK6F,SAASpF,SACpBT,KAAK8B,SAGXuU,EAAIM,SAAS3W,KAAK6F,SAAS/E,OAAQ,CACjC8V,MAAM,EACNC,MAAOJ,IAGL3O,GACFA,GAAYhE,EAAI,GAAK4S,EAEzB,CAEAL,EAAIS,GAAG,WAAaC,IAClB,MAAMrL,EAAMtD,IAAIuD,gBAAgBoL,GAC1B7T,EAAImF,SAAS8B,cAAc,KACjCjH,EAAEwF,KAAOgD,EACTxI,EAAE0I,SAAWsK,EACb7N,SAASwD,KAAKlB,YAAYzH,GAC1BA,EAAE4I,QACFzD,SAASwD,KAAKE,YAAY7I,GAC1BkF,IAAI4D,gBAAgBN,GAEpBhL,QAAQmB,IAAI,wBAGZ7B,KAAKqH,KAAK+O,GACND,GACFnW,KAAKmH,SAITzG,QAAQmB,IAAI,2BACZwU,EAAIvU,QACN,CAUA,eAAAkV,CAAgBlE,EAAU1M,EAAU,IAClC,MAAMrD,EAAO,IAAI8P,EAAUC,EAAU1M,GAErC,OADApG,KAAK6F,SAASD,QAAQ7C,GACfA,CACT,CAYA,mBAAAkU,CAAoB7Q,EAAU,IAC5B,MAAMrD,EAAO,IAAI4R,EAAcvO,GAE/B,OADApG,KAAK6F,SAASD,QAAQ7C,GACfA,CACT,CAYA,cAAAmU,CAAevG,EAAMvK,EAAU,IAC7B,MAAMrD,EAAO,IAAI2N,EAASC,EAAMvK,GAEhC,OADApG,KAAK6F,SAASD,QAAQ7C,GACfA,CACT,CAUA,eAAAoU,CAAgB/F,EAAWhL,EAAU,IACnC,MAAMrD,EAAO,IAAIoO,EAAUC,EAAWhL,GAEtC,OADApG,KAAK6F,SAASD,QAAQ7C,GACfA,CACT,CAYA,eAAAqU,CAAgB/U,EAAO+D,EAAU,IAC/B,MAAMrD,EAAO,IAAI2O,EAAUrP,EAAO+D,GAElC,OADApG,KAAK6F,SAASD,QAAQ7C,GACfA,CACT,CAYA,eAAAsU,CAAgBxF,EAAWzL,EAAU,IACnC,MAAMrD,EAAO,IAAI6O,EAAUC,EAAWzL,GAEtC,OADApG,KAAK6F,SAASD,QAAQ7C,GACfA,CACT,CAOA,UAAAuU,CAAW7V,EAAKqL,GACd9M,KAAK+V,cAAclJ,SAASpL,EAAKqL,EACnC,CAMA,MAAA9F,CAAOvG,GACLT,KAAK6V,mBAAmBxJ,QAAQ5L,GAChCT,KAAK6F,SAASmB,OAAOvG,GAErB,MAAMwM,EAAkBjN,KAAK6F,SAC1Be,iBACA2Q,IAAKxU,GAASA,EAAKoL,UACnBrL,OAAQrB,GAAQA,GACnBzB,KAAK+V,cAAc/I,kBAAkBC,EACvC,CAKA,YAAMnL,SACE9B,KAAK6F,SAAS/D,QACtB,CAWA,kBAAA0V,CAAmB/W,GACjB,MAAMoG,EAAc7G,KAAK6F,SAASe,iBAElC,IAAK,IAAI9C,EAAI+C,EAAYlD,OAAS,EAAGG,GAAK,EAAGA,IAAK,CAChD,MAAMf,EAAO8D,EAAY/C,GACzB,GAAIf,aAAgB8P,EAAW,CAC7B,MAAMxP,EAAerD,KAAK6F,SAAS5D,KAAOc,EAAKO,MAE/C,GADmBP,EAAKoR,WAAW1T,EAAGA,EAAEgX,OAAQhX,EAAEiX,OAAQrU,GAGxD,KAEJ,CACF,CACF,CAMA,qBAAAuB,CAAsBH,GACpBJ,EAAaO,sBAAsBH,EACrC"}